<style>
    :root { --header-h: 30px;   --panel-h-default: 150px; --panel-h: var(--panel-h-default);}
  
    :root{
      --ide-w: 50px;     /* VSCode 사이드바 폭 */
      --panel-w: 360px;  /* 확장 패널 폭 */
      --gut: 2.5vw;      /* 양옆 여백 비율 */
    }
  
    @media (max-width: 768px){
      :root {--panel-h-default: 220px; --panel-h: var(--panel-h-default);}
    }
  
    /* 컨테이너 */
    #mini-lecture{
      position: fixed;
      top: var(--header-h, 0);
      z-index: 40;
      left:  calc(var(--ide-w) + var(--gut));
      right: var(--gut);
      height: var(--panel-h);
      min-height: 20px;
      display: grid;
      grid-template-rows: minmax(0, 1fr) 20px;
      overflow: hidden;
  
      /* 엄청 쎈 멀티 레이어 섀도우 */
      box-shadow:
        0 60px 140px -30px rgba(0,0,0,.70),
        0 30px  70px -20px rgba(0,0,0,.60),
        0 14px  30px -10px rgba(0,0,0,.50),
        0  2px   8px  -2px rgba(0,0,0,.45),
        0  0     0   1px  rgba(0,0,0,.28);
    }
  
    /* 열림 상태: (ide 50px + 패널 360px) 제외한 나머지의 2.5% 여백 */
    body.panel-open #mini-lecture{
      left:  calc(var(--ide-w) + var(--panel-w) + (100vw - (var(--ide-w) + var(--panel-w))) * 0.025);
      right: calc((100vw - (var(--ide-w) + var(--panel-w))) * 0.025);
    }
  
    @media (max-width: 768px){
      :root{
        --ide-w: 0px;     /* 모바일에선 좌측 IDE 없음 */
        --panel-w: 0px;   /* 확장 패널도 좌측이 아니라 상단이라 0 취급 */
      }
  
      body,
      body.panel-open{ padding-left: 0 !important; }
  
      /* ✅ fixed 패널은 모바일에서 left/right만 쓰고 width/margin 제거 */
      #mini-lecture{
        top: 77px;
        left: 15px !important;
        right: 15px !important;
        width: auto !important;
        margin: 0 !important;
        padding-left: 0 !important;
      }
    }
  
    /* 패널 내용(자체 스크롤 + 체이닝 차단) */
    #mini-lecture .panel-card{
      background: #2a5d06;
      color: #eee;
      border: 1px solid #333;
      border-bottom: 0;
      box-shadow: 0 10px 30px rgba(0,0,0,.4);
      padding: 16px;
      overflow: auto;
      min-height: 0;                  /* ✅ 0까지 허용 (완전 접힘) */
      overscroll-behavior: contain;   /* ✅ 배경으로 스크롤 체이닝 차단 */
      -webkit-overflow-scrolling: touch;
    }
  
    #mini-lecture .connector{
      display: inline-block;
      margin-bottom: 8px;
      background: #000;
      color: #fff;
      border: 1px solid #333;
      border-bottom: 0;
      border-radius: 10px;
      padding: 4px 10px;
      font-size: 12px;
      font-weight: 700;
    }
  
    .chip{
      display: inline-block;
      margin-top: 8px;
      margin-right: 6px;
      background: #1a1a1a;
      color: #ddd;
      border: 1px solid #333;
      padding: 6px 10px;
      font-size: 12px;
    }
  
    /* 리사이저 */
    #panel-resizer{
      grid-row: 2;
      height: 16px;
      border: 0;
      cursor: ns-resize;
      background: #313131;
      transition: background .15s ease, box-shadow .15s ease;
      position: relative;
      touch-action: none;
    }
    #panel-resizer::before{
      content: "";
      position: absolute;
      left: 50%; top: 50%;
      transform: translate(-50%, -50%);
      width: 70px; height: 4px; border-radius: 999px;
      background: linear-gradient(90deg, #777, #aaa, #777);
      opacity: .9;
    }
    #panel-resizer::after{
      content: "";
      position: absolute;
      left: 50%; top: 50%;
      transform: translate(-50%, -50%);
      width: 70px; height: 20px;
      pointer-events: none;
      color: #666;
      opacity: .55;
      background: radial-gradient(currentColor 1px, transparent 2px) 0 50%/10px 8px repeat-x;
    }
    #panel-resizer:hover,
    #panel-resizer:focus-visible,
    body.resizing #panel-resizer{
      background: #181818;
      box-shadow: inset 0 0 0 1px #444, 0 0 0 2px rgba(255,255,255,.05);
    }
    #panel-resizer:hover::before,
    #panel-resizer:focus-visible::before{
      transform: translate(-50%, -50%) scaleX(1.08);
    }
  
    @media (max-width: 640px){
      #mini-lecture{
        height: var(--panel-h);
        min-height: 20px;
      }
    }
  
    body.resizing{ user-select: none; }
  
    /* ⛔️ 전역 잠금( lock-scroll ) 규칙 제거함 */
  </style>
  
  <div id="mini-lecture" role="region" aria-label="미니 강의 패널">
    <div class="panel-card">
      <span class="connector">Welcome</span>
      <% if (panelData && panelData.html) { %>
        <div class="panel-body"><%- panelData.html %></div>
      <% } else { %>
        <h3 style="margin:0 0 6px 0"><%= panelData.title %></h3>
        <p style="margin:0;opacity:.9"><%= panelData.body %></p>
      <% } %>
    </div>
  
    <div id="panel-resizer"
         role="separator"
         aria-orientation="horizontal"
         aria-label="패널 높이 조절"
         aria-valuemin="20"   aria-valuemax="800"
         aria-valuenow="500"
         tabindex="0"
         title="드래그하거나 ↑/↓ 키로 높이 조절"></div>
  </div>
  
  <script>
    /* ===== 패널 리사이저 ===== */
    (function(){
      const root = document.documentElement;
      const resizer = document.getElementById('panel-resizer');
      if(!resizer) return;
  
      const MIN = parseInt(resizer.getAttribute('aria-valuemin'), 10) || 20;
      const MAX = parseInt(resizer.getAttribute('aria-valuemax'), 10) || 800;
      const STEP = 16, BIG = 64;
      const VAR = '--panel-h';
      const KEY = 'miniPanelH_session';
  
      const isHomePath = (p) => p === '/' || /^\/[a-z]{2}\/?$/.test(p);
  
      const getDefaultPx = () => {
        const v = getComputedStyle(root).getPropertyValue('--panel-h-default').trim() || '500px';
        return parseInt(v, 10) || 500;
      };
  
      const clamp = v => Math.max(MIN, Math.min(MAX, v|0));
  
      const setH = (h, save=false) => {
        const n = clamp(parseInt(h, 10));
        root.style.setProperty(VAR, n + 'px');
        resizer.setAttribute('aria-valuenow', String(n));
        if (save) sessionStorage.setItem(KEY, n + 'px');
      };
  
      (function init(){
        if (isHomePath(location.pathname)) {
          sessionStorage.removeItem(KEY);
          root.style.removeProperty(VAR);
          resizer.setAttribute('aria-valuenow', String(getDefaultPx()));
        } else {
          const saved = sessionStorage.getItem(KEY);
          if (saved) setH(saved, false);
          else root.style.removeProperty(VAR);
        }
      })();
  
      resizer.setAttribute('aria-valuemin', String(MIN));
      resizer.setAttribute('aria-valuemax', String(MAX));
  
      let startY = 0, startH = 0, dragging = false;
  
      function move(e){
        if(!dragging) return;
        const y = (e.touches ? e.touches[0].clientY : e.clientY);
        setH(startH + (y - startY));
        e.preventDefault?.();
      }
      function up(){
        if(!dragging) return;
        dragging = false;
        document.body.classList.remove('resizing');
        const cur = parseInt(getComputedStyle(root).getPropertyValue(VAR),10) || getDefaultPx();
        setH(cur, true);
        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', up);
        window.removeEventListener('touchmove', move);
        window.removeEventListener('touchend', up);
      }
      function down(e){
        dragging = true;
        document.body.classList.add('resizing');
        startY = (e.touches ? e.touches[0].clientY : e.clientY);
        startH = parseInt(getComputedStyle(root).getPropertyValue(VAR),10) || getDefaultPx();
        window.addEventListener('mousemove', move);
        window.addEventListener('mouseup', up);
        window.addEventListener('touchmove', move, { passive:false });
        window.addEventListener('touchend', up);
        e.preventDefault?.();
      }
  
      resizer.addEventListener('mousedown', down);
      resizer.addEventListener('touchstart', down, { passive:false });
  
      resizer.addEventListener('keydown', (e)=>{
        const cur = parseInt(getComputedStyle(root).getPropertyValue(VAR),10) || getDefaultPx();
        if(e.key === 'ArrowUp'){    setH(cur - (e.shiftKey ? BIG : STEP), true); e.preventDefault(); }
        else if(e.key === 'ArrowDown'){ setH(cur + (e.shiftKey ? BIG : STEP), true); e.preventDefault(); }
        else if(e.key === 'Home'){  setH(MIN, true); e.preventDefault(); }
        else if(e.key === 'End'){   setH(MAX, true); e.preventDefault(); }
        else if(e.key === 'Enter' || e.key === ' '){ setH(getDefaultPx(), true); e.preventDefault(); }
      });
    })();
  </script>
  
  <script>
    /* ===== 현재 활성 서브메뉴 → 패널 상단 라벨 반영 ===== */
    document.addEventListener('DOMContentLoaded', () => {
      const activeMenu = document.querySelector('.submenu a.active');
      const connector = document.querySelector('#mini-lecture .connector');
      if (activeMenu && connector) connector.textContent = activeMenu.textContent.trim();
    });
  </script>
  
  <script>
    /* ===== 패널 내부에서만 스크롤 캡처 (배경은 항상 자유) ===== */
    (function(){
      function bindScrollTrap(){
        const panel = document.getElementById('mini-lecture');
        let scroller = panel?.querySelector('.panel-card');
        if (!panel || !scroller) return;
  
        /* wheel: 패널 내에서만 처리, 바운스 시 preventDefault */
        const onWheel = (e) => {
          e.stopPropagation(); // 배경으로 버블 방지
          const atTop = scroller.scrollTop <= 0 && e.deltaY < 0;
          const atBottom = scroller.scrollTop + scroller.clientHeight >= scroller.scrollHeight && e.deltaY > 0;
          if (atTop || atBottom) e.preventDefault(); // 바운스 방지(사파리 등)
        };
  
        /* touch: 패널 내 바운스만 방지 */
        let startY = 0;
        const onTouchStart = (e) => { startY = e.touches[0].clientY; };
        const onTouchMove  = (e) => {
          const curY = e.touches[0].clientY;
          const delta = startY - curY;
          const atTop = scroller.scrollTop <= 0 && delta < 0;
          const atBottom = scroller.scrollTop + scroller.clientHeight >= scroller.scrollHeight && delta > 0;
          if (atTop || atBottom) e.preventDefault(); // 배경 바운스 방지
          e.stopPropagation(); // 배경 스크롤로 전달 금지
        };
  
        scroller.addEventListener('wheel', onWheel, { passive: false });
        scroller.addEventListener('touchstart', onTouchStart, { passive: true });
        scroller.addEventListener('touchmove', onTouchMove, { passive: false });
  
        /* 패널 내용이 동적으로 바뀌면 다시 바인딩 */
        const mo = new MutationObserver(() => {
          const cur = panel.querySelector('.panel-card');
          if (cur !== scroller) {
            scroller.removeEventListener('wheel', onWheel);
            scroller.removeEventListener('touchstart', onTouchStart);
            scroller.removeEventListener('touchmove', onTouchMove);
            scroller = cur;
            if (scroller) {
              scroller.addEventListener('wheel', onWheel, { passive: false });
              scroller.addEventListener('touchstart', onTouchStart, { passive: true });
              scroller.addEventListener('touchmove', onTouchMove, { passive: false });
            }
          }
        });
        mo.observe(panel, { childList: true, subtree: true });
      }
  
      document.addEventListener('DOMContentLoaded', bindScrollTrap);
  
      /* SPA 네비게이션 후 DOM 교체 대비 */
      const hookNav = () => {
        const reb = () => requestAnimationFrame(bindScrollTrap);
        const _ps = history.pushState, _rs = history.replaceState;
        history.pushState = function(){ const r=_ps.apply(this, arguments); reb(); return r; };
        history.replaceState = function(){ const r=_rs.apply(this, arguments); reb(); return r; };
        window.addEventListener('popstate', reb);
        document.addEventListener('click', (e)=>{
          const a = e.target.closest('a');
          if (a && (a.matches('[data-panel-link], [data-panel], nav a, .submenu a'))) setTimeout(()=>reb(),0);
        }, true);
      };
      hookNav();
    })();
  </script>
  