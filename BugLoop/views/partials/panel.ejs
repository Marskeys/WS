<style>
    :root { --header-h: 30px; --panel-h: 500px; }
  
    /* 컨테이너 */
    #mini-lecture{
      position: sticky;
      top: var(--header-h);
      z-index: 40;
      margin-left: 0px;
      height: var(--panel-h);
      min-height: 20px; /* ✅ 전체 최소 높이를 리사이저 높이와 동일하게 */
      display: grid;
      grid-template-rows: minmax(0, 1fr) 20px; /* ✅ 리사이저 20px */
      overflow: hidden;
      padding-left: 50px;
    }
  
    @media (max-width: 768px){
      #mini-lecture{
        top: 77px;
        margin-bottom: 50px;
        padding-left: 0;
        margin-right: 15px;
        margin-left: 15px;
      }
    }
  
    /* 패널 내용 */
    #mini-lecture .panel-card{
      background: #2a5d06;
      color: #eee;
      border: 1px solid #333;
      border-bottom: 0;
      box-shadow: 0 10px 30px rgba(0,0,0,.4);
      padding: 16px;
      overflow: auto;
      min-height: 0; /* ✅ 0까지 허용 (완전 접힘) */
    }
  
    #mini-lecture .connector{
      display: inline-block;
      margin-bottom: 8px;
      background: #000;
      color: #fff;
      border: 1px solid #333;
      border-bottom: 0;
      border-radius: 10px;
      padding: 4px 10px;
      font-size: 12px;
      font-weight: 700;
    }
  
    .chip{
      display: inline-block;
      margin-top: 8px;
      margin-right: 6px;
      background: #1a1a1a;
      color: #ddd;
      border: 1px solid #333;
      padding: 6px 10px;
      font-size: 12px;
    }
  
    /* 리사이저 */
    #panel-resizer{
      grid-row: 2;
      height: 20px; /* ✅ 리사이저 자체 20px */
      border: 0;
      cursor: ns-resize;
      background: #121212;
      transition: background .15s ease, box-shadow .15s ease;
      position: relative;
      touch-action: none;
    }
    #panel-resizer::before{
      content: "";
      position: absolute;
      left: 50%; top: 50%;
      transform: translate(-50%, -50%);
      width: 70px; height: 4px; border-radius: 999px; /* ✅ 20px에 맞게 높이 조정 */
      background: linear-gradient(90deg, #777, #aaa, #777);
      opacity: .9;
    }
    #panel-resizer::after{
      content: "";
      position: absolute;
      left: 50%; top: 50%;
      transform: translate(-50%, -50%);
      width: 70px; height: 20px; /* ✅ 핸들 패턴 높이도 20px로 조정 */
      pointer-events: none;
      color: #666;
      opacity: .55;
      background: radial-gradient(currentColor 1px, transparent 2px) 0 50%/10px 8px repeat-x;
    }
    #panel-resizer:hover,
    #panel-resizer:focus-visible,
    body.resizing #panel-resizer{
      background: #181818;
      box-shadow: inset 0 0 0 1px #444, 0 0 0 2px rgba(255,255,255,.05);
    }
    #panel-resizer:hover::before,
    #panel-resizer:focus-visible::before{
      transform: translate(-50%, -50%) scaleX(1.08);
    }
  
    /* 모바일 동일 보장 */
    @media (max-width: 640px){
      #mini-lecture{
        height: var(--panel-h);
        min-height: 20px; /* ✅ 모바일도 20px까지 접힘 */
      }
    }
  
    body.resizing{ user-select: none; }
  </style>
  
  <div id="mini-lecture" role="region" aria-label="미니 강의 패널">
    <div class="panel-card">
      <span class="connector">Welcome</span>
      <% if (panelData && panelData.html) { %>
        <div class="panel-body"><%- panelData.html %></div>
      <% } else { %>
        <h3 style="margin:0 0 6px 0"><%= panelData.title %></h3>
        <p style="margin:0;opacity:.9"><%= panelData.body %></p>
      <% } %>
    </div>
  
    <div id="panel-resizer"
         role="separator"
         aria-orientation="horizontal"
         aria-label="패널 높이 조절"
         aria-valuemin="20"   aria-valuemax="800"
         aria-valuenow="500"
         tabindex="0"
         title="드래그하거나 ↑/↓ 키로 높이 조절"></div>
  </div>
  
  <script>
  (function(){
    const root = document.documentElement;
    const resizer = document.getElementById('panel-resizer');
    if(!resizer) return;
  
    const MIN = 20, MAX = 800, STEP = 16, BIG = 64;
    const KEY = 'miniPanelH';
  
    const clamp = v => Math.max(MIN, Math.min(MAX, v));
    const setH = (h, save=false) => {
      h = clamp(h);
      root.style.setProperty('--panel-h', h + 'px');
      resizer.setAttribute('aria-valuenow', String(h));
      if(save) localStorage.setItem(KEY, String(h));
    };
  
    // 초기값: 저장값 있으면 가져오되 즉시 클램프
    const saved = parseInt(localStorage.getItem(KEY), 10);
    const start = Number.isNaN(saved) ? 500 : saved;
    setH(start, false);
  
    // ARIA 범위 동기화
    resizer.setAttribute('aria-valuemin', String(MIN));
    resizer.setAttribute('aria-valuemax', String(MAX));
  
    let startY = 0, startH = 0, dragging = false;
  
    function move(e){
      if(!dragging) return;
      const y = (e.touches ? e.touches[0].clientY : e.clientY);
      setH(startH + (y - startY));
      e.preventDefault?.();
    }
    function up(){
      if(!dragging) return;
      dragging = false;
      document.body.classList.remove('resizing');
      const h = parseInt(getComputedStyle(root).getPropertyValue('--panel-h'),10);
      setH(h, true);
      window.removeEventListener('mousemove', move);
      window.removeEventListener('mouseup', up);
      window.removeEventListener('touchmove', move);
      window.removeEventListener('touchend', up);
    }
    function down(e){
      dragging = true;
      document.body.classList.add('resizing');
      startY = (e.touches ? e.touches[0].clientY : e.clientY);
      startH = parseInt(getComputedStyle(root).getPropertyValue('--panel-h'),10) || 500;
      window.addEventListener('mousemove', move);
      window.addEventListener('mouseup', up);
      window.addEventListener('touchmove', move, { passive:false });
      window.addEventListener('touchend', up);
      e.preventDefault?.();
    }
  
    resizer.addEventListener('mousedown', down);
    resizer.addEventListener('touchstart', down, { passive:false });
  
    resizer.addEventListener('keydown', (e)=>{
      const cur = parseInt(getComputedStyle(root).getPropertyValue('--panel-h'),10) || 500;
      if(e.key === 'ArrowUp'){ setH(cur - (e.shiftKey ? BIG : STEP), true); e.preventDefault(); }
      else if(e.key === 'ArrowDown'){ setH(cur + (e.shiftKey ? BIG : STEP), true); e.preventDefault(); }
      else if(e.key === 'Home'){ setH(MIN, true); e.preventDefault(); }
      else if(e.key === 'End'){ setH(MAX, true); e.preventDefault(); }
      else if(e.key === 'Enter' || e.key === ' '){ setH(500, true); e.preventDefault(); }
    });
  })();
  </script>
  
  <script>
  document.addEventListener('DOMContentLoaded', () => {
    const activeMenu = document.querySelector('.submenu a.active');
    const connector = document.querySelector('#mini-lecture .connector');
    if (activeMenu && connector) {
      connector.textContent = activeMenu.textContent.trim();
    }
  });
  </script>