<style>
/* ====== 기존 서브메뉴 간격/정렬 ====== */
.header-menu .submenu li a,
.header-menu .submenu li span {
  padding-top: 8px;
  padding-bottom: 8px;
  display: block;
  font-size: 14px;
  vertical-align: middle;
}

/* YouTube 로고 수직 중앙 정렬 */
.header-menu .main-menu-container {
  display: flex;
  align-items: center;
  height: 100%;
}

/* ====== 사이드바 언어/테마 영역: "동작 우선" 기본 스타일 (다크 모드 기준) ====== */
.sidebar-lang-theme {
  margin-top: 12px;
  padding: 10px 8px;
  display: flex;
  flex-direction: column; /* 데스크톱 기본: 세로 배열 */
  align-items: center;
  gap: 10px;
}

.sidebar-lang-theme .lang-btn {
  background: none;
  border: none;
  color: var(--ink-1, #fff); /* Dark Mode */
  cursor: pointer;
  font-size: 14px;
  display: inline-flex;
  align-items: center;
  gap: 6px;
  border-radius: 10px;
  padding: 6px 10px;
}

/* 🚫 언어 선택 버튼 포커스(클릭/탭) 테두리 제거 */
.sidebar-lang-theme .lang-btn:focus {
  outline: none;
}
/* 접근성 강화를 위해 focus-visible은 유지하는 것을 권장하지만, 요청에 따라 focus는 제거 */
.sidebar-lang-theme .lang-btn:focus-visible {
  outline: 2px solid var(--accent, #6cf);
  outline-offset: 2px;
}


/* 언어 메뉴 (기본: 다크 모드) */
.lang-menu {
  position: absolute;
  inset: auto auto auto auto;
  list-style: none;
  margin: 6px 0 0 0;
  padding: 6px 0;
  min-width: 160px;
  background: var(--panel-1, #181a1f); /* Dark Mode */
  border: 1px solid var(--ink-3, rgba(255,255,255,0.25)); /* Dark Mode */
  border-radius: 10px;
  box-shadow: 0 12px 32px rgba(0,0,0,0.35);
  display: none;
  z-index: 2147483646;
}

.lang-menu[aria-hidden="false"] {
  display: block;
}

.lang-menu li {
  white-space: nowrap;
}

.lang-menu a.lang-option {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  color: var(--ink-1, #fff); /* Dark Mode */
  text-decoration: none;
  font-size: 14px;
}

.lang-menu a.lang-option:hover,
.lang-menu a.lang-option:focus {
  background: var(--panel-2, #22262e); /* Dark Mode */
  outline: none;
}

.lang-menu a.lang-option.active-lang {
  font-weight: 700;
}

/* 💡 라이트 모드일 때 언어 메뉴의 스타일 재정의 (html:not(.dark) 사용) */
html:not(.dark) .lang-menu {
  background: var(--panel-1, #fff); 
  border: 1px solid var(--ink-3, rgba(0,0,0,0.15));
  box-shadow: 0 12px 32px rgba(0,0,0,0.15); 
}

html:not(.dark) .lang-menu a.lang-option {
  color: var(--ink-1, #181a1f); 
}

html:not(.dark) .lang-menu a.lang-option:hover,
html:not(.dark) .lang-menu a.lang-option:focus {
  background: var(--panel-2, #f0f0f0); 
}


/* ✅ 수정: 새 라이트/다크모드 토글 버튼 스타일 복원 */
.theme-toggle-btn {
  /* 배경색 및 둥근 모양 복원 */
  background: var(--vscode-sideBar-background, #333); /* 사이드바 배경색과 동일 */
  border: 1px solid var(--vscode-sideBar-border, #444); /* 경계선 추가 */
  color: var(--ink-1, #fff); /* Dark Mode 기본 색상: 흰색 */
  cursor: pointer;
  width: 38px;
  height: 38px;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%; /* 둥근 모양 복원 */
  transition: all 0.2s ease;
  font-size: 18px;
  line-height: 1;
}

/* 💡 라이트 모드일 때 토글 버튼 스타일 조정 */
html:not(.dark) .theme-toggle-btn {
  background: var(--vscode-sideBar-background, #f3f3f3); /* 라이트 모드 사이드바 배경색 */
  border: 1px solid var(--vscode-sideBar-border, #ccc); /* 라이트 모드 경계선 */
  color: var(--ink-1, #333); /* 라이트 모드 아이콘 색상: 검은색 */
}


/* 🚫 테마 토글 버튼 포커스(클릭/탭) 테두리 제거 */
.theme-toggle-btn:focus {
  outline: none;
}
/* 접근성 강화를 위해 focus-visible은 유지하는 것을 권장하지만, 요청에 따라 focus는 제거 */
.theme-toggle-btn:focus-visible {
  outline: 2px solid var(--accent, #6cf);
  outline-offset: 2px;
}

/* 포털 배치용 클래스(시각적 디버깅 금지): .lang-menu--portal 로 body에 옮겨짐 */
.lang-menu.lang-menu--portal {
  position: fixed;
  z-index: 2147483646;
}

/* 접근성: 키보드 이동 시 포커스 링 */
.lang-menu a.lang-option:focus-visible {
  outline: 2px solid var(--accent, #6cf);
  outline-offset: -2px;
}

/* ---------------------------------------------------- */
/* 🚀 최종 수정: 모바일 하단 가로 탭 바 구현 (768px 이하) */
/* ---------------------------------------------------- */
@media (max-width: 768px) {
  /* 1. 사이드바(Tabs Container) 자체를 가로 배열의 부모로 변경 */
  .vscode-sidebar {
    display: flex;
    flex-direction: row; /* 모든 요소 가로 배열 */
    width: 100%;
    /* ✅ 수정: 가로 스크롤 가능하게 설정 */
    overflow-x: auto; 
    
    position: fixed;
    bottom: 0;
    left: 0;
    z-index: 100; 
    height: 60px; /* 탭 바 높이 설정 */
    padding: 0;
    border-top: 1px solid var(--vscode-sideBar-border, #444); /* 탭 바 상단 구분선 */
    background: var(--vscode-sideBar-background, #333); /* 탭 바 배경색 */
  }

  /* ✅ 수정: 스크롤 바 숨기기 (Webkit 기반 브라우저용) */
  .vscode-sidebar::-webkit-scrollbar {
    display: none;
  }
  /* IE, Edge, Firefox의 스크롤 바 숨김 처리 */
  .vscode-sidebar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  /* 2. 기존 사이드바 전용 요소들 조정 */
  .vscode-sidebar .logo {
    display: none !important; /* 모바일 하단 탭 바에서는 이 요소들을 숨김 */
  }
  
  /* ✅ 수정: 사이드바 토글 버튼 (가로 스크롤에 포함, 축소 방지, 최소 너비) */
  .vscode-sidebar .toggle-extension {
    display: flex !important; 
    flex-grow: 1; 
    flex-basis: 0;
    flex-shrink: 0; /* 축소 방지 */
    min-width: 60px; /* 최소 너비 지정 */
    height: 100%;
    width: auto;
    justify-content: center;
    align-items: center;
    padding: 0;
    border-radius: 0;
  }
  
  /* 3. 모든 탭 버튼을 균등하게 배열 */
  /* 일반 탭 버튼 (.sidebar-icon) */
  .vscode-sidebar > a.sidebar-icon:not(.toggle-extension):not(.logo) {
    flex-grow: 1; /* 가로 공간 균등 분배 */
    flex-basis: 0;
    flex-shrink: 0; /* 축소 방지 */
    min-width: 60px; /* 최소 너비 지정 */
    height: 100%;
    width: auto;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
    border-radius: 0;
  }
  
  /* 4. 언어/테마 영역을 탭처럼 통합 */
  .sidebar-lang-theme {
    flex-direction: row;
    flex-grow: 2; /* 두 개의 탭 공간을 차지하도록 설정 (언어 + 테마) */
    flex-basis: 0;
    flex-shrink: 0; /* 축소 방지 */
    min-width: 120px; /* 최소 너비 지정 (60px * 2) */
    height: 100%;
    margin: 0; 
    padding: 0;
    display: flex; 
    border-top: none;
    align-items: center; 
    justify-content: center; 
  }

  /* 언어 드롭다운을 탭처럼 균등 분할 */
  .sidebar-lang-theme .language-dropdown {
    flex-grow: 1; 
    flex-basis: 0;
    height: 100%; 
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* ✅ 수정: 다크 모드 버튼은 탭 바의 중앙에 배치되고 둥근 모양 유지 */
  .sidebar-lang-theme .theme-toggle-btn {
    flex-grow: 0; /* 공간을 차지하지 않음 */
    flex-basis: auto;
    width: 38px; /* 고정 크기 유지 */
    height: 38px;
    border-radius: 50%; /* 둥근 모양 유지 */
    margin: 0 5px; /* 양쪽에 약간의 마진 추가 */
    background: var(--vscode-sideBar-background, #333); 
    border: 1px solid var(--vscode-sideBar-border, #444);
  }

  /* 언어 버튼 자체 스타일 조정 */
  .sidebar-lang-theme .lang-btn {
    width: 100%;
    height: 100%;
    border-radius: 0; 
    justify-content: center; 
    align-items: center;
    padding: 0; 
    background: none;
    border: none;
  }

  /* 언어 버튼만 오른쪽 경계선 추가 */
  .sidebar-lang-theme .language-dropdown {
    border-right: 1px solid var(--vscode-sideBar-background, #252526);
  }
}
</style>
<div class="full-header-container" style="z-index:20000;">
  <div class="header-top">
    <div class="top-controls">
      <div class="left-controls">
        <%
          const pathWithoutLang = currentPath.replace(/^\/(ko|en|fr|zh|ja|es)/, '');
          const showLogo = ['/signup', '/editor', '/login', '/write'].includes(pathWithoutLang) ||
                           pathWithoutLang.startsWith('/post') ||
                           pathWithoutLang.startsWith('/edit');
        %>
        <% if (showLogo) { %>
          <a href="/<%= lang %>/" class="logo-link" data-panel-link aria-label="BugLoop 홈"></a>
        <% } %>
      </div>

      <nav class="header-menu" aria-label="주 메뉴">
        <ul class="main-menu-container">
          <a href="https://www.youtube.com" target="_blank" aria-label="YouTube 바로가기">
            <img src="/assets/images/youtube.png" alt="YouTube"
                 style="height:28px; width:auto; vertical-align:middle; margin-left:3px; margin-right:3px;">
          </a>

          <li class="menu-item-wrapper">
            <span class="menu-label">리뷰</span>
            <ul class="submenu">
              <li><a href="/<%= lang %>/review/book" data-panel-link>북스 팔마 2 프로</a></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (1)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (2)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (3)</span></li>
            </ul>
          </li>

          <li class="menu-item-wrapper">
            <span class="menu-label">오디오북</span>
            <ul class="submenu">
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">귀여운 음향학</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">피아노 치는 프로듀서: 신비한 반주법</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">미완성 고통</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">계산의 온기</span></li>
            </ul>
          </li>

          <li class="menu-item-wrapper">
            <span class="menu-label">음악 콘텐츠</span>
            <ul class="submenu">
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (1)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (2)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (3)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (4)</span></li>
            </ul>
          </li>

          <li class="menu-item-wrapper">
            <span class="menu-label">두뇌 게임</span>
            <ul class="submenu">
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (1)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (2)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (3)</span></li>
            </ul>
          </li>
        </ul>
      </nav>

      <div class="right-controls" id="right-controls" hidden></div>
    </div>
  </div>

  <aside class="side-panel main-panel-only">
    <div class="sidebar-wrapper">
      <nav class="vscode-sidebar" aria-label="패널 사이드바" role="tablist">
        <a href="#" class="sidebar-icon toggle-extension blink-highlight" title="패널 열기/닫기" aria-label="패널 열기/닫기">
          <i class="fas fa-chevron-left" aria-hidden="true"></i>
        </a>

        <a href="/<%= lang %>/" class="sidebar-icon logo" data-tab="home" title="BugLoop 홈" aria-label="BugLoop 홈" aria-selected="false">
          <img src="/assets/images/BugLoop.png" alt="BugLoop">
        </a>
        <a href="/<%= lang %>/" class="sidebar-icon" data-tab="home" title="홈" aria-selected="false">
          <i class="fas fa-home" aria-hidden="true"></i>
        </a>

        <a href="#" class="sidebar-icon" data-tab="profile" title="프로필" aria-selected="false" role="tab">
          <i class="fas fa-user" aria-hidden="true"></i>
        </a>
        <a href="#" class="sidebar-icon" data-tab="search" title="검색" aria-selected="false" role="tab">
          <i class="fas fa-search" aria-hidden="true"></i>
        </a>

        <% if (user) { %>
          <% if (Number(user.is_admin) === 1) { %>
            <a href="/<%= lang %>/write" class="sidebar-icon" data-tab="write" title="글쓰기" aria-selected="false">
              <i class="fas fa-pen" aria-hidden="true"></i>
            </a>
          <% } %>
        <% } %>

        <div class="sidebar-lang-theme">
          <div class="language-dropdown">
            <button id="langToggleSidebar" class="lang-btn" aria-haspopup="menu" aria-expanded="false" aria-controls="langMenuSidebar">
              <%
                let flagCode = lang;
                switch(lang) {
                  case 'ko': flagCode = 'kr'; break;
                  case 'en': flagCode = 'gb'; break;
                  case 'zh': flagCode = 'cn'; break;
                  case 'ja': flagCode = 'jp'; break;
                  case 'fr': flagCode = 'fr'; break;
                  case 'es': flagCode = 'es'; break;
                  default: flagCode = 'kr';
                }
              %>
              <span class="fi fi-<%= flagCode %>"></span>
            </button>

            <ul id="langMenuSidebar" class="lang-menu" role="menu" aria-hidden="true">
              <%
                const currentPathWithoutLang = currentPath.replace(/^\/(ko|en|fr|zh|ja|es)/, '');
                const langNames = { ko:'한국어', en:'English', fr:'Français', zh:'简体中文', ja:'日本語', es:'Español' };
              %>
              <% (supportedLangs || ['ko','en','fr','zh','ja','es']).forEach(function(langCode){ %>
                <li role="none">
                  <a href="/<%= langCode %><%= currentPathWithoutLang %>"
                     class="lang-option <%= langCode === lang ? 'active-lang' : '' %>"
                     role="menuitem" tabindex="-1">
                    <span class="fi fi-<%= (langCode==='ko'?'kr':(langCode==='en'?'gb':(langCode==='zh'?'cn':(langCode==='ja'?'jp':langCode)))) %>"></span>
                    <%= langNames[langCode] || langCode %>
                  </a>
                </li>
              <% }); %>
            </ul>
          </div>
          
          <button id="theme-toggle-sidebar" class="theme-toggle-btn" aria-label="테마 전환: 라이트/다크 모드" title="테마 전환">
            <i class="fas fa-moon" aria-hidden="true"></i>
          </button>
        </div>
        </nav>

      <div class="sidebar-extension-panel">
        <div class="panel-logo">
          <img src="/assets/images/BugLoop.png" alt="BugLoop" loading="lazy" />
        </div>
        <div class="tab-container"></div>

        <div class="tab-content" data-tab="profile" style="display: none;">
          <%- include('./profile', { locale }) %>
        </div>

        <% if (typeof posts !== 'undefined') { %>
          <div class="tab-content" data-tab="search" style="display: none;">
            <section class="search-tab">
              <div id="sidebar-table-template" data-lang="<%= lang %>">
                <%- include('table') %>
              </div>
            </section>
          </div>
        <% } %>

        <div class="panel-footer">
          <% if (user) { %>
            <div class="greeting" style="text-align:center; margin-top:10px; font-weight:bold;">
              <%= user.nickname %>님, 안녕하세요!
            </div>
          <% } %>

          <% if (currentPath !== '/signup' && currentPath !== '/login') { %>
            <div class="auth-buttons">
              <% if (user) { %>
                <a href="/<%= lang %>/logout" class="auth-btn logout">로그아웃</a>
              <% } else { %>
                <a class="auth-btn signup" onclick="return false;" style="pointer-events:none; opacity:.5; cursor:not-allowed;">회원가입</a>
                <button class="auth-btn login" id="login" type="button">로그인</button>
              <% } %>
            </div>
          <% } %>

          <div id="login-form-container" class="login-form-container hidden">
            <form id="login-form" method="POST" action="/login">
              <input type="text" name="id" placeholder="아이디" required />
              <input type="password" name="password" placeholder="비밀번호" required />
              <button type="submit">로그인</button>
            </form>
          </div>

          <div class="real-footer"><small>© 2025 Bug Loop</small></div>
        </div>
      </div>
    </div>
  </aside>
</div>

<script>
/* ====== (스크립트 시작) ====== */
/* ====== 서브메뉴 활성화 동기 ====== */
(function(){
  var path = location.pathname.replace(/\/$/, '');
  document.querySelectorAll('.submenu a').forEach(function(a){
    var href = (a.getAttribute('href') || '').replace(/\/$/, '');
    if (href === path) {
      a.classList.add('active');
      var label = a.closest('.menu-item-wrapper')?.querySelector('.menu-label');
      if (label) label.classList.add('active-label');
    }
  });
})();
</script>

<script>
/* ====== 홈 아이콘 active 동기 ====== */
(() => {
  const homeEls = document.querySelectorAll('.vscode-sidebar a.sidebar-icon[data-tab="home"]:not(.toggle-extension)');
  const stripLang = (p) => {
    const path = (p || location.pathname).replace(/[#?].*$/, '');
    const noLang = path.replace(/^\/(ko|en|fr|zh|ja|es)(?:\/|$)/, '');
    return noLang === '' ? '/' : noLang.replace(/\/$/, '') || '/';
  };
  const isHomePath = (p) => stripLang(p) === '/';
  const setHomeActive = (flag) => {
    homeEls.forEach(el => {
      el.classList.toggle('active', flag);
      el.querySelector('i')?.classList.toggle('active', flag);
    });
  };
  const sync = () => setHomeActive(isHomePath(location.pathname));

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', sync, { once: true });
  } else {
    sync();
  }

  document.addEventListener('click', (e) => {
    const a = e.target.closest('a[data-panel-link]');
    if (!a) return;
    const pn = new URL(a.getAttribute('href') || '/', location.origin).pathname;
    setHomeActive(isHomePath(pn));
  });

  window.addEventListener('popstate', sync);
  ['pushState','replaceState'].forEach(fn => {
    const orig = history[fn];
    history[fn] = function(...args){
      const ret = orig.apply(this, args);
      window.dispatchEvent(new Event('panel:navigated'));
      return ret;
    };
  });
  window.addEventListener('panel:navigated', sync);
})();
</script>

<script>
/* ====== 하드웨어 힌트(기존 코드 유지) ====== */
(function(){
  const bubble = document.getElementById('hardware-hint');
  const label  = document.getElementById('hardware-label');
  if (!bubble || !label) return;

  const KEY = 'bugloop.hideHardwareHint';
  const isShown = () => bubble.style.display !== 'none' && bubble.getAttribute('aria-hidden') !== 'true';
  function show(){ bubble.style.display = 'inline-flex'; bubble.setAttribute('aria-hidden','false'); }
  function hide(){ localStorage.setItem(KEY,'1'); bubble.style.display = 'none'; bubble.setAttribute('aria-hidden','true'); label?.focus?.(); }

  if (bubble.parentNode !== document.body) { bubble.style.position = 'fixed'; bubble.style.left = '-9999px'; bubble.style.top = '-9999px'; document.body.appendChild(bubble); }
  bubble.style.pointerEvents = 'none';
  const closeBtn = bubble.querySelector('.hint-close'); if (closeBtn) closeBtn.style.pointerEvents = 'auto';

  function placeBubble(){
    const r = label.getBoundingClientRect();
    bubble.style.left = (Math.round(r.left + 20)) + 'px';
    bubble.style.top  = (Math.round(r.bottom + 8)) + 'px';
    if (!isShown() && localStorage.getItem(KEY) !== '1') show();
  }

  let followRAF = 0;
  function cancelFollow(){ if (followRAF) cancelAnimationFrame(followRAF), followRAF = 0; }
  function startFollow(ms = 600){
    const end = performance.now() + ms;
    cancelFollow();
    const tick = () => { placeBubble(); if (performance.now() < end) followRAF = requestAnimationFrame(tick); };
    followRAF = requestAnimationFrame(tick);
  }

  if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', placeBubble, { once:true }); } else { placeBubble(); }
  window.addEventListener('scroll', placeBubble, { capture:true, passive:true });
  window.addEventListener('resize', placeBubble);
  document.querySelector('.toggle-extension')?.addEventListener('click', () => { placeBubble(); startFollow(800); });
  window.addEventListener('panel:navigated', () => { placeBubble(); startFollow(400); });

  const ro = new ResizeObserver(() => placeBubble());
  ['.full-header-container','.main-panel-only','.header-top','body','html'].forEach(sel => { const el=document.querySelector(sel); if (el) ro.observe(el); });

  document.addEventListener('transitionstart', (e) => {
    const targets = ['.sidebar-extension-panel','.full-header-container','.main-panel-only','.header-top'];
    if (targets.some(sel => e.target.matches?.(sel))) {
      placeBubble();
      startFollow((e.elapsedTime ? e.elapsedTime*1000 : 500) + 400);
    }
  }, true);

  closeBtn?.addEventListener('click', hide);
  document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && isShown()) hide(); }, true);
  if (localStorage.getItem(KEY) !== '1') show();
})();
</script>

<script>
/* ====== 패널로딩(AJAX) 기존 코드 유지 ====== */
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('[data-panel-link]').forEach(link => {
    link.addEventListener('click', async (e) => {
      e.preventDefault();
      const url = link.getAttribute('href');
      try {
        const res = await fetch(url + '?partial=1', { headers: { 'X-Requested-With': 'XMLHttpRequest' }});
        const html = await res.text();
        const panel = document.querySelector('#mini-lecture');
        if (panel) {
          panel.innerHTML = html;
          panel.scrollTo(0, 0);
          if (typeof window.initPanelResizer === 'function') window.initPanelResizer();
          if (typeof window.bindPanelScrollTrap === 'function') window.bindPanelScrollTrap();
        }
      } catch (err) {
        console.error('패널 로드 오류:', err);
      }
    });
  });
});
</script>

<script>
/* ======================================================
   ⚙️ 언어 드롭다운(포털) + ✅ 새 테마 토글(.dark 클래스 방식) 스크립트
====================================================== */
(function(){
  const langBtn = document.getElementById('langToggleSidebar');
  const langMenu = document.getElementById('langMenuSidebar');
  const themeToggleBtn = document.getElementById('theme-toggle-sidebar');

  const THEME_KEY = 'bugloop.theme';
  const htmlEl = document.documentElement;

  /* ------------------- ✅ 새 테마 로직 (.dark 클래스 적용) ------------------- */
  const updateTheme = (theme) => {
    const isDark = theme === 'dark';
    
    htmlEl.classList.toggle('dark', isDark);

    localStorage.setItem(THEME_KEY, theme);
    // 아이콘 업데이트 (다크 모드면 해(sun), 라이트 모드면 달(moon))
    themeToggleBtn.querySelector('i').className = isDark ? 'fas fa-sun' : 'fas fa-moon';
    themeToggleBtn.setAttribute('aria-label', `테마 전환: 현재 ${isDark ? '다크' : '라이트'} 모드입니다.`);
  };

  const initTheme = () => {
    const saved = localStorage.getItem(THEME_KEY);
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const initialTheme = (saved === 'dark' || (!saved && prefersDark)) ? 'dark' : 'light';
    updateTheme(initialTheme);
  };

  const toggleTheme = () => {
    const currentIsDark = htmlEl.classList.contains('dark');
    const nextTheme = currentIsDark ? 'light' : 'dark';
    updateTheme(nextTheme);
  };

  themeToggleBtn?.addEventListener('click', toggleTheme);
  themeToggleBtn?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggleTheme(); }
  });

  // 초기 테마 설정
  initTheme();
  /* ---------------------------------------------------- */


  /* ---------- 기존 언어 메뉴 포털 로직 유지 ---------- */
  if (!langBtn || !langMenu) return; // 언어 버튼/메뉴 없으면 이후 로직 스킵

  let isOpen = false;
  let lastFocus = null;

  const openMenu = () => {
    if (isOpen) return;
    isOpen = true;
    lastFocus = document.activeElement;

    // aria
    langBtn.setAttribute('aria-expanded','true');
    langMenu.setAttribute('aria-hidden','false');

    // body로 포털 이동 + 고정 좌표 계산
    const r = langBtn.getBoundingClientRect();
    const top = Math.round(r.bottom + 6); // 버튼 바로 아래
    const left = Math.round(Math.max(8, Math.min(r.left, window.innerWidth - 200))); // 화면 밖 방지
    const minW = Math.max(r.width, 160);

    langMenu.classList.add('lang-menu--portal');
    document.body.appendChild(langMenu);
    Object.assign(langMenu.style, {
      top: top + 'px',
      left: left + 'px',
      minWidth: minW + 'px'
    });

    // 첫 포커스(현재 언어)
    const current = langMenu.querySelector('.lang-option.active-lang') || langMenu.querySelector('.lang-option');
    current?.setAttribute('tabindex','0');
    current?.focus();

    // 외부 클릭/스크롤/리사이즈/ESC로 닫기
    setTimeout(() => {
      document.addEventListener('mousedown', onDocDown, { capture:true });
      window.addEventListener('scroll', closeMenu, { passive:true });
      window.addEventListener('resize', closeMenu);
      document.addEventListener('keydown', onKey);
    }, 0);
  };

  const closeMenu = () => {
    if (!isOpen) return;
    isOpen = false;
    langBtn.setAttribute('aria-expanded','false');
    langMenu.setAttribute('aria-hidden','true');

    // 탭 순서 복구
    langMenu.querySelectorAll('.lang-option').forEach(a => a.setAttribute('tabindex','-1'));

    // 메뉴를 다시 원래 자리(토글 버튼 바로 뒤 형제)로 되돌림
    const holder = langBtn.parentElement;
    holder && holder.appendChild(langMenu);
    langMenu.classList.remove('lang-menu--portal');
    langMenu.removeAttribute('style');

    document.removeEventListener('mousedown', onDocDown, { capture:true });
    window.removeEventListener('scroll', closeMenu);
    document.removeEventListener('keydown', onKey);

    // 포커스 반환
    lastFocus?.focus?.();
  };

  const onDocDown = (e) => {
    if (e.target === langBtn || langBtn.contains(e.target)) return;
    if (e.target === langMenu || langMenu.contains(e.target)) return;
    closeMenu();
  };

  const onKey = (e) => {
    if (e.key === 'Escape') { e.stopPropagation(); closeMenu(); return; }

    // 간단한 메뉴 키보드 내비게이션
    const items = Array.from(langMenu.querySelectorAll('.lang-option'));
    const idx = items.indexOf(document.activeElement);
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      const next = items[(idx + 1 + items.length) % items.length];
      next?.focus();
    }
    if (e.key === 'ArrowUp') {
      e.preventDefault();
      const prev = items[(idx - 1 + items.length) % items.length];
      prev?.focus();
    }
    if (e.key === 'Home') { e.preventDefault(); items[0]?.focus(); }
    if (e.key === 'End')  { e.preventDefault(); items[items.length-1]?.focus(); }
  };

  langBtn.addEventListener('click', (e) => {
    e.preventDefault();
    isOpen ? closeMenu() : openMenu();
  });

  // 버튼에서 Space/Enter로도 열기
  langBtn.addEventListener('keydown', (e) => {
    if (e.key === ' ' || e.key === 'Enter' || e.key === 'ArrowDown') {
      e.preventDefault();
      openMenu();
    }
  });
})();
</script>

<script src="/assets/js/header.js"></script>
<script src="/assets/js/global.js"></script>