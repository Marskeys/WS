<style>
/* CSS 변수 설정 (다크/라이트 모드에 따라 변경) */
:root {
  --panel-1: #181a1f; /* 기본 다크 배경 */
  --panel-2: #22262e; /* 다크 호버 배경 */
  --ink-1: #fff; /* 기본 다크 텍스트 */
  --ink-3: rgba(255,255,255,0.25); /* 기본 다크 경계선 */
  --accent: #6cf; /* 강조 색상 */
}

/* 라이트 모드 (html:not(.dark)으로 지정) */
html:not(.dark) {
  --panel-1: #fff;
  --panel-2: #f0f0f0;
  --ink-1: #181a1f;
  --ink-3: rgba(0,0,0,0.15);
}

/* ====== 기존 서브메뉴 간격/정렬 ====== */
.header-menu .submenu li a,
.header-menu .submenu li span {
  padding-top: 8px;
  padding-bottom: 8px;
  display: block;
  font-size: 14px;
  vertical-align: middle;
}

/* YouTube 로고 수직 중앙 정렬 */
.header-menu .main-menu-container {
  display: flex;
  align-items: center;
  height: 100%;
}

/* ====== 사이드바 언어/테마 영역: "동작 우선" 기본 스타일 (다크 모드 기준) ====== */
.sidebar-lang-theme {
  margin-top: 12px;
  padding: 10px 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.sidebar-lang-theme .lang-btn {
  background: none;
  border: none;
  color: var(--ink-1, #fff); /* Dark Mode */
  cursor: pointer;
  font-size: 14px;
  display: inline-flex;
  align-items: center;
  gap: 6px;
  border-radius: 10px;
  padding: 6px 10px;
}

/* 🚫 언어 선택 버튼 포커스(클릭/탭) 테두리 제거 */
.sidebar-lang-theme .lang-btn:focus {
  outline: none;
}
/* 접근성 강화를 위해 focus-visible은 유지 */
.sidebar-lang-theme .lang-btn:focus-visible {
  outline: 2px solid var(--accent, #6cf);
  outline-offset: 2px;
}


/* 언어 메뉴 (기본: 다크 모드) */
.lang-menu {
  position: absolute;
  inset: auto auto auto auto;
  list-style: none;
  margin: 6px 0 0 0;
  padding: 6px 0;
  min-width: 160px;
  background: var(--panel-1); /* 다크 모드 */
  border: 1px solid var(--ink-3); /* 다크 모드 */
  border-radius: 10px;
  box-shadow: 0 12px 32px rgba(0,0,0,0.35);
  display: none;
  z-index: 2147483646;
}

.lang-menu[aria-hidden="false"] {
  display: block;
}

.lang-menu a.lang-option {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  color: var(--ink-1); /* 다크 모드 */
  text-decoration: none;
  font-size: 14px;
}

.lang-menu a.lang-option:hover,
.lang-menu a.lang-option:focus {
  background: var(--panel-2); /* 다크 모드 */
  outline: none;
}

/* 💡 라이트 모드일 때 언어 메뉴의 스타일 재정의 (html:not(.dark) 사용) */
html:not(.dark) .lang-menu {
  background: var(--panel-1); 
  border: 1px solid var(--ink-3);
  box-shadow: 0 12px 32px rgba(0,0,0,0.15); 
}

html:not(.dark) .lang-menu a.lang-option {
  color: var(--ink-1); 
}

html:not(.dark) .lang-menu a.lang-option:hover,
html:not(.dark) .lang-menu a.lang-option:focus {
  background: var(--panel-2); 
}


/* ✅ 새 라이트/다크모드 토글 버튼 스타일 (해/달 아이콘) */
.theme-toggle-btn {
  background: none;
  border: none;
  color: var(--ink-1, #fff); /* Dark Mode 기본 색상: 흰색 */
  cursor: pointer;
  width: 38px;
  height: 38px;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border-radius: 10px;
  transition: all 0.2s ease;
  font-size: 18px;
  line-height: 1;
}

/* 💡 라이트 모드일 때도 아이콘 색상을 흰색으로 고정 (사이드바 배경색에 맞춤) */
html:not(.dark) .theme-toggle-btn {
  color: #fff; /* 흰색으로 명시적 고정 */
  border: none;
}

/* 🚫 테마 토글 버튼 포커스(클릭/탭) 테두리 제거 */
.theme-toggle-btn:focus {
  outline: none;
}
/* 접근성 강화를 위해 focus-visible은 유지 */
.theme-toggle-btn:focus-visible {
  outline: 2px solid var(--accent, #6cf);
  outline-offset: 2px;
}

/* 포털 배치용 클래스 */
.lang-menu.lang-menu--portal {
  position: fixed;
  z-index: 2147483646;
}

/* 접근성: 키보드 이동 시 포커스 링 */
.lang-menu a.lang-option:focus-visible {
  outline: 2px solid var(--accent, #6cf);
  outline-offset: -2px;
}

/* ====================================================== */
/* 📱 모바일 레이아웃 수정: 미디어 쿼리 (Max 768px) */
/* ====================================================== */
@media (max-width: 768px) {
  /* 상단 메뉴바 숨김 */
  .full-header-container .header-top {
      display: none;
  }

  /* 1. 사이드바(.vscode-sidebar)를 가로로 정렬 */
  .side-panel {
    /* 모바일에서는 사이드 패널의 너비와 위치를 상단 고정 바로 보이도록 설정 */
    width: 100%; 
    position: fixed; 
    top: 0;
    left: 0;
    z-index: 19000;
  }
  
  /* 사이드바 래퍼 높이 고정 (상단바처럼 보이게) */
  .sidebar-wrapper {
    height: 50px; 
    overflow: hidden; /* 확장 패널 숨김 */
  }

  /* 아이콘 컨테이너를 가로 정렬 플렉스 컨테이너로 설정 */
  .vscode-sidebar {
    height: 50px;
    display: flex;
    flex-direction: row; /* 탭 버튼들을 가로로 나란히 배치 */
    align-items: center;
    justify-content: space-around; /* 버튼들을 균등하게 배치 */
    width: 100%;
    padding: 0 8px; /* 좌우 패딩만 추가 */
    overflow-x: auto; 
  }
  
  /* 아이콘의 크기와 간격 조정 */
  .vscode-sidebar a.sidebar-icon {
    flex-shrink: 0;
    width: 40px; 
    height: 40px; 
    margin: 5px 0; 
    line-height: 40px;
  }
  
  /* 로고, 토글 버튼, 언어/테마 영역 숨김 */
  .vscode-sidebar a.logo,
  .vscode-sidebar .toggle-extension,
  .sidebar-lang-theme {
    display: none; 
  }

  /* 나머지 확장 패널 부분은 모바일에서 숨김 처리 */
  .sidebar-extension-panel {
    display: none;
  }
}
</style>

<div class="full-header-container" style="z-index:20000;">
  <div class="header-top">
    <div class="top-controls">
      <div class="left-controls">
        <%
          // EJS 변수가 상위 템플릿에서 전달된다고 가정합니다.
          // 여기서 다시 선언하면 Cannot access 'lang' before initialization 에러가 납니다. 
          // 하지만 EJS 환경이 아니면 undefined 에러가 나므로, 안전하게 사용하기 위해 
          // `typeof`로 체크하거나 상위 EJS 파일에서 변수를 반드시 정의해야 합니다.
          
          // EJS가 실행되는 환경에서 `lang` 변수가 정의되어 있다고 가정합니다.

          const pathWithoutLang = currentPath.replace(/^\/(ko|en|fr|zh|ja|es)/, '');
          const showLogo = ['/signup', '/editor', '/login', '/write'].includes(pathWithoutLang) ||
                           pathWithoutLang.startsWith('/post') ||
                           pathWithoutLang.startsWith('/edit');
        %>
        <% if (showLogo) { %>
          <a href="/<%= lang %>/" class="logo-link" data-panel-link aria-label="BugLoop 홈"></a>
        <% } %>
      </div>

      <nav class="header-menu" aria-label="주 메뉴">
        <ul class="main-menu-container">
          <a href="https://www.youtube.com" target="_blank" aria-label="YouTube 바로가기">
            <img src="/assets/images/youtube.png" alt="YouTube"
                 style="height:28px; width:auto; vertical-align:middle; margin-left:3px; margin-right:3px;">
          </a>

          <li class="menu-item-wrapper">
            <span class="menu-label">리뷰</span>
            <ul class="submenu">
              <li><a href="/<%= lang %>/review/book" data-panel-link>북스 팔마 2 프로</a></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (1)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (2)</span></li>
              <li><span class="disabled-menu" style="color:#aaa; cursor:not-allowed;">콘텐츠 대기 중 (3)</span></li>
            </ul>
          </li>
          
          </ul>
      </nav>

      <div class="right-controls" id="right-controls" hidden></div>
    </div>
  </div>

  <aside class="side-panel main-panel-only">
    <div class="sidebar-wrapper">
      <nav class="vscode-sidebar" aria-label="패널 사이드바" role="tablist">
        <a href="#" class="sidebar-icon toggle-extension blink-highlight" title="패널 열기/닫기" aria-label="패널 열기/닫기">
          <i class="fas fa-chevron-left" aria-hidden="true"></i>
        </a>

        <a href="/<%= lang %>/" class="sidebar-icon logo" data-tab="home" title="BugLoop 홈" aria-label="BugLoop 홈" aria-selected="false">
          <img src="/assets/images/BugLoop.png" alt="BugLoop">
        </a>
        <a href="/<%= lang %>/" class="sidebar-icon" data-tab="home" title="홈" aria-selected="false">
          <i class="fas fa-home" aria-hidden="true"></i>
        </a>

        <a href="#" class="sidebar-icon" data-tab="profile" title="프로필" aria-selected="false" role="tab">
          <i class="fas fa-user" aria-hidden="true"></i>
        </a>
        <a href="#" class="sidebar-icon" data-tab="search" title="검색" aria-selected="false" role="tab">
          <i class="fas fa-search" aria-hidden="true"></i>
        </a>

        <% if (user) { %>
          <% if (Number(user.is_admin) === 1) { %>
            <a href="/<%= lang %>/write" class="sidebar-icon" data-tab="write" title="글쓰기" aria-selected="false">
              <i class="fas fa-pen" aria-hidden="true"></i>
            </a>
          <% } %>
        <% } %>

        <div class="sidebar-lang-theme">
          <div class="language-dropdown">
            <button id="langToggleSidebar" class="lang-btn" aria-haspopup="menu" aria-expanded="false" aria-controls="langMenuSidebar">
              <%
                let flagCode = lang;
                switch(lang) {
                  case 'ko': flagCode = 'kr'; break;
                  case 'en': flagCode = 'gb'; break;
                  case 'zh': flagCode = 'cn'; break;
                  case 'ja': flagCode = 'jp'; break;
                  case 'fr': flagCode = 'fr'; break;
                  case 'es': flagCode = 'es'; break;
                  default: flagCode = 'kr';
                }
              %>
              <span class="fi fi-<%= flagCode %>"></span>
            </button>

            <ul id="langMenuSidebar" class="lang-menu" role="menu" aria-hidden="true">
              <%
                const currentPathWithoutLang = currentPath.replace(/^\/(ko|en|fr|zh|ja|es)/, '');
                const langNames = { ko:'한국어', en:'English', fr:'Français', zh:'简体中文', ja:'日本語', es:'Español' };
              %>
              <% (supportedLangs || ['ko','en','fr','zh','ja','es']).forEach(function(langCode){ %>
                <li role="none">
                  <a href="/<%= langCode %><%= currentPathWithoutLang %>"
                     class="lang-option <%= langCode === lang ? 'active-lang' : '' %>"
                     role="menuitem" tabindex="-1">
                    <span class="fi fi-<%= (langCode==='ko'?'kr':(langCode==='en'?'gb':(langCode==='zh'?'cn':(langCode==='ja'?'jp':langCode)))) %>"></span>
                    <%= langNames[langCode] || langCode %>
                  </a>
                </li>
              <% }); %>
            </ul>
          </div>
          
          <button id="theme-toggle-sidebar" class="theme-toggle-btn" aria-label="테마 전환: 라이트/다크 모드" title="테마 전환">
            <i class="fas fa-moon" aria-hidden="true"></i>
          </button>
        </div>
        </nav>

      <div class="sidebar-extension-panel">
        <div class="panel-logo">
          <img src="/assets/images/BugLoop.png" alt="BugLoop" loading="lazy" />
        </div>
        <div class="tab-container"></div>

        <div class="tab-content" data-tab="profile" style="display: none;">
          <%- include('./profile', { locale }) %>
        </div>

        <% if (typeof posts !== 'undefined') { %>
          <div class="tab-content" data-tab="search" style="display: none;">
            <section class="search-tab">
              <div id="sidebar-table-template" data-lang="<%= lang %>">
                <%- include('table') %>
              </div>
            </section>
          </div>
        <% } %>

        <div class="panel-footer">
          <% if (user) { %>
            <div class="greeting" style="text-align:center; margin-top:10px; font-weight:bold;">
              <%= user.nickname %>님, 안녕하세요!
            </div>
          <% } %>

          <% if (currentPath !== '/signup' && currentPath !== '/login') { %>
            <div class="auth-buttons">
              <% if (user) { %>
                <a href="/<%= lang %>/logout" class="auth-btn logout">로그아웃</a>
              <% } else { %>
                <a class="auth-btn signup" onclick="return false;" style="pointer-events:none; opacity:.5; cursor:not-allowed;">회원가입</a>
                <button class="auth-btn login" id="login" type="button">로그인</button>
              <% } %>
            </div>
          <% } %>

          <div id="login-form-container" class="login-form-container hidden">
            <form id="login-form" method="POST" action="/login">
              <input type="text" name="id" placeholder="아이디" required />
              <input type="password" name="password" placeholder="비밀번호" required />
              <button type="submit">로그인</button>
            </form>
          </div>

          <div class="real-footer"><small>© 2025 Bug Loop</small></div>
        </div>
      </div>
    </div>
  </aside>
</div>

<script>
/* ======================================================
   ⚙️ 테마 토글 (.dark 클래스 방식) 및 언어 드롭다운 로직
   ====================================================== */
(function(){
  const langBtn = document.getElementById('langToggleSidebar');
  const langMenu = document.getElementById('langMenuSidebar');
  const themeToggleBtn = document.getElementById('theme-toggle-sidebar');

  const THEME_KEY = 'bugloop.theme';
  const htmlEl = document.documentElement;

  /* ------------------- ✅ 테마 로직 (.dark 클래스 적용) ------------------- */
  const updateTheme = (theme) => {
    const isDark = theme === 'dark';
    
    // .dark 클래스를 토글하여 테마 적용
    htmlEl.classList.toggle('dark', isDark);

    localStorage.setItem(THEME_KEY, theme);
    // 아이콘 업데이트 (다크 모드면 해, 라이트 모드면 달)
    themeToggleBtn.querySelector('i').className = isDark ? 'fas fa-sun' : 'fas fa-moon';
    themeToggleBtn.setAttribute('aria-label', `테마 전환: 현재 ${isDark ? '다크' : '라이트'} 모드입니다.`);
  };

  const initTheme = () => {
    const saved = localStorage.getItem(THEME_KEY);
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const initialTheme = (saved === 'dark' || (!saved && prefersDark)) ? 'dark' : 'light';
    updateTheme(initialTheme);
  };

  const toggleTheme = () => {
    const currentIsDark = htmlEl.classList.contains('dark');
    const nextTheme = currentIsDark ? 'light' : 'dark';
    updateTheme(nextTheme);
  };

  themeToggleBtn?.addEventListener('click', toggleTheme);
  themeToggleBtn?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggleTheme(); }
  });

  // 초기 테마 설정
  initTheme();
  /* ---------------------------------------------------- */


  /* ---------- 언어 메뉴 포털 로직 ---------- */
  if (!langBtn || !langMenu) return;

  let isOpen = false;
  let lastFocus = null;

  const openMenu = () => {
    if (isOpen) return;
    isOpen = true;
    lastFocus = document.activeElement;

    langBtn.setAttribute('aria-expanded','true');
    langMenu.setAttribute('aria-hidden','false');

    const r = langBtn.getBoundingClientRect();
    const top = Math.round(r.bottom + 6);
    const left = Math.round(Math.max(8, Math.min(r.left, window.innerWidth - 200)));
    const minW = Math.max(r.width, 160);

    langMenu.classList.add('lang-menu--portal');
    document.body.appendChild(langMenu);
    Object.assign(langMenu.style, {
      top: top + 'px',
      left: left + 'px',
      minWidth: minW + 'px'
    });

    const current = langMenu.querySelector('.lang-option.active-lang') || langMenu.querySelector('.lang-option');
    current?.setAttribute('tabindex','0');
    current?.focus();

    setTimeout(() => {
      document.addEventListener('mousedown', onDocDown, { capture:true });
      window.addEventListener('scroll', closeMenu, { passive:true });
      window.addEventListener('resize', closeMenu);
      document.addEventListener('keydown', onKey);
    }, 0);
  };

  const closeMenu = () => {
    if (!isOpen) return;
    isOpen = false;
    langBtn.setAttribute('aria-expanded','false');
    langMenu.setAttribute('aria-hidden','true');

    langMenu.querySelectorAll('.lang-option').forEach(a => a.setAttribute('tabindex','-1'));
    const holder = langBtn.parentElement;
    holder && holder.appendChild(langMenu);
    langMenu.classList.remove('lang-menu--portal');
    langMenu.removeAttribute('style');

    document.removeEventListener('mousedown', onDocDown, { capture:true });
    window.removeEventListener('scroll', closeMenu);
    window.removeEventListener('resize', closeMenu);
    document.removeEventListener('keydown', onKey);

    lastFocus?.focus?.();
  };

  const onDocDown = (e) => {
    if (e.target === langBtn || langBtn.contains(e.target)) return;
    if (e.target === langMenu || langMenu.contains(e.target)) return;
    closeMenu();
  };

  const onKey = (e) => {
    if (e.key === 'Escape') { e.stopPropagation(); closeMenu(); return; }

    const items = Array.from(langMenu.querySelectorAll('.lang-option'));
    const idx = items.indexOf(document.activeElement);
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      const next = items[(idx + 1 + items.length) % items.length];
      next?.focus();
    }
    if (e.key === 'ArrowUp') {
      e.preventDefault();
      const prev = items[(idx - 1 + items.length) % items.length];
      prev?.focus();
    }
    if (e.key === 'Home') { e.preventDefault(); items[0]?.focus(); }
    if (e.key === 'End')  { e.preventDefault(); items[items.length-1]?.focus(); }
  };

  langBtn.addEventListener('click', (e) => {
    e.preventDefault();
    isOpen ? closeMenu() : openMenu();
  });

  langBtn.addEventListener('keydown', (e) => {
    if (e.key === ' ' || e.key === 'Enter' || e.key === 'ArrowDown') {
      e.preventDefault();
      openMenu();
    }
  });
})();
</script>