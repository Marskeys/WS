<style>
  :root{
    --header-h: 30px;
    --panel-h-default: 150px;
    --panel-h: var(--panel-h-default);

    --ide-w: 50px;     /* VSCode 사이드바 폭 */
    --panel-w: 360px;  /* 확장 패널 폭 */
    --gut: 2.5vw;      /* 양옆 여백 비율 */
  }
  @media (max-width: 768px){
    :root{ --panel-h-default: 220px; --panel-h: var(--panel-h-default); }
  }

  /* 컨테이너 */
  #mini-lecture{
    position: fixed;
    top: var(--header-h, 0);
    z-index: 40;
    left:  calc(var(--ide-w) + var(--gut));
    right: var(--gut);
    height: var(--panel-h);
    min-height: 20px;
    display: grid;
    grid-template-rows: minmax(0, 1fr) 20px;
    overflow: hidden;

    box-shadow:
      0 60px 140px -30px rgba(0,0,0,.70),
      0 30px  70px -20px rgba(0,0,0,.60),
      0 14px  30px -10px rgba(0,0,0,.50),
      0  2px   8px  -2px rgba(0,0,0,.45),
      0  0     0   1px  rgba(0,0,0,.28);
  }

  /* 패널 열림 시 좌우 여백 보정 */
  body.panel-open #mini-lecture{
    left:  calc(var(--ide-w) + var(--panel-w) + (100vw - (var(--ide-w) + var(--panel-w))) * 0.025);
    right: calc((100vw - (var(--ide-w) + var(--panel-w))) * 0.025);
  }

  @media (max-width: 768px){
    :root{ --ide-w: 0px; --panel-w: 0px; }
    body, body.panel-open{ padding-left: 0 !important; }
    #mini-lecture{
      top: 77px;
      left: 15px !important;
      right: 15px !important;
      width: auto !important;
      margin: 0 !important;
      padding-left: 0 !important;
    }
  }

  /* 패널 내용(자체 스크롤 + 체이닝 차단) */
  #mini-lecture .panel-card{
    background: #2a5d06;
    color: #eee;
    border: 1px solid #333;
    border-bottom: 0;
    box-shadow: 0 10px 30px rgba(0,0,0,.4);
    padding: 16px;
    overflow: auto;
    min-height: 0;
    overscroll-behavior: contain;
    -webkit-overflow-scrolling: touch;
  }

  #mini-lecture .connector{
    display: inline-block;
    margin-bottom: 8px;
    background: #000;
    color: #fff;
    border: 1px solid #333;
    border-bottom: 0;
    border-radius: 10px;
    padding: 4px 10px;
    font-size: 12px;
    font-weight: 700;
  }

  .chip{
    display: inline-block;
    margin-top: 8px;
    margin-right: 6px;
    background: #1a1a1a;
    color: #ddd;
    border: 1px solid #333;
    padding: 6px 10px;
    font-size: 12px;
  }

  /* 리사이저 */
  #panel-resizer{
    grid-row: 2;
    height: 16px;
    border: 0;
    cursor: ns-resize;
    background: #313131;
    transition: background .15s ease, box-shadow .15s ease;
    position: relative;
    touch-action: none;              /* 모바일 드래그 인식 핵심 */
  }
  #panel-resizer::before{
    content: "";
    position: absolute;
    left: 50%; top: 50%;
    transform: translate(-50%, -50%);
    width: 70px; height: 4px; border-radius: 999px;
    background: linear-gradient(90deg, #777, #aaa, #777);
    opacity: .9;
  }
  #panel-resizer::after{
    content: "";
    position: absolute;
    left: 50%; top: 50%;
    transform: translate(-50%, -50%);
    width: 70px; height: 20px;
    pointer-events: none;
    color: #666;
    opacity: .55;
    background: radial-gradient(currentColor 1px, transparent 2px) 0 50%/10px 8px repeat-x;
  }
  #panel-resizer:hover,
  #panel-resizer:focus-visible,
  body.resizing #panel-resizer{
    background: #181818;
    box-shadow: inset 0 0 0 1px #444, 0 0 0 2px rgba(255,255,255,.05);
  }
  #panel-resizer:hover::before,
  #panel-resizer:focus-visible::before{
    transform: translate(-50%, -50%) scaleX(1.08);
  }

  @media (max-width: 640px){
    #mini-lecture{ height: var(--panel-h); min-height: 20px; }
  }

  body.resizing{ user-select: none; }
</style>

<div id="mini-lecture" role="region" aria-label="미니 강의 패널">
  <div class="panel-card">
    <span class="connector">Welcome</span>
    <% if (panelData && panelData.html) { %>
      <div class="panel-body"><%- panelData.html %></div>
    <% } else { %>
      <h3 style="margin:0 0 6px 0"><%= panelData.title %></h3>
      <p style="margin:0;opacity:.9"><%= panelData.body %></p>
    <% } %>
  </div>

  <div id="panel-resizer"
       role="separator"
       aria-orientation="horizontal"
       aria-label="패널 높이 조절"
       aria-valuemin="20"   aria-valuemax="800"
       aria-valuenow="500"
       tabindex="0"
       title="드래그하거나 ↑/↓ 키로 높이 조절"></div>
</div>

<script>
  /* ===== 패널 리사이저 (모바일/데스크톱 공통) ===== */
  (function(){
    const root = document.documentElement;
    const resizer = document.getElementById('panel-resizer');
    if(!resizer) return;

    const MIN = parseInt(resizer.getAttribute('aria-valuemin'), 10) || 20;
    const MAX = parseInt(resizer.getAttribute('aria-valuemax'), 10) || 800;
    const STEP = 16, BIG = 64;
    const VAR = '--panel-h';
    const KEY = 'miniPanelH_session';

    const isHomePath = (p) => p === '/' || /^\/[a-z]{2}\/?$/.test(p);

    const getDefaultPx = () => {
      const v = getComputedStyle(root).getPropertyValue('--panel-h-default').trim() || '500px';
      return parseInt(v, 10) || 500;
    };

    const clamp = v => Math.max(MIN, Math.min(MAX, v|0));

    const setH = (h, save=false) => {
      const n = clamp(parseInt(h, 10));
      root.style.setProperty(VAR, n + 'px');
      resizer.setAttribute('aria-valuenow', String(n));
      if (save) sessionStorage.setItem(KEY, n + 'px');
      window.dispatchEvent(new CustomEvent('mini-panel-resized', { detail: { height: n }}));
    };

    (function init(){
      if (isHomePath(location.pathname)) {
        sessionStorage.removeItem(KEY);
        root.style.removeProperty(VAR);
        resizer.setAttribute('aria-valuenow', String(getDefaultPx()));
      } else {
        const saved = sessionStorage.getItem(KEY);
        if (saved) setH(saved, false);
        else root.style.removeProperty(VAR);
      }
    })();

    let startY = 0, startH = 0, dragging = false;

    function move(e){
      if(!dragging) return;
      const y = (e.touches ? e.touches[0].clientY : e.clientY);
      setH(startH + (y - startY));
      e.preventDefault?.();
    }
    function up(){
      if(!dragging) return;
      dragging = false;
      document.body.classList.remove('resizing');
      const cur = parseInt(getComputedStyle(root).getPropertyValue(VAR),10) || getDefaultPx();
      setH(cur, true);
      window.removeEventListener('mousemove', move);
      window.removeEventListener('mouseup', up);
      window.removeEventListener('touchmove', move);
      window.removeEventListener('touchend', up);
    }
    function down(e){
      dragging = true;
      document.body.classList.add('resizing');
      startY = (e.touches ? e.touches[0].clientY : e.clientY);
      startH = parseInt(getComputedStyle(root).getPropertyValue(VAR),10) || getDefaultPx();
      window.addEventListener('mousemove', move);
      window.addEventListener('mouseup', up);
      window.addEventListener('touchmove', move, { passive:false });
      window.addEventListener('touchend', up);
      e.preventDefault?.();
    }

    // 키보드 리사이즈(옵션이지만 ARIA에 맞춰 구현)
    function onKey(e){
      let cur = parseInt(getComputedStyle(root).getPropertyValue(VAR),10) || getDefaultPx();
      if (e.key === 'ArrowUp')   { setH(cur - STEP, true); e.preventDefault(); }
      else if (e.key === 'ArrowDown'){ setH(cur + STEP, true); e.preventDefault(); }
      else if (e.key === 'PageUp'){ setH(cur - BIG,  true); e.preventDefault(); }
      else if (e.key === 'PageDown'){ setH(cur + BIG, true); e.preventDefault(); }
      else if (e.key === 'Home'){ setH(MIN, true); e.preventDefault(); }
      else if (e.key === 'End'){ setH(MAX, true); e.preventDefault(); }
    }

    resizer.addEventListener('mousedown', down);
    resizer.addEventListener('touchstart', down, { passive:false });
    resizer.addEventListener('keydown', onKey);
  })();
</script>

<script>
  /* ===== 패널 내부 스크롤 트랩 (리사이저 터치/드래그는 건드리지 않음) ===== */
  (function(){
    let scroller, panel, resizer;
    let touchY = 0;

    const isResizing = () => document.body.classList.contains('resizing');
    const isOnResizer = (e) => {
      const t = e.target;
      return !!(t && (t.id === 'panel-resizer' || t.closest && t.closest('#panel-resizer')));
    };

    function ref(){
      panel   = document.getElementById('mini-lecture');
      scroller= panel?.querySelector('.panel-card') || null;
      resizer = document.getElementById('panel-resizer');
    }

    function onPanelWheel(e){
      if (!panel || !scroller) return;
      if (isResizing() || isOnResizer(e)) return;   // ← 리사이즈 중/핸들 위는 패스
      e.preventDefault();
      e.stopPropagation();
      scroller.scrollTop  += e.deltaY;
      scroller.scrollLeft += e.deltaX || 0;
    }

    function onPanelTouchStart(e){
      if (!panel || !scroller) return;
      if (isResizing() || isOnResizer(e)) return;   // ← 패스
      touchY = e.touches[0].clientY;
    }
    function onPanelTouchMove(e){
      if (!panel || !scroller) return;
      if (isResizing() || isOnResizer(e)) return;   // ← 패스 (핵심 수정)
      const y = e.touches[0].clientY;
      const delta = touchY - y;
      touchY = y;
      e.preventDefault();
      e.stopPropagation();
      scroller.scrollTop += delta;
    }

    function bind(){
      ref();
      if (!panel || !scroller) return;

      /* 패널 전체에서 캡처 단계로 wheel/touch 가로채기 */
      panel.addEventListener('wheel', onPanelWheel, { passive:false, capture:true });
      panel.addEventListener('touchstart', onPanelTouchStart, { passive:true,  capture:true });
      panel.addEventListener('touchmove',  onPanelTouchMove,  { passive:false, capture:true });

      /* 내용 교체/리렌더 감지 → 스크롤러 참조 갱신 */
      const mo = new MutationObserver(() => {
        const cur = panel.querySelector('.panel-card');
        if (cur !== scroller) { unbind(); bind(); }
      });
      mo.observe(panel, { childList:true, subtree:true });

      /* 리사이즈/윈도/SPA 내 네비 뒤에도 유지 */
      const reb = () => { unbind(); bind(); };
      window.addEventListener('mini-panel-resized', reb);
      window.addEventListener('resize', reb);
      const _ps = history.pushState, _rs = history.replaceState;
      history.pushState    = function(){ const r=_ps.apply(this, arguments); setTimeout(reb,0); return r; };
      history.replaceState = function(){ const r=_rs.apply(this, arguments); setTimeout(reb,0); return r; };
      window.addEventListener('popstate', () => setTimeout(reb,0));

      // 저장해두기
      panel.__trap_cleanup = () => {
        try{
          panel.removeEventListener('wheel', onPanelWheel, { capture:true });
          panel.removeEventListener('touchstart', onPanelTouchStart, { capture:true });
          panel.removeEventListener('touchmove', onPanelTouchMove, { capture:true });
          mo.disconnect();
          window.removeEventListener('mini-panel-resized', reb);
          window.removeEventListener('resize', reb);
          window.removeEventListener('popstate', reb);
        }catch(e){}
      };
    }

    function unbind(){
      if (panel?.__trap_cleanup) panel.__trap_cleanup();
      panel = scroller = resizer = null;
    }

    document.addEventListener('DOMContentLoaded', bind);
  })();
</script>
