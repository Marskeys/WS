<!DOCTYPE html>
<html class="dark" lang="<%= lang %>">
<head>
  <%- include('partials/head') %>
  <link rel="stylesheet" href="/assets/css/index.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Bug Loop</title>
  <style>
    :root{
      --chrome-gap:50px;
      --panel-gap:16px;
      --radius:12px;
      --border:#2b2b2b;
      --bg:#1b1b1b;
      --panel:#121212;
      --panel-2:#0e0e0e;
      --ink:#eaeaea;
      --ink-2:#b7b7b7;
      --accent:#00f5d4;
      --primary:#217ee8;
      --primary-ink:#608b42;
    }
    html:not(.dark){
      --border:#d9d9d9;
      --bg:#000000;
      --panel:#ffffff;
      --panel-2:#f3f3f6;
      --ink:#1f1f1f;
      --ink-2:#5a5a5a;
      --accent:#3c6df0;
      --primary:#217ee8;
      --primary-ink:#ffffff;
    }

    body.light, body.dark { background: var(--bg); color: var(--ink); }

    .app-shell{
      padding: 16px 16px 16px calc(var(--chrome-gap) + 16px);
      padding-top: calc(50px + 16px);
      margin-top: 50px;
    }

    @media (max-width: 640px){
      .app-shell{
        padding-left: 16px;
        margin-top: 250px;
      }
    }

    .statusbar{
      margin-top:12px; background:var(--panel); border:1px solid var(--border);
      border-radius: var(--radius); padding:8px 12px; display:flex; gap:12px;
      color:var(--ink-2); font-size:.9rem;
    }

    .hidden{ display:none !important; }

    .pjax-fade-enter {
      opacity: 0;
      transform: translateY(20px);
      will-change: transform, opacity;
    }
    .pjax-fade-enter-active {
      opacity: 1;
      transform: translateY(0);
      transition: transform .28s cubic-bezier(.22,1,.36,1), opacity .28s ease;
    }
    @media (prefers-reduced-motion: reduce){
      .pjax-fade-enter { opacity: 1; transform: none; }
      .pjax-fade-enter-active { transition: none; }
    }
  </style>
</head>

<body class="light">
 

  <div id="preloader"><div class="spinner"></div></div>

  <%- include('partials/header') %>

  <div id="panel-root" data-pjax-scope>
    <%- include('partials/panel') %>
  </div>

  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2585969189290118"
     crossorigin="anonymous"></script>

  <!-- BugLoop_index 광고 -->
  <ins class="adsbygoogle"
       style="display:block; margin-left:60px; margin-top:100px;"
       data-ad-client="ca-pub-2585969189290118"
       data-ad-slot="2419246715"
       data-ad-format="auto"
       data-full-width-responsive="true"></ins>
  <script>
       (adsbygoogle = window.adsbygoogle || []).push({});
  </script>

  <div class="app-shell">
    <h1 style="font-weight:700; font-size:1.4rem;">Bug Loop</h1>
    <p style="color:var(--ink-2); margin-top:8px;">
      온라인 에디터 기능이 제거된 간결한 버전입니다.
    </p>
  </div>

  <%- include('partials/scripts') %>

  <!-- 패널 네비게이션 및 전환 로직 -->
  <script>
  (() => {
    const panelRoot = document.getElementById('panel-root');
    const preloader = document.getElementById('preloader');

    (function patchHistory(){
      const _ps = history.pushState, _rs = history.replaceState;
      history.pushState = function(...args){ const r = _ps.apply(this, args); window.dispatchEvent(new Event('locationchange')); return r; }
      history.replaceState = function(...args){ const r = _rs.apply(this, args); window.dispatchEvent(new Event('locationchange')); return r; }
      window.addEventListener('popstate', ()=> window.dispatchEvent(new Event('locationchange')));
    })();

    document.addEventListener('click', onDocClick, true);
    function onDocClick(e){
      const a = e.target.closest('a[data-panel-link], .submenu a');
      if (!a) return;
      if (a.target === '_blank' || e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) return;
      const url = new URL(a.href, location.origin);
      if (url.origin !== location.origin || url.hash) return;
      e.preventDefault();
      navigateAndSwap(a.href, true);
    }

    window.addEventListener('locationchange', () => {
      swapPanel(location.href);
    });

    async function navigateAndSwap(url, push) {
      if (push) history.pushState({panel:true}, '', url);
      else history.replaceState(history.state, '', url);
    }

    async function swapPanel(url) {
      try {
        setLoading(true);
        const fURL = new URL(url, location.origin);
        fURL.searchParams.set('partial', '1');
        const res = await fetch(fURL.toString(), {
          headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'text/fragment, text/html;q=0.9' },
          credentials: 'same-origin',
          cache: 'no-cache'
        });
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const html = await res.text();
        const frag = extractPanel(html);
        if (!frag) { location.replace(url); return; }

        panelRoot.replaceChildren(frag);
        runScripts(panelRoot);

        const fadeTarget =
          panelRoot.querySelector('[data-panel-fade-target]') ||
          panelRoot.querySelector('.panel-body, main, .content, section') ||
          panelRoot.firstElementChild;

        if (fadeTarget) {
          fadeTarget.classList.add('pjax-fade-enter');
          requestAnimationFrame(() => fadeTarget.classList.add('pjax-fade-enter-active'));
        }

        updateActiveMenu(url);
        updateConnector(url);
      } catch (err) {
        console.error('[PJAX] swapPanel error:', err);
        location.replace(url);
      } finally {
        setLoading(false);
      }
    }

    function extractPanel(html) {
      if (!/<\/?html[\s>]/i.test(html)) {
        const wrap = document.createElement('div');
        wrap.innerHTML = html;
        const node = wrap.querySelector('#panel-root, [data-panel-fragment], .panel-root') || wrap;
        const df = document.createDocumentFragment();
        node.childNodes.forEach(n => df.appendChild(n.cloneNode(true)));
        return df;
      }
      const doc = new DOMParser().parseFromString(html, 'text/html');
      const node = doc.querySelector('#panel-root, [data-panel-fragment], .panel-root');
      if (!node) return null;
      const df = document.createDocumentFragment();
      node.childNodes.forEach(n => df.appendChild(n.cloneNode(true)));
      return df;
    }

    function runScripts(root) {
      root.querySelectorAll('script').forEach(old => {
        const s = document.createElement('script');
        for (const {name, value} of [...old.attributes]) s.setAttribute(name, value);
        s.textContent = old.textContent;
        old.replaceWith(s);
      });
    }

    function updateActiveMenu(url) {
      const path = new URL(url, location.origin).pathname.replace(/\/$/, '');
      document.querySelectorAll('.submenu a').forEach(a => {
        const href = (a.getAttribute('href') || '').replace(/\/$/, '');
        const is = href === path;
        a.classList.toggle('active', is);
        const label = a.closest('.menu-item-wrapper')?.querySelector('.menu-label');
        if (label) label.classList.toggle('active-label', is);
      });
    }

    function updateConnector(url) {
      try {
        const path = new URL(url, location.origin).pathname.replace(/\/$/, '');
        let activeLink = document.querySelector(`.submenu a[href="${path}"]`);
        if (!activeLink) {
          activeLink = Array.from(document.querySelectorAll('.submenu a'))
            .find(a => (a.getAttribute('href') || '').replace(/\/$/, '') === path);
        }
        let label = (activeLink?.textContent || '').trim();
        if (!label) {
          const meta = document.querySelector('#panel-root #panel-meta');
          label = meta?.dataset?.panelTitle?.trim();
        }
        if (!label) label = 'Welcome';
        document.querySelectorAll('.connector').forEach(el => { el.textContent = label; });
      } catch (e) {
        document.querySelectorAll('.connector').forEach(el => { el.textContent = 'Welcome'; });
      }
    }

    function setLoading(on) {
      if (!preloader) return;
      preloader.style.display = on ? 'block' : 'none';
    }

    window.addEventListener('DOMContentLoaded', () => {
      updateActiveMenu(location.href);
      updateConnector(location.href);
    });
  })();
  </script>
</body>
</html>
