<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
  <meta charset="UTF-8" />
  <link rel="stylesheet" href="/assets/css/editor.css" />
  <title>BlindLove 에디터</title>
  <%- include('partials/head') %>
  <% if (user) { %>
    <meta name="author" content="<%= user.nickname %>">
  <% } %>
<style>

</style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/assets/css/style.css" />
</head>
<body class="edit-body">
  <div id="preloader">
    <div class="spinner"></div>
  </div>
  <%- include('partials/header') %>
  <% const isEdit = typeof post !== 'undefined' && post !== null; %>
  <% if (user) { %>
    <div style="text-align: center; font-weight: bold; margin-top:3rem;">
      <%= user.nickname %>님, 에디터에 오신 걸 환영합니다!
    </div>
  <% } %>

  <div class="editor-container">
    <div class="logo-wrap">
      <a href="/<%= lang %>/">
        <img src="/assets/images/logo.png" alt="BlindLove 로고" />
      </a>
    </div>

    <div class="lang-selector-wrap">
      <label for="langSelector">편집 중인 언어</label>
      <select id="langSelector">
        <%
          const langLabels = {
              'ko': '한국어',
              'en': 'English',
              'fr': 'Français',
              'zh': '中文',
              'ja': '日本語'
          };
          supportedLangs.forEach(langCode => {
        %>
          <option value="<%= langCode %>" <%= lang === langCode ? 'selected' : '' %>><%= langLabels[langCode] %></option>
        <%
          });
        %>
      </select>
    </div>

    <%
      const langList = [
        { code: 'ko', label: '한국어' },
        { code: 'en', label: 'English' },
        { code: 'fr', label: 'Français' },
        { code: 'zh', label: '简体中文' },
        { code: 'ja', label: '日本語' }
      ];
    %>

    <% langList.forEach(({ code, label }) => { %>
      <div class="lang-meta-block" data-lang="<%= code %>" style="<%= code === lang ? '' : 'display:none;' %>">
        <div class="title-wrap">
          <input
            type="text"
            name="title_<%= code %>"
            placeholder="<%= label %> 제목"
            value="<%= post?.translations?.[code]?.title || '' %>"
          />
        </div>

        <div class="toolbar" data-lang-toolbar="<%= code %>">
          <div class="dropdown">
            <div class="dropdown-toggle" data-style-toggle="<%= code %>">본문 ▼</div>
            <div class="dropdown-menu" data-style-dropdown="<%= code %>">
              <div class="h1" data-style-command="h1">제목</div>
              <div class="h2" data-style-command="h2">부제목</div>
              <div class="h3" data-style-command="h3">머리말 1</div>
              <div class="red" data-style-command="h4">빨간 머리말</div>
              <div class="p" data-style-command="p">본문</div>
              <div class="desc" data-style-command="small">설명</div>
              <div class="meta" data-style-command="footer">머리말 및 꼬리말</div>
              <div class="label" data-style-command="span">레이블</div>
              <div class="label label-bold" data-style-command="strong">진한 레이블</div>
            </div>
          </div>
          <button data-command="insertTOC" data-tooltip="목차 삽입">📑 목차</button>
          <button data-command="bold" data-tooltip="굵게"><b>B</b></button>
          <button data-command="italic" data-tooltip="기울이기"><i>I</i></button>
          <button data-command="underline" data-tooltip="밑줄"><u>U</u></button>
          <button data-command="strikeThrough" data-tooltip="취소선"><s>S</s></button>
          <button data-command="justifyLeft" data-tooltip="왼쪽 정렬"><i class="fas fa-align-left"></i></button>
          <button data-command="justifyCenter" data-tooltip="가운데 정렬"><i class="fas fa-align-center"></i></button>
          <button data-command="justifyRight" data-tooltip="오른쪽 정렬"><i class="fas fa-align-right"></i></button>
          <button data-command="insertOrderedList" data-tooltip="번호 목록"><i class="fas fa-list-ol"></i></button>
          <button data-command="insertUnorderedList" data-tooltip="글머리 기호"><i class="fas fa-list-ul"></i></button>
          <button data-command="outdent" data-tooltip="내어쓰기"><i class="fas fa-outdent"></i></button>
          <button data-command="indent" data-tooltip="들여쓰기"><i class="fas fa-indent"></i></button>
          <button data-command="createLink" data-tooltip="링크 삽입"><i class="fas fa-link"></i></button>
          <button data-command="unlink" data-tooltip="링크 제거"><i class="fas fa-unlink"></i></button>
          
          <div class="color-tool" data-color-tool="foreColor">
            <button data-color-btn="foreColor" data-tooltip="글자 색상">
              <i class="fas fa-pencil-alt"></i>
            </button>
            <div class="color-palette" data-color-palette="foreColor">
              <button style="background:black" data-color-value="black"></button>
              <button style="background:red" data-color-value="red"></button>
              <button style="background:orange" data-color-value="orange"></button>
              <button style="background:green" data-color-value="green"></button>
              <button style="background:blue" data-color-value="blue"></button>
              <button class="none-icon" data-color-value="__clear__" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" data-color-input="foreColor" />
              </label>
            </div>
          </div>
      
          
          <div class="color-tool" data-color-tool="hiliteColor">
            <button data-color-btn="hiliteColor" data-tooltip="배경 색상">
              <i class="fas fa-fill-drip"></i>
            </button>
            <div class="color-palette" data-color-palette="hiliteColor">
              <button style="background:yellow" data-color-value="yellow"></button>
              <button style="background:lightblue" data-color-value="lightblue"></button>
              <button style="background:lightgreen" data-color-value="lightgreen"></button>
              <button style="background:pink" data-color-value="pink"></button>
              <button style="background:#ccc" data-color-value="#ccc"></button>
              <button class="none-icon" data-color-value="__clear__" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" data-color-input="hiliteColor" />
              </label>
            </div>
          </div>
          <button data-command="openHtmlPopup" data-tooltip="HTML 삽입"><i class="fas fa-code"></i></button> 
          <button data-command="insertImage" data-tooltip="이미지 삽입"><i class="fas fa-image"></i></button>
          <button data-command="removeFormat" data-tooltip="형식 제거">지우기</button>
        </div>
    
        <% if (user && Number(user.is_admin) === 1) { %>
        <div class="mode-toggle">
          <button data-mode-toggle="design">디자인 모드</button>
          <button data-mode-toggle="html">HTML 모드</button>
        </div>
        <% } %>
        
        <div class="editor-area-wrapper">
          <div id="editor_<%= code %>"
               contenteditable="true"
               class="editor language-editor"
               spellcheck="false"
               data-lang-editor="<%= code %>"
               style="<%= code === lang ? '' : 'display:none;' %>"
          >
            <%
              let initialContent = post?.translations?.[code]?.content || '<p><br></p>';
              const isWrapped = initialContent.startsWith('<div class="bl-content"');
              if (!isWrapped) {
                initialContent = `
                  <div class="bl-content" style="white-space:normal; line-height: 1.7;">
                    ${initialContent}
                  </div>
                `;
              }
            %>
            <%- initialContent %>
          </div>
          <textarea id="htmlEditor_<%= code %>" class="editor html-editor" style="display: none;"></textarea>
        </div>

        <div class="global-options" style="margin-top: 2rem;">
          <label style="margin-right: 2rem;">
            <input type="checkbox" id="isPrivateCheckbox" name="is_private" value="1" <%= post?.is_private ? 'checked' : '' %> />
            🔒 비공개 글로 설정
          </label>
        
          <% if (user && Number(user.is_admin) === 1) { %>
            <label>
              <input type="checkbox" id="isPinnedCheckbox" name="is_pinned" value="1" <%= post?.is_pinned ? 'checked' : '' %> />
              📌 상단에 고정하기
            </label>
          <% } %>
        </div>


      </div>
    <% }) %> 

    <div class="category-box">
      <label>카테고리 선택:</label>
      <div class="category-list" id="categoryList"></div>
      <button class="bl-button add" onclick="addCategory()">+ 추가</button>
    </div>

    <div class="save-button-wrap">
      <button type="button" class="bl-button save" onclick="postContent()">💾 저장</button>
    </div>
  </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.0/beautify-html.min.js"></script>
<script>
let selectedCategories = [];
<% if (post && post.categories) { %>
  selectedCategories = <%- JSON.stringify(post.categories.split(',')) %>;
<% } %>
let categories = [];
let savedRange = null;
let currentActiveEditor = null;
let currentActiveHtmlEditor = null;
let currentActiveToolbar = null;
const langList = [
    { code: 'ko', label: '한국어' },
    { code: 'en', label: 'English' },
    { code: 'fr', label: 'Français' },
    { code: 'zh', label: '简体中文' },
    { code: 'ja', label: '日本語' }
];
const IS_EDIT_PAGE = <%- isEdit ? 'true' : 'false' %>;
const POST_ID = <%- post && post.id ? JSON.stringify(post.id) : 'null' %>;
const CURRENT_PAGE_LANG = '<%= lang %>';

document.addEventListener('DOMContentLoaded', () => {
  // 언어 선택 드롭다운 이벤트 리스너
  const langSelector = document.getElementById('langSelector');
  langSelector.addEventListener('change', (e) => {
    const selectedLang = e.target.value;
    document.querySelectorAll('.lang-meta-block').forEach(block => {
      block.style.display = (block.dataset.lang === selectedLang) ? '' : 'none';
    });
    // 현재 활성 에디터를 업데이트
    currentActiveEditor = document.querySelector(`.language-editor[data-lang-editor="${selectedLang}"]`);
    currentActiveHtmlEditor = document.querySelector(`#htmlEditor_${selectedLang}`);
    currentActiveToolbar = document.querySelector(`.toolbar[data-lang-toolbar="${selectedLang}"]`);
  });

  // 초기 로드 시 현재 언어의 에디터와 툴바를 활성화
  currentActiveEditor = document.querySelector(`.language-editor[data-lang-editor="${CURRENT_PAGE_LANG}"]`);
  currentActiveHtmlEditor = document.querySelector(`#htmlEditor_${CURRENT_PAGE_LANG}`);
  currentActiveToolbar = document.querySelector(`.toolbar[data-lang-toolbar="${CURRENT_PAGE_LANG}"]`);

  fetchCategories();
  renderCategories();
  setupEditorEvents();
});

function fetchCategories() {
  fetch('/api/categories')
    .then(res => res.json())
    .then(data => {
      categories = data.categories;
      renderCategories();
    })
    .catch(err => console.error('Failed to fetch categories:', err));
}

function renderCategories() {
  const list = document.getElementById('categoryList');
  list.innerHTML = '';
  categories.forEach((cat, index) => {
    const item = document.createElement('div');
    item.className = 'category-item';
    if (selectedCategories.includes(cat)) {
      item.classList.add('selected');
    }
    item.innerHTML = `
      <span>${cat}</span>
      <button onclick="toggleCategory('${cat}')" class="toggle-btn"></button>
    `;
    list.appendChild(item);
  });
}

function toggleCategory(category) {
  const index = selectedCategories.indexOf(category);
  if (index > -1) {
    selectedCategories.splice(index, 1);
  } else {
    selectedCategories.push(category);
  }
  renderCategories();
}

function addCategory() {
  const newCat = prompt("새로운 카테고리 이름을 입력하세요:");
  if (newCat) {
    fetch('/api/categories', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name: newCat })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        fetchCategories(); // 카테고리 목록 새로고침
      } else {
        alert(data.error);
      }
    })
    .catch(err => alert("카테고리 추가 실패"));
  }
}

// -------------------------------------------------------------
// 핵심 로직: postContent() 함수 (서버에 데이터 전송)
// -------------------------------------------------------------
function postContent() {
    const lang_content = {};
    let hasValidContent = false;

    langList.forEach(({ code }) => {
        const titleInput = document.querySelector(`input[name="title_${code}"]`);
        const contentEditor = document.getElementById(`editor_${code}`);
        const htmlEditor = document.getElementById(`htmlEditor_${code}`);
        
        let title = titleInput ? titleInput.value : '';
        let content = contentEditor ? contentEditor.innerHTML : htmlEditor.value;

        // HTML 모드에서 저장 시, 에디터의 내용을 가져옴
        if (currentActiveHtmlEditor && currentActiveHtmlEditor.style.display !== 'none' && code === currentActiveHtmlEditor.id.replace('htmlEditor_', '')) {
            content = htmlEditor.value;
        }

        lang_content[code] = {
            title: title,
            content: content
        };
        
        // 한국어 제목과 내용이 있는지 유효성 검사
        if (code === 'ko' && title && content) {
            hasValidContent = true;
        }
    });

    if (!hasValidContent) {
        alert("한국어 제목과 내용을 모두 입력해주세요.");
        return;
    }

    const categoriesElement = document.getElementById('categoryList');
    if (selectedCategories.length === 0) {
        alert("카테고리를 최소 하나 이상 선택해주세요.");
        return;
    }
    
    const isPrivate = document.getElementById('isPrivateCheckbox').checked;
    const isPinned = document.getElementById('isPinnedCheckbox')?.checked || false;

    const postData = {
        categories: selectedCategories,
        is_private: isPrivate,
        is_pinned: isPinned,
        lang_content: lang_content
    };

    const url = IS_EDIT_PAGE ? `/edit/${POST_ID}` : '/savePost';
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("글이 성공적으로 저장되었습니다.");
            if (IS_EDIT_PAGE) {
                window.location.href = data.redirect;
            } else {
                window.location.href = `/${CURRENT_PAGE_LANG}/post/${data.postId}`;
            }
        } else {
            alert("저장 실패: " + data.error);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("서버 오류로 인해 글을 저장할 수 없습니다.");
    });
}
// -------------------------------------------------------------
// 이하 에디터 툴바 관련 로직 (기존 코드와 유사하므로 유지)
// -------------------------------------------------------------

function setupEditorEvents() {
  document.querySelectorAll('.language-editor').forEach(editor => {
    editor.addEventListener('focus', function() {
      const langCode = this.dataset.langEditor;
      currentActiveEditor = this;
      currentActiveHtmlEditor = document.getElementById(`htmlEditor_${langCode}`);
      currentActiveToolbar = document.querySelector(`.toolbar[data-lang-toolbar="${langCode}"]`);
      
      // 모든 툴바 숨기기
      document.querySelectorAll('.toolbar').forEach(t => t.style.display = 'none');
      // 현재 활성 툴바 보이기
      if (currentActiveToolbar) {
        currentActiveToolbar.style.display = 'flex';
      }
    });
    
    editor.addEventListener('mouseup', saveSelection);
    editor.addEventListener('keyup', saveSelection);
  });

  document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
    toggle.addEventListener('click', function(event) {
      event.stopPropagation();
      const menu = this.nextElementSibling;
      const isVisible = menu.style.display === 'block';
      document.querySelectorAll('.dropdown-menu').forEach(m => m.style.display = 'none');
      if (!isVisible) {
        menu.style.display = 'block';
      }
    });
  });

  document.querySelectorAll('.color-tool').forEach(tool => {
    tool.querySelector('button[data-color-btn]').addEventListener('click', function(event) {
      event.stopPropagation();
      const palette = this.nextElementSibling;
      const isVisible = palette.style.display === 'flex';
      document.querySelectorAll('.color-palette').forEach(p => p.style.display = 'none');
      if (!isVisible) {
        palette.style.display = 'flex';
      }
    });
  });

  document.addEventListener('click', function(event) {
    if (!event.target.closest('.dropdown')) {
      document.querySelectorAll('.dropdown-menu').forEach(m => m.style.display = 'none');
    }
    if (!event.target.closest('.color-tool')) {
      document.querySelectorAll('.color-palette').forEach(p => p.style.display = 'none');
    }
  });

  document.querySelectorAll('[data-style-command]').forEach(item => {
    item.addEventListener('click', function() {
      const command = this.dataset.styleCommand;
      if (currentActiveEditor) {
        changeBlockStyle(command);
      }
    });
  });

  document.querySelectorAll('[data-command]').forEach(btn => {
    btn.addEventListener('click', function() {
      const command = this.dataset.command;
      if (currentActiveEditor) {
        executeCommand(command);
      }
    });
  });

  document.querySelectorAll('.color-palette button').forEach(btn => {
    btn.addEventListener('click', function() {
      const value = this.dataset.colorValue;
      const paletteType = this.closest('.color-palette').dataset.colorPalette;
      if (currentActiveEditor) {
        executeColorCommand(paletteType, value);
      }
    });
  });

  document.querySelectorAll('input[type="color"]').forEach(input => {
    input.addEventListener('input', function() {
      const paletteType = this.dataset.colorInput;
      if (currentActiveEditor) {
        executeColorCommand(paletteType, this.value);
      }
    });
  });

  document.querySelectorAll('[data-mode-toggle]').forEach(btn => {
    btn.addEventListener('click', function() {
      if (currentActiveEditor && currentActiveHtmlEditor) {
        const mode = this.dataset.modeToggle;
        if (mode === 'design') {
          // HTML -> 디자인
          currentActiveEditor.style.display = 'block';
          currentActiveHtmlEditor.style.display = 'none';
          currentActiveEditor.innerHTML = currentActiveHtmlEditor.value;
          // beautify 적용 해제
        } else {
          // 디자인 -> HTML
          currentActiveEditor.style.display = 'none';
          currentActiveHtmlEditor.style.display = 'block';
          currentActiveHtmlEditor.value = html_beautify(currentActiveEditor.innerHTML, {
            indent_size: 2,
            space_in_empty_paren: true
          });
        }
      }
    });
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Tab' && currentActiveEditor && currentActiveEditor.style.display !== 'none') {
      e.preventDefault();
      document.execCommand('indent', false, null);
    }
  });
}

function saveSelection() {
  if (window.getSelection) {
    const sel = window.getSelection();
    if (sel.getRangeAt && sel.rangeCount) {
      savedRange = sel.getRangeAt(0);
    }
  } else if (document.selection && document.selection.createRange) {
    savedRange = document.selection.createRange();
  }
}

function restoreSelection() {
  if (savedRange) {
    if (window.getSelection) {
      const sel = window.getSelection();
      sel.removeAllRanges();
      sel.addRange(savedRange);
    } else if (document.selection && savedRange.select) {
      savedRange.select();
    }
  }
}

function changeBlockStyle(tag) {
  if (currentActiveEditor) {
    restoreSelection();
    document.execCommand('formatBlock', false, tag);
  }
}

function executeCommand(command) {
  if (currentActiveEditor) {
    restoreSelection();
    if (command === 'createLink') {
      const url = prompt("Enter the URL:");
      if (url) {
        document.execCommand('createLink', false, url);
      }
    } else if (command === 'insertImage') {
      const imageUrl = prompt("이미지 URL을 입력하세요:");
      if (imageUrl) {
        document.execCommand('insertImage', false, imageUrl);
      }
    } else if (command === 'openHtmlPopup') {
      const htmlCode = prompt("HTML 코드를 입력하세요:");
      if (htmlCode) {
        document.execCommand('insertHTML', false, htmlCode);
      }
    } else if (command === 'insertTOC') {
      insertTOC();
    } else {
      document.execCommand(command, false, null);
    }
  }
}

function executeColorCommand(command, value) {
  if (currentActiveEditor) {
    restoreSelection();
    if (value === '__clear__') {
      // 색상 제거 로직 (배경색은 style 속성 제거, 글자색은 font color 제거)
      if (command === 'foreColor') {
        document.execCommand('foreColor', false, '#000000'); // 기본값으로 되돌리기
      } else if (command === 'hiliteColor') {
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
          const range = selection.getRangeAt(0);
          const span = document.createElement('span');
          span.style.backgroundColor = '';
          range.surroundContents(span);
        }
      }
    } else {
      document.execCommand(command, false, value);
    }
  }
}

function insertTOC() {
  const tocDiv = document.createElement('div');
  tocDiv.id = 'toc';
  tocDiv.style.border = '1px solid #ccc';
  tocDiv.style.padding = '10px';
  tocDiv.style.margin = '20px 0';
  tocDiv.contentEditable = 'false';
  tocDiv.innerHTML = '<h4>목차</h4>';
  const tocList = document.createElement('ul');
  tocDiv.appendChild(tocList);

  const headings = currentActiveEditor.querySelectorAll('h1, h2, h3, h4');
  headings.forEach((heading, index) => {
    const id = `toc-heading-${index}`;
    heading.id = id;
    const listItem = document.createElement('li');
    const link = document.createElement('a');
    link.href = `#${id}`;
    link.textContent = heading.textContent;
    listItem.appendChild(link);
    tocList.appendChild(listItem);
  });
  
  if (currentActiveEditor) {
    currentActiveEditor.focus();
    restoreSelection();
    const range = savedRange;
    if (range) {
      range.insertNode(tocDiv);
    } else {
      currentActiveEditor.appendChild(tocDiv);
    }
  }
}

</script>
</body>
</html>