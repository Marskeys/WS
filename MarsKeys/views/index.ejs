<!doctype html>
<html lang="ko">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mars Keys — Counter to Welcome</title>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Michroma&display=swap" rel="stylesheet">

  <style>
    :root{
      --bg:#0e1016; 
      --text:#eef2f8; 
      --muted:#9aa3b2;

      --fill-int: 0%;

      --pastel-red-1:#ff8aa1; 
      --pastel-blue-1:#78aaff;
      --pastel-red-2:#ff6b7a; 
      --pastel-blue-2:#5ea1ff;
      --pastel-red-3:#ff9db0; 
      --pastel-blue-3:#b2d1ff;
    }
    *{box-sizing:border-box}
    body{
      margin:0; background:var(--bg); color:var(--text);
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
      overflow-x:hidden;
      overflow-y:hidden; /* 초기엔 잠금 → 애니 이후 auto */
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    /* ===== Hero ===== */
    .wrap{
      position:relative;
      min-height:100vh;
      padding:5vw;
      overflow:visible; /* descender/파티클 오버플로 허용 */
    }

    /* ===== 브랜드 텍스트 ===== */
    .brand{
      margin:0;
      line-height:1;
      font-family:"Michroma", system-ui, sans-serif;
      position:relative;
      z-index:40;
    }
    .brand-line{
      display:block;
      font-size:clamp(56px,14vw,200px);
      line-height:1.18;           /* descender 여유 더 확보 */
      padding-bottom:0.56em;      /* y 꼬리 충분히 확보 */
      overflow:visible;
      position:relative;
    }
    .ink{
      display:inline-block;
      color:transparent;
      -webkit-text-fill-color:transparent; /* Safari 페인트 이슈 회피 */
      -webkit-background-clip:text; background-clip:text;
      background-repeat:no-repeat,no-repeat;
      background-size: var(--fill-int) 100%, 100% 100%;
      background-image: var(--grad), linear-gradient(#fff,#fff);
      letter-spacing:0;
      padding-bottom:0.28em;      /* 글립 박스 추가 여유 */
      transform: translateZ(0);   /* 합성층 올려 잘림 방지 */
    }
    .brand-line:nth-child(1) .ink{ --grad: linear-gradient(180deg,var(--pastel-red-1),var(--pastel-red-2),var(--pastel-red-3)); }
    .brand-line:nth-child(2) .ink{ --grad: linear-gradient(180deg,var(--pastel-blue-1),var(--pastel-blue-2),var(--pastel-blue-3)); }

    .tagline{
      font-size:clamp(16px,2.6vw,28px); font-weight:600; margin:1rem 0 0; color:var(--muted);
    }

    /* ===== 퍼센트 ===== */
    #counter{
      display:block;
      margin-top:0.6rem;
      text-align:right;
      font-size:clamp(28px,7vw,96px);
      font-family:"Michroma", system-ui, sans-serif;
      font-weight:900;
      color:white;
      user-select:none;
      pointer-events:none;
      transition:opacity .6s ease;
      position:relative;
      z-index:40;
    }

    /* ===== 파티클 Canvas ===== */
    #particleCanvas{
      position:absolute; inset:0; width:100%; height:100%;
      pointer-events:none; z-index:50;
    }

    /* ===== Welcome: 문서 흐름(스크롤됨) — wrap 기준 absolute ===== */
    #welcome{
      position:absolute; left:50%; top:50%;
      transform:translate(-50%,-50%) scale(0.86);
      opacity:0;
      font-size:clamp(48px,10vw,130px); /* ⬅️ 사이즈 축소 */
      font-family:"Michroma", system-ui, sans-serif;
      color:white;
      letter-spacing:0.01em;
      max-width:92vw;            /* 좌우 여유 */
      white-space:nowrap;        /* 한 줄 유지 */
      transition:opacity 1s ease, transform 1s cubic-bezier(.2,.7,.2,1);
      will-change:opacity, transform;
      pointer-events:none;
      z-index:60;
    }
    #welcome.visible{
      opacity:1;
      transform:translate(-50%,-50%) scale(1.22); /* ⬅️ 최종 스케일 축소 */
    }

    /* ===== 이후 스크롤 콘텐츠 ===== */
    .scrollable-content{
      padding:0 5vw 6rem; 
      text-align:center; 
      display:none;
      max-width:1200px; margin:0 auto;
      position:relative; z-index:10;
    }
    .scrollable-content p{
      max-width:800px; margin:0 auto 1.5rem; line-height:1.8; 
      color:var(--muted); font-size:clamp(14px,2vw,18px);
    }
    .scrollable-content .temp-box{
      background:rgba(255,255,255,0.05); border-radius:12px; padding:2rem; margin:2rem auto; max-width:900px;
    }

    /* ===== 모바일 ===== */
    @media (max-width: 768px){
      #counter{
        position:absolute; right:6vw; bottom:6vw;
        margin-top:0; text-align:right;
        font-size:clamp(24px,12vw,72px);
      }
    }
  </style>
</head>
<body>
  <main class="wrap" id="wrap">
    <canvas id="particleCanvas"></canvas>

    <h1 class="brand" id="brand">
      <span class="brand-line" data-c="red"><span class="ink" id="mars">Mars</span></span>
      <span class="brand-line" data-c="blue"><span class="ink" id="keys">Keys</span></span>
    </h1>

    <div id="counter" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">0%</div>
    <p class="tagline">Video Game Music Studio</p>

    <!-- 문서 흐름에 속하는 Welcome (스크롤됨) -->
    <div id="welcome">Welcome</div>
  </main>

  <div id="scrollContent" class="scrollable-content">
    <p>게임 음악 스튜디오 Mars Keys에 오신 것을 환영합니다...</p>
    <div class="temp-box"><h3>우리의 서비스</h3><p>게임 OST, SFX, VO, 인터랙티브 음악 시스템...</p></div>
    <div class="temp-box"><h3>포트폴리오</h3><p>RPG, SF 어드벤처 등...</p></div>
    <div class="temp-box"><h3>문의</h3><p>협업 및 프로젝트 문의는 언제든지 환영합니다.</p></div>
    <div style="height:60vh;"></div>
    <div class="temp-box"><p>마지막 임시 콘텐츠</p></div>
  </div>

  <script>
  (function(){
    const html=document.documentElement;
    const body=document.body;
    const wrap=document.getElementById('wrap');
    const counterEl=document.getElementById("counter");
    const welcome=document.getElementById("welcome");
    const scrollContent=document.getElementById("scrollContent");
    const particleCanvas=document.getElementById('particleCanvas');
    const pctx=particleCanvas.getContext('2d');

    let p=0;
    const accel=0.0018;
    let autoAnimating=false, isFinalized=false, particlesGenerated=false;

    let particles=[];
    const DENSITY=7;
    const MAX_PARTICLES=1200;

    function resizeParticleCanvas(){
      const dpr = Math.max(1, window.devicePixelRatio || 1);
      const rect = wrap.getBoundingClientRect();
      particleCanvas.width  = Math.floor(rect.width * dpr);
      particleCanvas.height = Math.floor(rect.height * dpr);
      particleCanvas.style.width  = rect.width + 'px';
      particleCanvas.style.height = rect.height + 'px';
      pctx.setTransform(dpr,0,0,dpr,0,0);
      pctx.clearRect(0,0,rect.width,rect.height);
    }

    function setProgress(v){
      p=Math.max(0,Math.min(1,v));
      const pct = Math.round(p*100);
      html.style.setProperty('--fill-int', pct+'%');
      if(!isFinalized){
        counterEl.textContent = pct + "%";
        counterEl.setAttribute('aria-valuenow', String(pct));
      }
      if(p>=1 && !particlesGenerated && !isFinalized){
        generateParticles();
        dissolveText();
        showWelcome();
      }
    }

    function startAutoAnimation(){
      if(autoAnimating||isFinalized) return;
      autoAnimating=true;
      function step(){
        if(p<1){ p = Math.min(1, p+0.005); setProgress(p); requestAnimationFrame(step); }
        else { autoAnimating=false; }
      }
      step();
    }

    function drawTextToCanvas(text, fontSize, fontFamily){
      const offCanvas = document.createElement('canvas');
      const offCtx = offCanvas.getContext('2d');
      offCtx.font = `${fontSize}px ${fontFamily}`;
      const metrics = offCtx.measureText(text);
      const actualHeight = (metrics.actualBoundingBoxAscent||fontSize) + (metrics.actualBoundingBoxDescent||fontSize*0.25);
      const width = Math.ceil(metrics.width);

      offCanvas.width = Math.ceil(width);
      offCanvas.height = Math.ceil(actualHeight);

      offCtx.font = `${fontSize}px ${fontFamily}`;
      offCtx.fillStyle = 'white';
      offCtx.textBaseline = 'top';
      offCtx.fillText(text, 0, 0);

      return { canvas: offCanvas };
    }

    function generateParticles(){
      particlesGenerated=true; particles.length=0;

      const wrapRect = wrap.getBoundingClientRect();
      const lines = [
        { el: document.getElementById('mars').parentElement, color:'red',  textEl: document.getElementById('mars')  },
        { el: document.getElementById('keys').parentElement, color:'blue', textEl: document.getElementById('keys') }
      ];

      lines.forEach(({el, color, textEl})=>{
        const rect = el.getBoundingClientRect();
        const style = getComputedStyle(textEl);
        const fontSize = parseFloat(style.fontSize);
        const fontFamily = style.fontFamily;

        const { canvas } = drawTextToCanvas(textEl.textContent, fontSize, fontFamily);
        const ctx = canvas.getContext('2d');
        const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

        for(let y=0;y<canvas.height;y+=DENSITY){
          for(let x=0;x<canvas.width;x+=DENSITY){
            const idx=(y*canvas.width+x)*4;
            if(imgData[idx+3]>128){
              particles.push({
                x: rect.left - wrapRect.left + x,
                y: rect.top  - wrapRect.top  + y,
                vx:(Math.random()-0.5)*1.4,
                vy:(Math.random()-0.5)*1.4,
                alpha:1,
                color
              });
            }
          }
        }
      });

      if(particles.length > MAX_PARTICLES){
        const sampled=[];
        for(let i=0;i<MAX_PARTICLES;i++){
          sampled.push(particles[(Math.random()*particles.length)|0]);
        }
        particles = sampled;
      }
    }

    function dissolveText(){
      document.querySelectorAll('.ink').forEach(el=>{
        el.style.transition='opacity .3s ease';
        el.style.opacity='0';
      });

      const wrapRect = wrap.getBoundingClientRect();
      const width = wrapRect.width, height = wrapRect.height;
      let frameId = null;

      function frame(){
        pctx.clearRect(0,0,width,height);

        let aliveCount = 0;
        for(const pt of particles){ if(pt.alpha>0){ aliveCount++; } }

        pctx.globalCompositeOperation = 'lighter';

        for(const pt of particles){
          if(pt.alpha<=0) continue;

          const col = (pt.color==='red')
            ? getComputedStyle(document.documentElement).getPropertyValue('--pastel-red-1').trim()
            : getComputedStyle(document.documentElement).getPropertyValue('--pastel-blue-1').trim();

          if(aliveCount < 20){
            pctx.save();
            pctx.globalAlpha = pt.alpha;
            pctx.shadowBlur = 14;          /* ⬅️ 글로우 */
            pctx.shadowColor = col || '#ffffff';
            pctx.fillStyle = col || '#ffffff';
            pctx.beginPath();
            pctx.arc(pt.x, pt.y, 2.2, 0, Math.PI*2);
            pctx.fill();
            pctx.restore();
          }else{
            pctx.globalAlpha = pt.alpha;
            pctx.fillStyle = col || '#ffffff';
            pctx.fillRect(pt.x, pt.y, 2, 2);
          }

          pt.x += pt.vx; pt.y += pt.vy;
          pt.vx *= 1.016; pt.vy *= 1.016;
          pt.alpha -= 0.0045;
        }

        if(aliveCount > 0) {
          frameId = requestAnimationFrame(frame);
        } else {
          pctx.clearRect(0, 0, width, height);
          pctx.globalCompositeOperation = 'source-over';
          cancelAnimationFrame(frameId);
        }
      }
      requestAnimationFrame(frame);
    }

    function showWelcome(){
      setTimeout(()=>{ counterEl.style.opacity=0; }, 350);
      setTimeout(()=>{ welcome.classList.add("visible"); }, 900);
      setTimeout(()=>{
        scrollContent.style.display="block";
        isFinalized=true;  
        body.style.overflowY="auto";
      }, 1500);
    }

    /* === 입력: 50%까지 수동, 그 뒤 자동 === */
    function onWheel(e){
      if(isFinalized) return;
      e.preventDefault();
      const dy=e.deltaY;
      if(p<0.5){
        setProgress(p+dy*accel);
        if(p>=0.5) startAutoAnimation();
      }else if(!autoAnimating){
        startAutoAnimation();
      }
    }
    function onTouchMove(e){
      if(isFinalized) return;
      const touch=e.touches[0]; 
      const currentY=touch.clientY;
      if(typeof onTouchMove.lastY!=="undefined"){
        const dy=onTouchMove.lastY-currentY;
        if(p<0.5){
          setProgress(p+dy*accel*2);
          if(p>=0.5) startAutoAnimation();
        }else if(!autoAnimating && dy>0){
          startAutoAnimation();
        }
      }
      onTouchMove.lastY=currentY;
    }
    function onTouchEnd(){ if(!isFinalized){ onTouchMove.lastY=undefined; } }

    window.addEventListener('resize', resizeParticleCanvas);
    window.addEventListener('wheel',onWheel,{passive:false});
    window.addEventListener('touchstart',(e)=>{onTouchMove.lastY=e.touches[0].clientY;});
    window.addEventListener('touchmove',onTouchMove,{passive:false});
    window.addEventListener('touchend',onTouchEnd);

    resizeParticleCanvas();
    setProgress(0);
  })();
  </script>
</body>
</html>
