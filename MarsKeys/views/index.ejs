<!DOCTYPE html>
<% const isKorean = (lang || '').toLowerCase().startsWith('ko'); %>
<html lang="<%= lang %>">
  <%- include('partials/head') %>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>
    <% if (isSearch) { %>
      <%= locale.search_results_for %>: <%= searchKeyword %>
    <% } else if (selectedCategory) { %>
      <%= selectedCategory %>
    <% } else { %>
      <%= locale.marskeys_title %>
    <% } %>
  </title>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Michroma&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
  <% if (isKorean) { %>
    <link href="https://fonts.googleapis.com/css2?family=Yeon+Sung&display=swap" rel="stylesheet">
  <% } %>

  <style>
    :root {
      --bg: #0e1016;
      --text: #eef2f8;
      --muted: #9aa3b2;
      --fill-int: 0%;
      --pastel-red-1: #ff8aa1;
      --pastel-blue-1: #78aaff;
      --pastel-red-2: #ff6b7a;
      --pastel-blue-2: #5ea1ff;
      --pastel-red-3: #ff9db0;
      --pastel-blue-3: #b2d1ff;
    }

    * { box-sizing: border-box }

    body {
      margin: 0;
      background-color: var(--bg);
      color: var(--text);
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
      overflow-x: hidden;
      overflow-y: hidden;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    /* 한국어일 때 환영문(#welcome)만 'Montserrat'로 변경 */
    body.lang-ko #welcome {
      font-family: 'Montserrat', 'Michroma', system-ui, sans-serif;
      font-weight: 400;
    }

    body.show-background {
      background-image: url('https://images.unsplash.com/photo-1502126428-175f0881ed53?q=80&w=2670&auto=format&fit=crop');
      background-repeat: no-repeat;
      background-position: center center;
      background-size: cover;
      background-attachment: fixed;
      transition: background-image 2s ease;
    }

    .wrap {
      position: relative;
      min-height: 100svh;
      padding: 5vw;
      overflow: visible;
    }

    .brand {
      margin: 0;
      line-height: 1;
      font-family: "Michroma", system-ui, sans-serif;
      position: relative;
      z-index: 40;
    }

    .brand-line {
      display: block;
      font-size: clamp(56px, min(14vw, 28vh), 200px);
      line-height: 1.06;
      padding-bottom: 0.18em;
      overflow: visible;
      position: relative;
    }
    .brand-line+.brand-line { margin-top: -0.32em; }

    .ink{
      display:inline-block; color:transparent; -webkit-text-fill-color:transparent;
      -webkit-background-clip:text; background-clip:text;
      background-repeat:no-repeat,no-repeat;
      background-size:var(--fill-int) 100%, 100% 100%;
      background-image:var(--grad), linear-gradient(#fff,#fff);
      letter-spacing:0; padding-bottom:.28em; transform:translateZ(0);
    }
    .brand-line:nth-child(1) .ink{ --grad:linear-gradient(180deg,var(--pastel-red-1),var(--pastel-red-2),var(--pastel-red-3)); }
    .brand-line:nth-child(2) .ink{ --grad:linear-gradient(180deg,var(--pastel-blue-1),var(--pastel-blue-2),var(--pastel-blue-3)); }

    .tagline {
      font-size: clamp(16px, 2.6vw, 28px);
      font-weight: 600;
      margin: 1rem 0 0;
      color: var(--muted);
      position: relative;
      transition: color .55s ease;
      will-change: color;
    }
    .tagline.shine-to-white { overflow: visible; }
    .tagline.shine-to-white::before {
      content: attr(data-text);
      position: absolute;
      inset: 0;
      pointer-events: none;
      color: transparent;
      -webkit-text-fill-color: transparent;
      background: linear-gradient(90deg,
        rgba(255,255,255,0) 0%,
        rgba(255,255,255,.16) 32%,
        rgba(255,255,255,.85) 50%,
        rgba(255,255,255,.16) 68%,
        rgba(255,255,255,0) 100%);
      -webkit-background-clip: text;
      background-clip: text;
      transform: translateX(-120%) skewX(-18deg);
      filter: blur(.3px);
      animation: shine-sweep 900ms cubic-bezier(.2,.7,.2,1) forwards;
    }
    .tagline.to-white { color: #fff; }
    @keyframes shine-sweep { to { transform: translateX(120%) skewX(-18deg); } }

    #counter {
      position: absolute;
      right: 5vw;
      bottom: clamp(16px, 6vh, 48px);
      text-align: right;
      font-size: clamp(28px, min(7vw, 10vh), 96px);
      font-family: "Michroma", system-ui, sans-serif;
      font-weight: 900;
      color: white;
      user-select: none;
      pointer-events: none;
      transition: opacity .6s ease;
      z-index: 40;
      margin: 0;
    }

    #particleCanvas {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 50;
    }

    /* 🔁 신호선 → 현 시뮬레이터 캔버스 */
    #lineViz {
      position: fixed;
      pointer-events: auto; /* ← 드래그 가능하게 변경 */
      z-index: 55;
    }

    #welcome {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%) scale(0.86);
      opacity: 0;
      font-size: clamp(48px, 10vw, 130px);
      font-family: 'Montserrat', system-ui, sans-serif;
      color: white;
      letter-spacing: 0.01em;
      max-width: 92vw;
      white-space: nowrap;
      transition: opacity 1s ease, transform 1s cubic-bezier(.2, .7, .2, 1), text-shadow 1s ease-out;
      will-change: opacity, transform, text-shadow;
      pointer-events: none;
      z-index: 60;
      text-shadow: 0 0 0 transparent;
    }
    #welcome.visible { opacity: 1; transform: translate(-50%, -50%) scale(1.22); }
    #welcome.welcome-glow {
      text-shadow: 0 0 20px rgba(255, 255, 255, 0.8),
                   0 0 40px rgba(255, 255, 255, 0.6),
                   0 0 60px rgba(255, 255, 255, 0.4);
    }

    .scrollable-content {
      padding: 0 5vw 6rem;
      text-align: center;
      display: none;
      max-width: 1200px;
      margin: 0 auto;
      position: relative;
      z-index: 10;
    }
    .scrollable-content p {
      max-width: 800px;
      margin: 0 auto 1.5rem;
      line-height: 1.8;
      color: var(--muted);
      font-size: clamp(14px, 2vw, 18px);
    }
    .scrollable-content .temp-box {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      margin: 2rem auto;
      max-width: 900px;
    }

    @media (max-width: 768px) {
      .brand-line { line-height: 1.08; padding-bottom: 0.16em; }
      .brand-line+.brand-line { margin-top: -0.26em; }
    }
  </style>
</head>

<body class="<%= isKorean ? 'lang-ko' : '' %>">
  <main class="wrap" id="wrap">
    <canvas id="particleCanvas"></canvas>
    <canvas id="lineViz"></canvas>

    <h1 class="brand" id="brand">
      <span class="brand-line" data-c="red"><span class="ink" id="mars"><%= locale.mars_keys.split(' ')[0] %></span></span>
      <span class="brand-line" data-c="blue"><span class="ink" id="keys"><%= locale.mars_keys.split(' ')[1] %></span></span>
    </h1>

    <p class="tagline shine-to-white" data-text="<%= locale.game_music_studio %>"><%= locale.game_music_studio %></p>

    <div id="counter" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">0%</div>
    <div id="welcome"><%= locale.welcome %></div>
  </main>

  <div id="scrollContent" class="scrollable-content">
    <p><%= locale.game_music_studio %> <%= locale.marskeys_title %>에 오신 것을 환영합니다...</p>
    <div class="temp-box">
      <h3>우리의 서비스</h3>
      <p>게임 OST, SFX, VO, 인터랙티브 음악 시스템...</p>
    </div>
    <div class="temp-box">
      <h3>포트폴리오</h3>
      <p>RPG, SF 어드벤처 등...</p>
    </div>
    <div class="temp-box">
      <h3>문의</h3>
      <p>협업 및 프로젝트 문의는 언제든지 환영합니다.</p>
    </div>
    <div style="height:60vh;"></div>
    <div class="temp-box">
      <p>마지막 임시 콘텐츠</p>
    </div>
  </div>

  <script>
    (function() {
      const html = document.documentElement;
      const body = document.body;
      const wrap = document.getElementById('wrap');
      const counterEl = document.getElementById("counter");
      const welcome = document.getElementById("welcome");
      const scrollContent = document.getElementById("scrollContent");
      const particleCanvas = document.getElementById('particleCanvas');
      const pctx = particleCanvas.getContext('2d');

      const tagline = document.querySelector('.tagline');
      tagline.addEventListener('animationend', (event) => {
        if (event.animationName === 'shine-sweep') {
            tagline.classList.add('to-white');
        }
      });

      // Progress
      let p = 0;
      let autoAnimating = false,
          isFinalized = false,
          particlesGenerated = false;

      const IS_MOBILE = window.matchMedia("(max-width: 768px)").matches;
      const CSS = getComputedStyle(document.documentElement);
      const COL_RED = (CSS.getPropertyValue('--pastel-red-2') || '#ff6b7a').trim();
      const COL_BLUE = (CSS.getPropertyValue('--pastel-blue-2') || '#5ea1ff').trim();

      // Particles
      let particles = [];
      const MAX_PARTICLES = IS_MOBILE ? 8000 : 3000;
      let particlePhase = 'idle';
      let phaseStartTime = 0;

      function resizeParticleCanvas() {
        const dpr = Math.max(1, window.devicePixelRatio || 1);
        const rect = wrap.getBoundingClientRect();
        particleCanvas.width = Math.floor(rect.width * dpr);
        particleCanvas.height = Math.floor(rect.height * dpr);
        particleCanvas.style.width = rect.width + 'px';
        particleCanvas.style.height = rect.height + 'px';
        pctx.setTransform(dpr, 0, 0, dpr, 0, 0);
        pctx.clearRect(0, 0, rect.width, rect.height);
      }

      function setProgress(v) {
        p = Math.max(0, Math.min(1, v));
        const pct = Math.round(p * 100);
        html.style.setProperty('--fill-int', pct + '%');
        if (!isFinalized) {
          counterEl.textContent = pct + "%";
          counterEl.setAttribute('aria-valuenow', String(pct));
        }
        if (p >= 1 && !particlesGenerated && !isFinalized) {
          generateParticles();
          fadeOutText();
          showWelcome();
          runParticleShow();
          startLineEffect(); // 신호선(현) 시뮬레이터 시작
        }
      }

      function startAutoAnimation() {
        if (autoAnimating || isFinalized) return;
        autoAnimating = true;
        function step() {
          if (p < 1) {
            p = Math.min(1, p + 0.005);
            setProgress(p);
            requestAnimationFrame(step);
          } else {
            autoAnimating = false;
          }
        }
        step();
      }

      function drawTextToCanvas(text, fontSize, fontFamily) {
        const offCanvas = document.createElement('canvas');
        const offCtx = offCanvas.getContext('2d');
        offCtx.font = `${fontSize}px ${fontFamily}`;
        const metrics = offCtx.measureText(text);
        const actualHeight = (metrics.actualBoundingBoxAscent || fontSize) + (metrics.actualBoundingBoxDescent || fontSize * 0.25);
        const width = Math.ceil(metrics.width);
        offCanvas.width = Math.ceil(width);
        offCanvas.height = Math.ceil(actualHeight);
        offCtx.font = `${fontSize}px ${fontFamily}`;
        offCtx.fillStyle = 'white';
        offCtx.textBaseline = 'top';
        offCtx.fillText(text, 0, 0);
        return { canvas: offCanvas };
      }

      function computeStepForTarget(canvas, target) {
        const area = canvas.width * canvas.height;
        const estGlyphArea = area * 0.45;
        return Math.max(3, Math.floor(Math.sqrt(estGlyphArea / Math.max(1, target))));
      }

      function generateParticles() {
        particlesGenerated = true;
        particles.length = 0;
        const wrapRect = wrap.getBoundingClientRect();
        const lines = [
          { el: document.getElementById('mars').parentElement, color: 'red',  textEl: document.getElementById('mars') },
          { el: document.getElementById('keys').parentElement, color: 'blue', textEl: document.getElementById('keys') }
        ];
        const centerX = wrapRect.width * 0.5;
        const centerY = wrapRect.height * 0.5;

        const TARGET_PER_LINE = IS_MOBILE ? 4000 : 1500;

        lines.forEach(({ el, color, textEl }) => {
          const rect = el.getBoundingClientRect();
          const style = getComputedStyle(textEl);
          const fontSize = parseFloat(style.fontSize);
          const fontFamily = style.fontFamily;
          const { canvas } = drawTextToCanvas(textEl.textContent, fontSize, fontFamily);
          const ctx = canvas.getContext('2d');
          const img = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = img.data;

          const STEP = computeStepForTarget(canvas, TARGET_PER_LINE);

          for (let y = 0; y < canvas.height; y += STEP) {
            for (let x = 0; x < canvas.width; x += STEP) {
              const idx = (y * canvas.width + x) * 4;
              if (data[idx + 3] > 128) {
                const px = rect.left - wrapRect.left + x;
                const py = rect.top - wrapRect.top + y;

                const dx = px - centerX;
                const dy = py - centerY;
                const dist = Math.hypot(dx, dy) + 0.0001;
                const boost = 0.6 + Math.random() * 1.1;

                particles.push({
                  x: px, y: py,
                  vx: (Math.random() - 0.5) * 0.6 + (dx / dist) * boost,
                  vy: (Math.random() - 0.5) * 0.6 + (dy / dist) * boost,
                  alpha: 1, color,
                  tx: null, ty: null, reached: false
                });
              }
            }
          }
        });

        if (particles.length > (IS_MOBILE ? 8000 : 3000)) {
          const cap = IS_MOBILE ? 8000 : 3000;
          const sampled = [];
          for (let i = 0; i < cap; i++) sampled.push(particles[(Math.random() * particles.length) | 0]);
          particles = sampled;
        }
      }

      function fadeOutText() {
        document.querySelectorAll('.ink').forEach(el => {
          el.style.transition = 'opacity .3s ease';
          el.style.opacity = '0';
        });
      }

      function showWelcome() {
        setTimeout(() => { counterEl.style.opacity = 0; }, 350);
        setTimeout(() => {
          welcome.classList.add("visible");
          welcome.classList.add("welcome-glow");
        }, 900);
        setTimeout(() => {
          scrollContent.style.display = "block";
          isFinalized = true;
          body.style.overflowY = "auto";
        }, 1500);
      }

      function buildTaegeukTargets(minRed, minBlue) {
        const rect = wrap.getBoundingClientRect();
        const cx = rect.width * 0.5, cy = rect.height * 0.5;
        const R = Math.min(rect.width, rect.height) * 0.26;

        let step = Math.max(4, Math.round(Math.min(rect.width, rect.height) / (IS_MOBILE ? 120 : 150)));

        function sample(stepVal) {
          const red = [], blue = [];
          const rSmall = R * 0.5, rSmall2 = rSmall * rSmall;
          const offsetX = R * 0.5;

          for (let yy = -R; yy <= R; yy += stepVal) {
            for (let xx = -R; xx <= R; xx += stepVal) {
              const x = xx, y = yy;
              if (x * x + y * y > R * R) continue;

              let targetColor = null;
              const distLeft2  = (x + offsetX) * (x + offsetX) + y * y;
              const distRight2 = (x - offsetX) * (x - offsetX) + y * y;

              if (distLeft2 <= rSmall2)      targetColor = 'red';
              else if (distRight2 <= rSmall2) targetColor = 'blue';
              else                             targetColor = (y < 0) ? 'red' : 'blue';

              if (targetColor === 'red') red.push({ x: cx + x, y: cy + y });
              else                        blue.push({ x: cx + x, y: cy + y });
            }
          }
          return { red, blue };
        }

        let targets = sample(step);
        while ((targets.red.length < minRed || targets.blue.length < minBlue) && step > 2) {
          step = Math.max(2, Math.floor(step * 0.85));
          targets = sample(step);
        }

        function downsample(arr, n) {
          if (arr.length <= n) return arr;
          const out = [];
          for (let i = 0; i < n; i++) out.push(arr[(Math.random() * arr.length) | 0]);
          return out;
        }
        const capRed  = Math.max(minRed  * 1.15 | 0, minRed);
        const capBlue = Math.max(minBlue * 1.15 | 0, minBlue);
        if (targets.red.length  > capRed)  targets.red  = downsample(targets.red,  capRed);
        if (targets.blue.length > capBlue) targets.blue = downsample(targets.blue, capBlue);

        function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1))|0; [a[i],a[j]]=[a[j],a[i]]; } }
        shuffle(targets.red); shuffle(targets.blue);
        return targets;
      }

      function assignTaegeukTargets() {
        const reds = particles.filter(pt => pt.color === 'red');
        const blues = particles.filter(pt => pt.color === 'blue');
        const targets = buildTaegeukTargets(reds.length, blues.length);
        function assign(listPts, listTgts) {
          for (let i = 0; i < listPts.length; i++) {
            const t = listTgts[i % listTgts.length];
            listPts[i].tx = t.x; listPts[i].ty = t.y; listPts[i].reached = false;
          }
        }
        assign(reds, targets.red);
        assign(blues, targets.blue);
      }

      function runParticleShow() {
        particlePhase = 'explode';
        phaseStartTime = performance.now();

        function frame(now) {
          const rect = wrap.getBoundingClientRect();
          const W = rect.width, H = rect.height;
          pctx.clearRect(0, 0, W, H);

          if (particlePhase === 'explode' && now - phaseStartTime >= 2000) {
            assignTaegeukTargets();
            particlePhase = 'morph';
            phaseStartTime = now;
          } else if (particlePhase === 'morph') {
            const allReached = particles.every(pt => pt.reached);
            if (allReached || (now - phaseStartTime) > 1600) {
              particlePhase = 'hold';
              phaseStartTime = now;
            }
          } else if (particlePhase === 'hold' && now - phaseStartTime >= 900) {
            welcome.classList.remove("welcome-glow");
            for (const pt of particles) {
              const ang = Math.random() * Math.PI * 2;
              const spd = 0.05 + Math.random() * 0.1;
              pt.vx = Math.cos(ang) * spd;
              pt.vy = Math.sin(ang) * spd;
              pt.reached = false;
            }
            particlePhase = 'disperse';
            phaseStartTime = now;
          }

          let anyAlive = false;
          for (const pt of particles) {
            if (pt.alpha <= 0) continue;
            anyAlive = true;

            if (particlePhase === 'explode') {
              pt.vx *= 0.985; pt.vy *= 0.985;
              pt.vx += (Math.random() - 0.5) * 0.02;
              pt.vy += (Math.random() - 0.5) * 0.02;
              pt.alpha = Math.max(0.8, pt.alpha - 0.0006);
            } else if (particlePhase === 'morph') {
              if (pt.tx != null) {
                const dx = pt.tx - pt.x, dy = pt.ty - pt.y;
                pt.vx = pt.vx * 0.82 + dx * 0.06;
                pt.vy = pt.vy * 0.82 + dy * 0.06;
                if (Math.hypot(dx, dy) < 1.6) {
                  pt.x = pt.tx; pt.y = pt.ty; pt.vx = pt.vy = 0; pt.reached = true;
                }
              }
              pt.alpha = Math.min(1, pt.alpha + 0.01);
            } else if (particlePhase === 'hold') {
              const t = (now - phaseStartTime) * 0.004;
              pt.x += Math.sin(t + (pt.tx || pt.x) * 0.01) * 0.06;
              pt.y += Math.cos(t + (pt.ty || pt.y) * 0.01) * 0.06;
              pt.alpha = 1;
            } else if (particlePhase === 'disperse') {
              pt.vx *= 0.995; pt.vy *= 0.995;
              if (pt.color === 'blue') pt.alpha -= 0.0015;
              else                     pt.alpha -= 0.002;
            }

            pt.x += pt.vx; pt.y += pt.vy;
          }

          if (particlePhase === 'disperse' && !anyAlive) {
            body.classList.add('show-background');
            particlePhase = 'done';
            return;
          }

          // draw
          pctx.globalCompositeOperation = 'source-over';
          pctx.shadowBlur = 10; pctx.shadowOffsetX = 0; pctx.shadowOffsetY = 0;

          function drawPass(colorName, colorHex) {
            pctx.shadowColor = colorHex || '#fff';
            pctx.fillStyle = colorHex || '#fff';
            for (const pt of particles) {
              if (pt.alpha <= 0 || pt.color !== colorName) continue;
              pctx.globalAlpha = Math.max(0, pt.alpha);
              pctx.beginPath();
              pctx.arc(pt.x, pt.y, 1.6, 0, Math.PI * 2);
              pctx.fill();
            }
          }
          drawPass('red', COL_RED);
          drawPass('blue', COL_BLUE);

          requestAnimationFrame(frame);
        }
        requestAnimationFrame(frame);
      }

      function onWheel(e) {
        if (isFinalized) return;
        e.preventDefault();
        const dy = e.deltaY;
        if (p < 0.5) {
          setProgress(p + dy * 0.0018);
          startAutoAnimation();
        } else if (!autoAnimating) {
          startAutoAnimation();
        }
      }
      function onTouchMove(e) {
        if (isFinalized) return;
        const touch = e.touches[0];
        const currentY = touch.clientY;
        if (typeof onTouchMove.lastY !== "undefined") {
          const dy = onTouchMove.lastY - currentY;
          if (p < 0.5) {
            setProgress(p + dy * 0.0018 * 2);
            if (p >= 0.5) startAutoAnimation();
          } else if (!autoAnimating && dy > 0) {
            startAutoAnimation();
          }
        }
        onTouchMove.lastY = currentY;
      }
      function onTouchEnd() { if (!isFinalized) onTouchMove.lastY = undefined; }

      window.addEventListener('resize', resizeParticleCanvas);
      window.addEventListener('wheel', onWheel, { passive: false });
      window.addEventListener('touchstart', (e) => { onTouchMove.lastY = e.touches[0].clientY; });
      window.addEventListener('touchmove', onTouchMove, { passive: false });
      window.addEventListener('touchend', onTouchEnd);

      resizeParticleCanvas();
      setProgress(0);

      /* ============================================================
         🎸 Mars/Keys 사이 ‘현 시뮬레이터’ (신호선 대체)
         - 흰색 두툼한 선(드래그해서 당기기)
         - 빠른 왕복, 빠른 소실, 넓은 반경이 같이 움직임
         ============================================================ */
      const lineCanvas = document.getElementById('lineViz');
      const lctx = lineCanvas.getContext('2d');

      // 시각적 두께 & 높이(고정 오버레이)
      const LINE_THICK = 8;            // 선 두께(px)
      const LINE_H_DESKTOP = 72;        // 캔버스 높이(데스크탑)
      const LINE_H_MOBILE  = 96;        // 캔버스 높이(모바일)

      // 물리 파라미터(체감 튜닝)
      let tension    = 0.8;  // 빠른 왕복
      let loss       = 0.986; // 금방 소실(0.98~0.992)
      let SUBSTEPS   = 1;     // 프레임당 스텝
      let radiusPx   = 90;   // 넓게 당겨짐 반경
      let handPower  = 1.95;  // 손힘(최대 총힘)
      const K_MOUSE  = 1.5;   // 마우스-현 스프링
      const C_MOUSE  = 0.08;  // 마우스 감쇠
      const HARD_FACTOR = 0.4;// 장력↑ → 손힘↓
      const RELEASE_KICK = 0.25; // 놓을 때 반동

      // 상태
      let numPoints = 240;
      let dx = 1, invDX2 = 1;
      let initialY = 0;
      let string = [];

      class StringPoint {
        constructor(x, y){ this.x=x; this.y=y; this.oldY=y; this.acc=0; }
      }

      // 배치: 데스크톱은 Mars~Keys 사이, 모바일은 화면 중앙
      function placeLineViz() {
        const Wwin = window.innerWidth;
        const Hwin = window.innerHeight;
        const marsLine = document.getElementById('mars')?.parentElement;
        const keysLine = document.getElementById('keys')?.parentElement;
        if (!marsLine || !keysLine) return;

        let left, width, midY, cssHeight;
        if (IS_MOBILE) {
          width = Wwin * 0.6;
          left = (Wwin - width) / 2;
          midY = Hwin / 2;
          cssHeight = LINE_H_MOBILE;
        } else {
          const wrapRect = wrap.getBoundingClientRect();
          const wrapCS = getComputedStyle(wrap);
          const padLeft = parseFloat(wrapCS.paddingLeft) || 0;
          const additionalPadding = 250;
          left = wrapRect.left + padLeft + additionalPadding;

          const rightLimit = Math.min(keysLine.getBoundingClientRect().right, wrapRect.right - padLeft * 0.25);
          width = Math.max(260, rightLimit - left);
          const marsBottom = marsLine.getBoundingClientRect().bottom;
          const keysTop = keysLine.getBoundingClientRect().top;
          midY = (marsBottom + keysTop) / 2;
          cssHeight = LINE_H_DESKTOP;
        }

        // 스타일 & 실제 캔버스 크기
        lineCanvas.style.left = left + 'px';
        lineCanvas.style.top  = (midY - cssHeight/2) + 'px';
        lineCanvas.style.width  = width + 'px';
        lineCanvas.style.height = cssHeight + 'px';

        const dpr = Math.max(1, window.devicePixelRatio || 1);
        lineCanvas.width  = Math.floor(width  * dpr);
        lineCanvas.height = Math.floor(cssHeight * dpr);
        lctx.setTransform(dpr, 0, 0, dpr, 0, 0);

        // 문자열 재구성
        setupString(width, cssHeight);
      }

      function setupString(W, H){
        numPoints = Math.max(160, Math.min(360, Math.round(W / 4))); // 폭에 따른 해상도
        string = [];
        for (let i=0;i<numPoints;i++){
          const x = (i/(numPoints-1)) * W;
          string.push(new StringPoint(x, H/2));
        }
        initialY = H/2;
        dx = W / (numPoints - 1);
        invDX2 = 1 / (dx*dx);
      }

      // 드래그(마우스/터치)
      const mouse = { active:false, x:0, y:0 };
      function getPos(e){
        const r = lineCanvas.getBoundingClientRect();
        const cx = (e.clientX??e.touches?.[0].clientX) - r.left;
        const cy = (e.clientY??e.touches?.[0].clientY) - r.top;
        return {x:cx, y:cy};
      }

      lineCanvas.addEventListener('mousedown', e=>{
        const {x,y} = getPos(e);
        mouse.active = true; mouse.x = x; mouse.y = y;
      });
      window.addEventListener('mousemove', e=>{
        if (!mouse.active) return;
        const {x,y} = getPos(e);
        mouse.x = x; mouse.y = y;
      });
      window.addEventListener('mouseup', ()=>{
        if (!mouse.active) return;
        mouse.active = false;
        // 놓는 순간 반동
        for (let i=0;i<numPoints;i++){
          const disp = string[i].y - initialY;
          string[i].oldY = string[i].y + RELEASE_KICK * disp;
        }
      });

      // 터치
      lineCanvas.addEventListener('touchstart', e=>{
        const {x,y} = getPos(e); e.preventDefault();
        mouse.active = true; mouse.x = x; mouse.y = y;
      }, {passive:false});
      lineCanvas.addEventListener('touchmove', e=>{
        if (!mouse.active) return;
        const {x,y} = getPos(e); e.preventDefault();
        mouse.x = x; mouse.y = y;
      }, {passive:false});
      window.addEventListener('touchend', ()=>{
        if (!mouse.active) return;
        mouse.active = false;
        for (let i=0;i<numPoints;i++){
          const disp = string[i].y - initialY;
          string[i].oldY = string[i].y + RELEASE_KICK * disp;
        }
      });

      // 넓게 당기는 해닝 커널
      function hannWeight(dist, R){
        if (dist >= R) return 0;
        const r = dist / R;
        return 0.5 * (1 + Math.cos(Math.PI * r)); // 중앙1 → 가장자리0
      }

      function applyMouseForce(){
  if (!mouse.active) return;

  // 장력 높을수록 손힘 감소 (하지만 '총합 정규화'는 제거)
  const FcapBase = 12;                          // ← 세로로 확 당겨지게 하는 핵심 수치 (12~24로 취향 조절)
  const Fcap = FcapBase / (1 + HARD_FACTOR * tension);

  for (let i = 1; i < numPoints - 1; i++) {
    const p = string[i];
    const distX = Math.abs(p.x - mouse.x);
    const w = hannWeight(distX, radiusPx);
    if (w <= 0) continue;

    const vel = p.y - p.oldY;                   // Verlet 속도 근사
    const Fspring = K_MOUSE * (mouse.y - p.y);  // 마우스-현 스프링
    const Fdamp   = -C_MOUSE * vel;             // 손가락 댐핑
    let F = (Fspring + Fdamp) * w;

    // 🔑 '총합 정규화' 대신 포인트별 최대힘 클램프
    if (F >  Fcap * w) F =  Fcap * w;
    if (F < -Fcap * w) F = -Fcap * w;

    p.acc += F;
  }
}

      function physicsStep(){
        // 내부 장력(라플라시안, 해상도 보정)
        for (let i=1;i<numPoints-1;i++){
          const prev = string[i-1].y, curr = string[i].y, next = string[i+1].y;
          const lap = (prev - 2*curr + next) * invDX2;
          string[i].acc = tension * lap;
        }
        // 외력(마우스)
        applyMouseForce();

        // 양 끝 고정
        string[0].acc = 0; string[numPoints-1].acc = 0;

        for (let i=1;i<numPoints-1;i++){
          const p = string[i];
          const tempY = p.y;
          p.y = p.y*2 - p.oldY + p.acc; // dt=1
          p.oldY = tempY;
          // 손실(빠르게 소실)
          p.y = initialY + (p.y - initialY) * loss;
        }
        string[0].y = string[0].oldY = initialY;
        string[numPoints-1].y = string[numPoints-1].oldY = initialY;
      }

      function drawString(){
        const W = lineCanvas.clientWidth | 0;
        const H = lineCanvas.clientHeight | 0;
        if (!W || !H) return;

        lctx.clearRect(0,0,W,H);
        lctx.beginPath();
        lctx.strokeStyle = '#ffffff';
        lctx.lineWidth = LINE_THICK;
        lctx.lineCap = 'round';
        lctx.lineJoin = 'round';

        lctx.moveTo(string[0].x, string[0].y);
        for (let i=1;i<numPoints-2;i++){
          const xc = (string[i].x + string[i+1].x)/2;
          const yc = (string[i].y + string[i+1].y)/2;
          lctx.quadraticCurveTo(string[i].x, string[i].y, xc, yc);
        }
        lctx.quadraticCurveTo(string[numPoints-2].x, string[numPoints-2].y, string[numPoints-1].x, string[numPoints-1].y);
        lctx.stroke();
      }

      function animateString(){
        for (let s=0; s<SUBSTEPS; s++) physicsStep();
        drawString();
        requestAnimationFrame(animateString);
      }

      // 외부에서 호출되던 훅: 이제 현 시뮬레이터 시작만 담당
      function startLineEffect(){
        // nothing special; 이미 항상 실행해도 OK
      }

      // 초기 배치 & 리사이즈 핸들링
      const ro = new ResizeObserver(() => placeLineViz());
      ro.observe(document.body);
      ro.observe(document.getElementById('brand'));
      window.addEventListener('resize', placeLineViz);
      window.addEventListener('orientationchange', placeLineViz);
      if (document.fonts && document.fonts.ready) {
        document.fonts.ready.then(placeLineViz);
      }
      placeLineViz();
      requestAnimationFrame(animateString);
    })();
  </script>
</body>
</html>
