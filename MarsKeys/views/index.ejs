<!doctype html>
<html lang="ko">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mars Keys — Counter to Welcome</title>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Michroma&display=swap" rel="stylesheet">

  <style>
    :root{
      --bg:#0e1016; 
      --text:#eef2f8; 
      --muted:#9aa3b2;

      /* 글자 채움폭 = 정수 퍼센트 (퍼센트 표시와 1:1) */
      --fill-int: 0%;

      /* 컬러 팔레트 */
      --pastel-red-1:#ff8aa1; 
      --pastel-blue-1:#78aaff;
      --pastel-red-2:#ff6b7a; 
      --pastel-blue-2:#5ea1ff;
      --pastel-red-3:#ff9db0; 
      --pastel-blue-3:#b2d1ff;
    }
    *{box-sizing:border-box}
    body{
      margin:0; background:var(--bg); color:var(--text);
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
      overflow-x:hidden;
      overflow-y:hidden; /* 초기엔 잠금 → 애니 이후 auto */
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    /* ===== Hero ===== */
    .wrap{
      position:relative;
      min-height:100vh;
      padding:5vw;
      overflow:visible; /* descender/파티클 오버플로 허용 */
    }

    /* ===== 브랜드 텍스트 (단일 레이어 이중배경) =====
      위: 그라데이션(폭: --fill-int) / 아래: 흰색(전체)
      둘 다 text-clip → 레이어 어긋남 발생 불가
    */
    .brand{
      margin:0; line-height:1;  /* descender 보존 */
      font-family:"Michroma", system-ui, sans-serif;
    }
    .brand-line{
      display:block;
      font-size:clamp(56px,14vw,200px);
      padding-bottom:0.22em;       /* 'y' 같은 descender 여유 */
      overflow:visible;            /* 잘림 방지 */
      position:relative;
    }
    .ink{
      display:inline-block;
      color:transparent;
      -webkit-background-clip:text; background-clip:text;
      background-repeat:no-repeat,no-repeat;
      background-size: var(--fill-int) 100%, 100% 100%;
      background-image: var(--grad), linear-gradient(#fff,#fff);
      letter-spacing:0; /* 샘플링과 픽셀 정확히 일치시키기 */
    }
    .brand-line[data-c="red"]  .ink{ --grad: linear-gradient(180deg,var(--pastel-red-1),var(--pastel-red-2),var(--pastel-red-3)); }
    .brand-line[data-c="blue"] .ink{ --grad: linear-gradient(180deg,var(--pastel-blue-1),var(--pastel-blue-2),var(--pastel-blue-3)); }

    .tagline{
      font-size:clamp(16px,2.6vw,28px); font-weight:600; margin:1rem 0 0; color:var(--muted);
    }

    /* ===== 퍼센트: 브랜드 다음 줄, 우측 정렬 (데스크탑) ===== */
    #counter{
      display:block;
      margin-top:0.6rem;
      text-align:right;
      font-size:clamp(28px,7vw,96px);
      font-family:"Michroma", system-ui, sans-serif;
      font-weight:900;
      color:white;
      text-shadow:0 0 10px rgba(255,255,255,0.5);
      user-select:none;
      pointer-events:none;
      transition:opacity .6s ease;
    }

    /* ===== 파티클 Canvas (성능 최적화) ===== */
    #particleCanvas{
      position:absolute; inset:0; width:100%; height:100%;
      pointer-events:none; z-index:50;
    }

    /* ===== Welcome: fixed 오버레이 (절대 안 잘림) ===== */
    #welcome{
      position:fixed; left:50%; top:50%;
      transform:translate(-50%,-50%) scale(0.8);
      opacity:0;
      font-size:clamp(60px,12vw,180px);
      font-family:"Michroma", system-ui, sans-serif;
      color:white;
      letter-spacing:0.02em;
      transition:opacity 1s ease, transform 1s cubic-bezier(.2,.7,.2,1);
      will-change:opacity, transform;
      pointer-events:none;
      z-index:9999;
    }
    #welcome.visible{
      opacity:1;
      transform:translate(-50%,-50%) scale(1.45);
    }

    /* ===== 이후 스크롤 콘텐츠 ===== */
    .scrollable-content{
      padding:0 5vw 6rem; 
      text-align:center; 
      display:none; /* 터진 뒤 노출 */
      max-width:1200px; margin:0 auto;
    }
    .scrollable-content p{
      max-width:800px; margin:0 auto 1.5rem; line-height:1.8; 
      color:var(--muted); font-size:clamp(14px,2vw,18px);
    }
    .scrollable-content .temp-box{
      background:rgba(255,255,255,0.05); border-radius:12px; padding:2rem; margin:2rem auto; max-width:900px;
    }

    /* ===== 모바일: 퍼센트 오른쪽 하단 작게 ===== */
    @media (max-width: 768px){
      #counter{
        position:absolute; right:6vw; bottom:6vw;
        margin-top:0; text-align:right;
        font-size:clamp(24px,12vw,72px);
      }
    }
  </style>
</head>
<body>
  <main class="wrap" id="wrap">
    <canvas id="particleCanvas"></canvas>

    <h1 class="brand" id="brand">
      <span class="brand-line" data-c="red"><span class="ink" id="mars">Mars</span></span>
      <span class="brand-line" data-c="blue"><span class="ink" id="keys">Keys</span></span>
    </h1>

    <div id="counter" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">0%</div>

    <p class="tagline">Video Game Music Studio</p>
  </main>

  <div id="welcome">Welcome</div>

  <div id="scrollContent" class="scrollable-content">
    <p>게임 음악 스튜디오 Mars Keys에 오신 것을 환영합니다...</p>
    <div class="temp-box"><h3>우리의 서비스</h3><p>게임 OST, SFX, VO, 인터랙티브 음악 시스템...</p></div>
    <div class="temp-box"><h3>포트폴리오</h3><p>RPG, SF 어드벤처 등...</p></div>
    <div class="temp-box"><h3>문의</h3><p>협업 및 프로젝트 문의는 언제든지 환영합니다.</p></div>
    <div style="height:60vh;"></div>
    <div class="temp-box"><p>마지막 임시 콘텐츠</p></div>
  </div>

  <script>
  (function(){
    const html=document.documentElement;
    const body=document.body;
    const wrap=document.getElementById('wrap');
    const counterEl=document.getElementById("counter");
    const welcome=document.getElementById("welcome");
    const scrollContent=document.getElementById("scrollContent");
    const particleCanvas=document.getElementById('particleCanvas');
    const pctx=particleCanvas.getContext('2d');

    // ===== 진행도 (0~1): 퍼센트/채움 완전동기화 (정수 %) =====
    let p=0;              // 0.00 ~ 1.00
    const accel=0.0018;          // 스크롤 민감도
    let autoAnimating=false, isFinalized=false, particlesGenerated=false;

    // ===== 파티클 데이터 (최적화) =====
    let particles=[];
    const DENSITY=7;            // 픽셀 샘플 간격 (↑ → 입자↓ → 렉↓)
    const MAX_PARTICLES=1200;    // 최대 입자수 상한
    const GLOW_SMALL=8;          // 글로우
    const GLOW_BIG=18;
    
    function resizeParticleCanvas(){
      const dpr = Math.max(1, window.devicePixelRatio || 1);
      const rect = wrap.getBoundingClientRect();
      particleCanvas.width  = Math.floor(rect.width * dpr);
      particleCanvas.height = Math.floor(rect.height * dpr);
      particleCanvas.style.width  = rect.width + 'px';
      particleCanvas.style.height = rect.height + 'px';
      pctx.setTransform(dpr,0,0,dpr,0,0);
      pctx.clearRect(0,0,rect.width,rect.height);
    }

    function setProgress(v){
      p=Math.max(0,Math.min(1,v));
      const pct = Math.round(p*100);    // 정수 %
      html.style.setProperty('--fill-int', pct+'%'); // 텍스트 채움폭
      if(!isFinalized){
        counterEl.textContent = pct + "%";
        counterEl.setAttribute('aria-valuenow', String(pct));
      }
      if(p>=1 && !particlesGenerated && !isFinalized){
        generateParticles();  
        dissolveText();  
        showWelcome();
      }
    }

    function startAutoAnimation(){
      if(autoAnimating||isFinalized) return;
      autoAnimating=true;
      function step(){
        if(p<1){ p = Math.min(1, p+0.005); setProgress(p); requestAnimationFrame(step); }
        else { autoAnimating=false; }
      }
      step();
    }

    // ===== 텍스트 샘플링 (Canvas) — descender 완전 포함 =====
    function drawTextToCanvas(ctx, text, fontSize, fontFamily, letterSpacing){
      ctx.font = `${fontSize}px ${fontFamily}`;
      ctx.textBaseline = 'bottom'; // 바텀 기준으로 y를 포함하도록 수정
      ctx.fillStyle = 'white';
      
      const metrics = ctx.measureText(text);
      const textHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
      const textBaseline = metrics.actualBoundingBoxAscent;
      
      let x = 0;
      for(const ch of text){
        ctx.fillText(ch, x, textBaseline);
        x += ctx.measureText(ch).width + letterSpacing;
      }
      return { width: x, height: textHeight };
    }

    // ===== 파티클 생성 (Mars/Keys 각각 → 위치를 wrap 기준으로 투영) =====
    function generateParticles(){
      particlesGenerated=true; particles.length=0;

      const wrapRect = wrap.getBoundingClientRect();
      const lines = [
        { el: document.getElementById('mars').parentElement, color:'red',  textEl: document.getElementById('mars')  },
        { el: document.getElementById('keys').parentElement, color:'blue', textEl: document.getElementById('keys') }
      ];

      const off = document.createElement('canvas');
      const octx = off.getContext('2d', { willReadFrequently:true });

      lines.forEach(({el, color, textEl})=>{
        const rect = el.getBoundingClientRect();
        const style = getComputedStyle(textEl);
        const fontSize = parseFloat(style.fontSize);
        const fontFamily = style.fontFamily;
        const letterSpacing = parseFloat(style.letterSpacing || '0') || 0;

        // 폰트의 실제 높이를 계산하여 캔버스 크기 조정
        const textMetrics = octx.measureText(textEl.textContent);
        const textHeight = textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent;
        
        const w = Math.ceil(rect.width);
        const h = Math.ceil(textHeight + 10); // 여유분 추가
        
        off.width = Math.max(1, w);
        off.height = Math.max(1, h);
        octx.clearRect(0,0,off.width,off.height);

        drawTextToCanvas(octx, textEl.textContent, fontSize, fontFamily, letterSpacing);

        const img=octx.getImageData(0,0,off.width,off.height).data;
        for(let y=0;y<h;y+=DENSITY){
          for(let x=0;x<w;x+=DENSITY){
            const idx=(y*w+x)*4;
            if(img[idx+3]>128){
              particles.push({
                x: rect.left - wrapRect.left + x,
                y: rect.top  - wrapRect.top  + y,
                vx:(Math.random()-0.5)*1.4,
                vy:(Math.random()-0.5)*1.4,
                alpha:1,
                color
              });
            }
          }
        }
      });

      // 상한 초과 시 무작위 샘플링으로 렉 방지
      if(particles.length > MAX_PARTICLES){
        const sampled=[];
        for(let i=0;i<MAX_PARTICLES;i++){
          sampled.push(particles[(Math.random()*particles.length)|0]);
        }
        particles = sampled;
      }
    }

    // ===== 파티클 애니메이션 (Canvas, 글로우 최적화) =====
    function dissolveText(){
      // 텍스트 페이드아웃 (배경-클립 텍스트)
      document.querySelectorAll('.ink').forEach(el=>{
        el.style.transition='opacity .3s ease';
        el.style.opacity='0';
      });

      // wrap의 크기를 미리 계산하여 반복 호출 방지
      const wrapRect = wrap.getBoundingClientRect();
      const {width, height} = wrapRect;

      let frameId = null;

      function frame(){
        pctx.clearRect(0,0,width,height);

        // 외곽 글로우 (가벼운 방식): shadowBlur + lighter 블렌딩
        pctx.save();
        pctx.globalCompositeOperation = 'lighter';
        pctx.shadowBlur = GLOW_BIG;

        particles.forEach(pt=>{
          if(pt.alpha<=0) return;
          pctx.shadowColor = (pt.color==='red')
            ? getComputedStyle(document.documentElement).getPropertyValue('--pastel-red-1')
            : getComputedStyle(document.documentElement).getPropertyValue('--pastel-blue-1');
          pctx.globalAlpha = pt.alpha * 0.45;
          pctx.fillStyle = 'rgba(0,0,0,0)'; // 점만으로 글로우 트리거
          pctx.fillRect(pt.x, pt.y, 2, 2);
        });
        pctx.restore();

        // 본 파티클
        pctx.shadowBlur = GLOW_SMALL;
        particles.forEach(pt=>{
          if(pt.alpha<=0) return;
          const col = (pt.color==='red')
            ? getComputedStyle(document.documentElement).getPropertyValue('--pastel-red-1')
            : getComputedStyle(document.documentElement).getPropertyValue('--pastel-blue-1');
          pctx.shadowColor = col;
          pctx.globalAlpha = pt.alpha;
          pctx.fillStyle = col;
          pctx.fillRect(pt.x, pt.y, 2, 2);

          // 이동/감쇠 (살짝 가속)
          pt.x += pt.vx; pt.y += pt.vy;
          pt.vx *= 1.016; pt.vy *= 1.016;
          pt.alpha -= 0.0045;
        });

        if(particles.some(pt=>pt.alpha>0)) {
            frameId = requestAnimationFrame(frame);
        } else {
            // 애니메이션 종료 후 캔버스 초기화
            pctx.clearRect(0, 0, width, height);
            cancelAnimationFrame(frameId);
        }
      }
      requestAnimationFrame(frame);
    }

    function showWelcome(){
      setTimeout(()=>{ counterEl.style.opacity=0; }, 350);
      setTimeout(()=>{ welcome.classList.add("visible"); }, 900);
      setTimeout(()=>{
        scrollContent.style.display="block";
        isFinalized=true;  
        body.style.overflowY="auto";
      }, 1500);
    }

    // ===== 입력(휠/터치): 50%까지 수동, 50% 이상 자동 =====
    function onWheel(e){
      if(isFinalized) return;
      e.preventDefault();
      const dy=e.deltaY;
      if(p<0.5){
        setProgress(p+dy*accel);
        if(p>=0.5) startAutoAnimation();
      }else if(!autoAnimating){
        startAutoAnimation();
      }
    }
    function onTouchMove(e){
      if(isFinalized) return;
      const touch=e.touches[0]; 
      const currentY=touch.clientY;
      if(typeof onTouchMove.lastY!=="undefined"){
        const dy=onTouchMove.lastY-currentY;
        if(p<0.5){
          setProgress(p+dy*accel*2);
          if(p>=0.5) startAutoAnimation();
        }else if(!autoAnimating && dy>0){
          startAutoAnimation();
        }
      }
      onTouchMove.lastY=currentY;
    }
    function onTouchEnd(){ if(!isFinalized){ onTouchMove.lastY=undefined; } }

    // ===== 초기화 =====
    window.addEventListener('resize', resizeParticleCanvas);
    window.addEventListener('wheel',onWheel,{passive:false});
    window.addEventListener('touchstart',(e)=>{onTouchMove.lastY=e.touches[0].clientY;});
    window.addEventListener('touchmove',onTouchMove,{passive:false});
    window.addEventListener('touchend',onTouchEnd);

    resizeParticleCanvas();
    setProgress(0);
  })();
  </script>
</body>
</html>