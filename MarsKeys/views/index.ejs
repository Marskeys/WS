<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>MarsKeys Variable Grid</title>
    <link rel="stylesheet" href="/assets/css/marskeys.css" />
    <link rel="stylesheet" href="/assets/css/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link rel="stylesheet" href="/assets/css/table.css" />
    <link rel="stylesheet" href="/assets/css/table.css" />
  </head>
  <body>
    <%- include('partials/header') %>
    <main class="grid">

      <div class="grid-item ultrawide marskeys-intro">
        MarsKeys is where sound meets imagination.<br>
        Crafting expressive instruments, visuals, and ideas.<br>
        From virtual tools to sonic art — welcome aboard.
      </div>

      <div class="grid-item youtube-carousel hologram-border">
        <div class="corner-ribbon">YouTube</div>
        <div class="carousel-track">
      
          <!-- 🎬 플레이어 1 -->
          <div class="video-wrapper" data-video-id="dQw4w9WgXcQ" data-player-id="player1">
            <div class="video-thumbnail">
              <img class="thumbnail-img" src="https://img.youtube.com/vi/dQw4w9WgXcQ/hqdefault.jpg" alt="Video Thumbnail">
              <div class="play-button">
                <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="100" cy="100" r="90" fill="rgba(0,0,0,0.6)"/>
                  <polygon points="80,65 140,100 80,135" fill="#ffffff"/>
                </svg>
              </div>
            </div>
            <div id="player1" class="yt-player"></div>
          </div>
      
          <!-- 🎬 플레이어 2 -->
          <div class="video-wrapper" data-video-id="3tmd-ClpJxA" data-player-id="player2">
            <div class="video-thumbnail">
              <img class="thumbnail-img" src="https://img.youtube.com/vi/3tmd-ClpJxA/hqdefault.jpg" alt="Video Thumbnail">
              <div class="play-button">
                <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="100" cy="100" r="90" fill="rgba(0,0,0,0.6)"/>
                  <polygon points="80,65 140,100 80,135" fill="#ffffff"/>
                </svg>
              </div>
            </div>
            <div id="player2" class="yt-player"></div>
          </div>
      
        </div>
      </div>
      
      
      
      
      

      <div class="grid-item tall soundcloud-box hologram-border">      
        <iframe 
          width="100%" 
          height="300" 
          scrolling="no" 
          frameborder="no" 
          allow="autoplay"
          src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/209262931&color=%23ff5500&auto_play=false">
        </iframe>
      </div>


      <div class="grid-item big hologram-border"> <%- include('partials/table') %> </div>
      <div class="grid-item small hologram-border"><img src="/assets/images/hidog.png" alt="dog singing" /></div>
      <div class="grid-item hologram-border">Shop </div>
      <div class="grid-item wide hologram-border"> About Me </div>
  
      <div id="orbit-balls"></div>


 
    </main>

    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
      const players = {}; // player 객체 저장용
    
      // 유튜브 API가 로드되면 호출됨
      function onYouTubeIframeAPIReady() {
        document.querySelectorAll('.video-wrapper').forEach(wrapper => {
          const videoId = wrapper.dataset.videoId;
          const playerId = wrapper.dataset.playerId;
    
          players[playerId] = new YT.Player(playerId, {
            videoId: videoId,
            playerVars: {
              autoplay: 0,
              rel: 0,
              playsinline: 1
            },
            events: {
              'onReady': () => {
                const button = wrapper.querySelector('.play-button');
                button.addEventListener('click', () => {
                  wrapper.querySelector('.video-thumbnail').remove();
                  players[playerId].playVideo();
                });
              }
            }
          });
        });
      }

      const items = document.querySelectorAll('.grid-item');
const ballContainer = document.getElementById('orbit-balls');

// 공 5개, 색상 다 다르게
const colors = ['#00ffff', '#ff00ff', '#ffff00', '#00ff00', '#ff6600'];
const balls = [];

colors.forEach((color, i) => {
  const ball = document.createElement('div');
  ball.className = 'orbit-ball';
  ball.style.background = color;
  ball.style.zIndex = 1000 + i;

  // 꼬리 색도 각 공 색으로
  ball.style.setProperty('--glow-color', color);
  ball.style.boxShadow = `0 0 8px ${color}, 0 0 15px ${color}`;
  ball.style.setProperty('--glow-shadow', color);

  const after = document.createElement('style');
  document.head.appendChild(after);
  after.sheet.insertRule(`
    .orbit-ball:nth-child(${i + 1})::after {
      background: ${color};
    }
  `);

  ballContainer.appendChild(ball);
  balls.push(ball);
});

function getBoxPath(box) {
  const rect = box.getBoundingClientRect();
  const style = window.getComputedStyle(box);
  const radius = parseFloat(style.borderRadius || '0');

  const basePadding = 4;
  const hologramFix = box.classList.contains('hologram-border') ? 6 : 0;
  const radiusFix = 3;

  const x0 = rect.left + window.scrollX - basePadding + hologramFix;
  const y0 = rect.top + window.scrollY - basePadding + hologramFix;
  const w = rect.width + basePadding * 2 - hologramFix * 2;
  const h = rect.height + basePadding * 2 - hologramFix * 2;

  const stepsPerCorner = 6;
  const path = [];

  // ↗️ 좌상단 → 우상단 (위쪽 직선)
  path.push([x0 + radius, y0]);
  path.push([x0 + w - radius, y0]);

  // ⤴️ 우상단 곡선 (0 → 90도)
  for (let i = 0; i < stepsPerCorner; i++) {
    const angle = (Math.PI / 2) * (i / (stepsPerCorner - 1));
    const cx = x0 + w - radius;
    const cy = y0 + radius;
    path.push([
      cx + radius * Math.cos(angle),
      cy - radius * Math.sin(angle),
    ]);
  }

  // ↘️ 오른쪽 직선
  path.push([x0 + w, y0 + radius]);
  path.push([x0 + w, y0 + h - radius]);

  // ⤵️ 우하단 곡선 (90 → 180도)
  for (let i = 0; i < stepsPerCorner; i++) {
    const angle = (Math.PI / 2) * (i / (stepsPerCorner - 1));
    const cx = x0 + w - radius;
    const cy = y0 + h - radius;
    path.push([
      cx + radius * Math.sin(angle),
      cy + radius * Math.cos(angle),
    ]);
  }

  // ↙️ 아래쪽 직선
  path.push([x0 + w - radius, y0 + h]);
  path.push([x0 + radius, y0 + h]);

  // ⤶ 좌하단 곡선 (180 → 270도)
  for (let i = 0; i < stepsPerCorner; i++) {
    const angle = (Math.PI / 2) * (i / (stepsPerCorner - 1));
    const cx = x0 + radius;
    const cy = y0 + h - radius;
    path.push([
      cx - radius * Math.cos(angle),
      cy + radius * Math.sin(angle),
    ]);
  }

  // ↖️ 왼쪽 직선
  path.push([x0, y0 + h - radius]);
  path.push([x0, y0 + radius]);

  // ⤷ 좌상단 곡선 (270 → 360도)
  for (let i = 0; i < stepsPerCorner; i++) {
    const angle = (Math.PI / 2) * (i / (stepsPerCorner - 1));
    const cx = x0 + radius;
    const cy = y0 + radius;
    path.push([
      cx - radius * Math.sin(angle),
      cy - radius * Math.cos(angle),
    ]);
  }

  return path;
}




function moveBall(ball, path, next) {
  let i = 0;
  const steps = 120; // 더 부드럽고 천천히
  function moveSegment() {
    if (i >= path.length - 1) return next();
    const [x1, y1] = path[i];
    const [x2, y2] = path[i + 1];
    const dx = (x2 - x1) / steps;
    const dy = (y2 - y1) / steps;
    let step = 0;

    function stepMove() {
      if (step <= steps) {
        ball.style.left = (x1 + dx * step) + 'px';
        ball.style.top = (y1 + dy * step) + 'px';
        createTrail(x1 + dx * step, y1 + dy * step, ball.style.background);
        step++;
        requestAnimationFrame(stepMove);
      } else {
        i++;
        moveSegment();
      }
    }

    stepMove();
  }

  moveSegment();
}

function startLoop(ball, offset = 0) {
  let current = offset % items.length;

  function loop() {
    const box = items[current];
    const path = getBoxPath(box);
    moveBall(ball, path, () => {
      current = (current + 1) % items.length;
      setTimeout(loop, 300);
    });
  }

  loop();
}

// 시작
balls.forEach((ball, i) => {
  setTimeout(() => startLoop(ball, i), i * 1200); // 시간차 출발
});

function createTrail(x, y, color) {
  const radius = 3; // 공의 절반 크기 (공 중심)

  const trail = document.createElement('div');
  trail.style.position = 'absolute';
  trail.style.left = `${x + radius}px`;  // 항상 공 중심!
  trail.style.top = `${y + radius}px`;
  trail.style.width = '2px';
  trail.style.height = '2px';
  trail.style.borderRadius = '50%';
  trail.style.background = color;
  trail.style.opacity = '0.6';
  trail.style.pointerEvents = 'none';
  trail.style.zIndex = '1';
  trail.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';

  document.body.appendChild(trail);

  requestAnimationFrame(() => {
    trail.style.opacity = '0';
    trail.style.transform = 'scale(0.2)';
  });

  setTimeout(() => {
    trail.remove();
  }, 600);
}



    </script>
    
    
    

  </body>
</html>
