<header class="sticky-header" id="stickyHeader">
  <nav class="mk-nav">
    <a href="#youtube" class="nav-icon" title="YouTube">
      <i class="fab fa-youtube"></i>
    </a>
    <a href="#soundcloud" class="nav-icon" title="SoundCloud">
      <i class="fab fa-soundcloud"></i>
    </a>
    <a href="#instagram" class="nav-icon" title="Instagram">
      <i class="fab fa-instagram"></i>
    </a>
    <a href="#lessons" class="nav-icon" title="교육">
      <i class="fas fa-chalkboard-teacher"></i>
    </a>
    <a href="#experiments" class="nav-icon" title="실험">
      <i class="fas fa-vial"></i>
    </a>
  </nav>
</header>

<header class="mk-header" id="mainHeader">
  <div class="logo-wrapper" id="logoWrapper">
      <object id="logo" type="image/svg+xml" data="/assets/images/logo.svg"></object>
  </div>

  <nav class="mk-nav">
    <a href="#youtube" class="nav-icon" title="YouTube">
      <i class="fab fa-youtube"></i>
    </a>
    <a href="#soundcloud" class="nav-icon" title="SoundCloud">
      <i class="fab fa-soundcloud"></i>
    </a>
    <a href="#instagram" class="nav-icon" title="Instagram">
      <i class="fab fa-instagram"></i>
    </a>
    <a href="#lessons" class="nav-icon" title="교육">
      <i class="fas fa-chalkboard-teacher"></i>
    </a>
    <a href="#experiments" class="nav-icon" title="실험">
      <i class="fas fa-vial"></i>
    </a>
  </nav>
</header>



<script>
  const obj = document.getElementById('logo');
  obj.addEventListener('load', () => {
    const svgDoc = obj.contentDocument;

    const getAll = (prefix, count) =>
      Array.from({ length: count }, (_, i) => svgDoc.getElementById(`${prefix}${i + 1}`)).filter(Boolean);

    const fadeIn = (elements, duration = 1000, baseColor = [255, 255, 255]) => {
      elements.forEach(el => el.setAttribute('fill', `rgba(${baseColor[0]},${baseColor[1]},${baseColor[2]},0)`));
      let t = 0;
      const step = 16 / duration;
      const animate = () => {
        t += step;
        if (t > 1) t = 1;
        const [r, g, b] = baseColor;
        const color = `rgba(${r},${g},${b},${t})`;
        elements.forEach(el => el.setAttribute('fill', color));
        if (t < 1) requestAnimationFrame(animate);
      };
      animate();
    };

    // ✅ 필터 정의
    const defs = svgDoc.querySelector('defs') || svgDoc.createElementNS("http://www.w3.org/2000/svg", "defs");

    const glowBlue = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    glowBlue.setAttribute("id", "glow-blue");
    glowBlue.innerHTML = `
      <feDropShadow dx="0" dy="0" stdDeviation="4" flood-color="deepskyblue" flood-opacity="1"/>
    `;
    defs.appendChild(glowBlue);

    const glowPurple = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    glowPurple.setAttribute("id", "glow-purple");
    glowPurple.innerHTML = `
      <feDropShadow dx="0" dy="0" stdDeviation="4" flood-color="#a066ff" flood-opacity="1"/>
    `;
    defs.appendChild(glowPurple);

    svgDoc.documentElement.insertBefore(defs, svgDoc.documentElement.firstChild);

    // ✅ human 계열 페이드인
    const humans = getAll('human', 5);
    fadeIn(humans, 1000, [255, 255, 255]);

    // ✅ eyebrow 페이드인 + 애니메이션 루프
    const eyebrow = svgDoc.getElementById('eyebrow');
    if (eyebrow) {
      fadeIn([eyebrow], 1000, [255, 255, 255]);
      const move = svgDoc.createElementNS("http://www.w3.org/2000/svg", "animateTransform");
      move.setAttribute('attributeName', 'transform');
      move.setAttribute('type', 'translate');
      move.setAttribute('values', '0,-2; 0,2; 0,-2');
      move.setAttribute('dur', '1s');
      move.setAttribute('repeatCount', 'indefinite');
      eyebrow.appendChild(move);
    }

/const glow = svgDoc.getElementById('glow');
if (glow) {
  const children = glow.querySelectorAll('*');

  let hue = 240; // 시작 색상 (보라 계열 추천)
  const colorAt = (t) => `hsla(${hue}, 100%, 85%, ${t})`;

  // 페이드인
  let t = 0;
  const duration = 1000;
  const step = 16 / duration;
  const fadeIn = () => {
    t += step;
    if (t > 1) t = 1;

    const color = colorAt(t);
    children.forEach(el => el.setAttribute('fill', color));
    glow.setAttribute('fill', color);

    if (t < 1) {
      requestAnimationFrame(fadeIn);
    } else {
      startHologram();
    }
  };
  fadeIn();

  // 루프: 색상만 계속 돌림
  const startHologram = () => {
    const loop = () => {
      hue = (hue + 0.9) % 360;
      const color = `hsl(${hue}, 100%, 85%)`;
      children.forEach(el => el.setAttribute('fill', color));
      glow.setAttribute('fill', color);
      requestAnimationFrame(loop);
    };
    loop();
  };
}

    // ✅ keys: 연보라 fill + 보라 glow + 페이드인
    const keys = getAll('keys', 4);
    keys.forEach(el => el.setAttribute('filter', 'url(#glow-purple)'));
    fadeIn(keys, 1000, [226, 210, 255]);

    // ✅ sonic + atelier: 하얀 fill 페이드인, 글로우 없음
    fadeIn([...getAll('sonic', 5), ...getAll('atelier', 7)], 1000, [255, 255, 255]);
  });
</script>








<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mainHeader = document.querySelector('.mk-header');
    const stickyHeader = document.querySelector('.sticky-header');

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          // 메인 헤더가 보이면 스티키 숨기기
          stickyHeader.classList.remove('show');
        } else {
          // 메인 헤더가 화면에서 사라지면 스티키 보이기
          stickyHeader.classList.add('show');
        }
      },
      {
        root: null,
        threshold: 0,
      }
    );

    if (mainHeader) observer.observe(mainHeader);
  });
</script>
