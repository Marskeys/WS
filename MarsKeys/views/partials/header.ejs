<header class="sticky-header" id="stickyHeader">
  <nav class="mk-nav">
    <a href="#youtube" class="nav-icon" title="YouTube">
      <i class="fab fa-youtube"></i>
    </a>
    <a href="#soundcloud" class="nav-icon" title="SoundCloud">
      <i class="fab fa-soundcloud"></i>
    </a>
    <a href="#instagram" class="nav-icon" title="Instagram">
      <i class="fab fa-instagram"></i>
    </a>
    <a href="#lessons" class="nav-icon" title="교육">
      <i class="fas fa-chalkboard-teacher"></i>
    </a>
    <a href="#experiments" class="nav-icon" title="실험">
      <i class="fas fa-vial"></i>
    </a>
  </nav>
</header>

<header class="mk-header" id="mainHeader">
  <div class="logo-wrapper" id="logoWrapper">
      <object id="logo" type="image/svg+xml" data="/assets/images/logo.svg"></object>
  </div>

  <nav class="mk-nav">
    <a href="#youtube" class="nav-icon" title="YouTube">
      <i class="fab fa-youtube"></i>
    </a>
    <a href="#soundcloud" class="nav-icon" title="SoundCloud">
      <i class="fab fa-soundcloud"></i>
    </a>
    <a href="#instagram" class="nav-icon" title="Instagram">
      <i class="fab fa-instagram"></i>
    </a>
    <a href="#lessons" class="nav-icon" title="교육">
      <i class="fas fa-chalkboard-teacher"></i>
    </a>
    <a href="#experiments" class="nav-icon" title="실험">
      <i class="fas fa-vial"></i>
    </a>
  </nav>
</header>



<script>
  const obj = document.getElementById('logo');
  obj.addEventListener('load', () => {
    const svgDoc = obj.contentDocument;

    const whole = svgDoc.getElementById('whole');
    const eyebrow = svgDoc.getElementById('eyebrow');

    // ✅ 필터 정의 추가
    const defs = svgDoc.querySelector('defs') || svgDoc.createElementNS("http://www.w3.org/2000/svg", "defs");

    const makeGlowFilter = (id, color, stdDev = 3) => {
      const filter = svgDoc.createElementNS("http://www.w3.org/2000/svg", "filter");
      filter.setAttribute("id", id);
      filter.innerHTML = `
        <feDropShadow dx="0" dy="0" stdDeviation="${stdDev}" flood-color="${color}" flood-opacity="1"/>
      `;
      return filter;
    };

    defs.appendChild(makeGlowFilter("glow-white", "white"));
    defs.appendChild(makeGlowFilter("glow-red", "red"));
    defs.appendChild(makeGlowFilter("glow-yellow", "yellow"));

    if (!svgDoc.querySelector('defs')) {
      svgDoc.documentElement.insertBefore(defs, svgDoc.documentElement.firstChild);
    }

    // ✅ whole 처리 (검정 페이드인 + 흰색 stroke)
    if (whole) {
      const paths = whole.querySelectorAll('*');
      let t = 0;

      function animateFadeInOnce() {
        t += 0.02;
        if (t >= 1) t = 1;
        else requestAnimationFrame(animateFadeInOnce);

        const alpha = t;
        const color = `rgba(0, 0, 0, ${alpha})`;

        paths.forEach(el => {
          el.setAttribute('fill', color);
          el.setAttribute('stroke', 'white');
          el.setAttribute('stroke-width', '0.5');
        });

        whole.setAttribute('fill', color);
        whole.setAttribute('stroke', 'white');
        whole.setAttribute('stroke-width', '0.5');
      }

      animateFadeInOnce();
    }

    // ✅ eyebrow 위아래 애니메이션
    if (eyebrow) {
      const animate = svgDoc.createElementNS("http://www.w3.org/2000/svg", "animateTransform");
      animate.setAttribute("attributeName", "transform");
      animate.setAttribute("type", "translate");
      animate.setAttribute("values", "0,-2; 0,2; 0,-2");
      animate.setAttribute("dur", "1s");
      animate.setAttribute("repeatCount", "indefinite");
      eyebrow.appendChild(animate);
    }

    // ✅ glow 요소들 필터 적용
    const redGlow = svgDoc.getElementById('glow');
    if (redGlow) redGlow.setAttribute('filter', 'url(#glow-red)');

    // ✅ keys 요소들
    for (let i = 1; i <= 4; i++) {
      const key = svgDoc.getElementById(`keys_${i}`);
      if (key) key.setAttribute('filter', 'url(#glow-yellow)');
    }

    // ✅ atelier 요소들
    for (let i = 1; i <= 7; i++) {
      const at = svgDoc.getElementById(`atelier_${i}`);
      if (at) at.setAttribute('filter', 'url(#glow-white)');
    }
  });
</script>
