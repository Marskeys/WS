<header class="sticky-header" id="stickyHeader">
  <nav class="mk-nav">
    <a href="#youtube" class="nav-icon" title="YouTube">
      <i class="fab fa-youtube"></i>
    </a>
    <a href="#soundcloud" class="nav-icon" title="SoundCloud">
      <i class="fab fa-soundcloud"></i>
    </a>
    <a href="#instagram" class="nav-icon" title="Instagram">
      <i class="fab fa-instagram"></i>
    </a>
    <a href="#lessons" class="nav-icon" title="교육">
      <i class="fas fa-chalkboard-teacher"></i>
    </a>
    <a href="#experiments" class="nav-icon" title="실험">
      <i class="fas fa-vial"></i>
    </a>
  </nav>
</header>

<header class="mk-header" id="mainHeader">
  <div class="logo-wrapper" id="logoWrapper">
      <object id="logo" type="image/svg+xml" data="/assets/images/logo.svg"></object>
  </div>

  <nav class="mk-nav">
    <a href="#youtube" class="nav-icon" title="YouTube">
      <i class="fab fa-youtube"></i>
    </a>
    <a href="#soundcloud" class="nav-icon" title="SoundCloud">
      <i class="fab fa-soundcloud"></i>
    </a>
    <a href="#instagram" class="nav-icon" title="Instagram">
      <i class="fab fa-instagram"></i>
    </a>
    <a href="#lessons" class="nav-icon" title="교육">
      <i class="fas fa-chalkboard-teacher"></i>
    </a>
    <a href="#experiments" class="nav-icon" title="실험">
      <i class="fas fa-vial"></i>
    </a>
  </nav>
</header>



<script>
  const obj = document.getElementById('logo');
  obj.addEventListener('load', () => {
    const svgDoc = obj.contentDocument;

    const whole = svgDoc.getElementById('whole');
    const eyebrow = svgDoc.getElementById('eyebrow');
    const glow = svgDoc.getElementById('glow');

    const defs = svgDoc.querySelector('defs') || svgDoc.createElementNS("http://www.w3.org/2000/svg", "defs");

    // ✅ 고급 블루 글로우 필터
    const glowFilter = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    glowFilter.setAttribute("id", "glow-gradient-blue");
    glowFilter.innerHTML = `
      <feGaussianBlur in="SourceGraphic" stdDeviation="4" result="blur"/>
      <feFlood flood-color="deepskyblue" flood-opacity="1" result="flood"/>
      <feComposite in="flood" in2="blur" operator="in" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    `;
    defs.appendChild(glowFilter);

    // ✅ keys용 푸른 글로우 필터
    const makeGlowFilter = (id, color, stdDev = 3) => {
      const filter = svgDoc.createElementNS("http://www.w3.org/2000/svg", "filter");
      filter.setAttribute("id", id);
      filter.innerHTML = `
        <feDropShadow dx="0" dy="0" stdDeviation="${stdDev}" flood-color="${color}" flood-opacity="1"/>
      `;
      return filter;
    };
    defs.appendChild(makeGlowFilter("glow-blue-static", "deepskyblue", 3));

    svgDoc.documentElement.insertBefore(defs, svgDoc.documentElement.firstChild);

    // ✅ keys 제외 목록
    const excludedKeys = ['keys_1', 'keys_2', 'keys_3', 'keys_4'];

    // ✅ whole 전체를 페이드인 (keys는 제외)
    let wholeVisible = false;
    if (whole) {
      const paths = whole.querySelectorAll('*');
      let t = 0;

      // 모두 투명하게 시작 (keys 제외)
      paths.forEach(el => {
        if (!excludedKeys.includes(el.id)) {
          el.setAttribute('fill', 'rgba(255,255,255,0)');
        }
      });

      if (glow) {
        const glowPaths = glow.querySelectorAll('*');
        glowPaths.forEach(el => el.setAttribute('fill', 'rgba(255,255,255,0)'));
      }

      function animateFadeInOnce() {
        t += 0.015;
        if (t >= 1) {
          t = 1;
          wholeVisible = true;
        } else {
          requestAnimationFrame(animateFadeInOnce);
        }

        const alpha = t;
        const fillColor = `rgba(255, 255, 255, ${alpha})`;

        paths.forEach(el => {
          if (!excludedKeys.includes(el.id)) {
            el.setAttribute('fill', fillColor);
          }
        });

        if (glow) {
          const glowPaths = glow.querySelectorAll('*');
          glowPaths.forEach(el => el.setAttribute('fill', fillColor));
        }
      }

      animateFadeInOnce();
    }

    // ✅ eyebrow 위아래 애니메이션
    if (eyebrow) {
      const animate = svgDoc.createElementNS("http://www.w3.org/2000/svg", "animateTransform");
      animate.setAttribute("attributeName", "transform");
      animate.setAttribute("type", "translate");
      animate.setAttribute("values", "0,-2; 0,2; 0,-2");
      animate.setAttribute("dur", "1s");
      animate.setAttribute("repeatCount", "indefinite");
      eyebrow.appendChild(animate);
    }

    // ✅ glow 애니메이션 (fill → 푸르게 점멸)
    if (glow) {
      glow.setAttribute('filter', 'url(#glow-gradient-blue)');
      let increasing = true;
      let glowT = 0;

      function animateGlowPulse() {
        if (!wholeVisible) {
          requestAnimationFrame(animateGlowPulse);
          return;
        }

        glowT += increasing ? 0.004 : -0.004;
        if (glowT >= 1) {
          glowT = 1;
          increasing = false;
        } else if (glowT <= 0) {
          glowT = 0;
          increasing = true;
        }

        const r = Math.floor(200 - glowT * 20); // 200 → 180
        const g = Math.floor(230 - glowT * 10); // 230 → 220
        const b = 255;
        const fillColor = `rgb(${r}, ${g}, ${b})`;

        const glowPaths = glow.querySelectorAll('*');
        glowPaths.forEach(el => el.setAttribute('fill', fillColor));
      }

      animateGlowPulse();
    }

    // ✅ keys_1~4: 항상 푸른 글로우 + 연보라 fill
    for (let i = 1; i <= 4; i++) {
      const el = svgDoc.getElementById(`keys_${i}`);
      if (el) {
        el.setAttribute('filter', 'url(#glow-blue-static)');
        el.setAttribute('fill', '#dcd0ff'); // 연보라
      }
    }

    // ✅ sonic, atelier: 흰색
    const applyWhiteFill = (prefix, count) => {
      for (let i = 1; i <= count; i++) {
        const el = svgDoc.getElementById(`${prefix}_${i}`);
        if (el) el.setAttribute('fill', 'white');
      }
    };
    applyWhiteFill('sonic', 5);
    applyWhiteFill('atelier', 7);
  });
</script>





<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mainHeader = document.querySelector('.mk-header');
    const stickyHeader = document.querySelector('.sticky-header');

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          // 메인 헤더가 보이면 스티키 숨기기
          stickyHeader.classList.remove('show');
        } else {
          // 메인 헤더가 화면에서 사라지면 스티키 보이기
          stickyHeader.classList.add('show');
        }
      },
      {
        root: null,
        threshold: 0,
      }
    );

    if (mainHeader) observer.observe(mainHeader);
  });
</script>
