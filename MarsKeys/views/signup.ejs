<!DOCTYPE html>
<html lang="ko">
<head>
  <title>회원가입 | BlindLove</title>
  <link rel="stylesheet" href="/assets/css/signup.css" />
  <%- include('partials/head') %> 
  <style>
    .notice-text {
      text-align: center;
      color: #c00;
      font-size: 1rem;
      margin-bottom: 1.5rem;
      font-weight: bold;
    }

    .notice-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding: 0 0.5rem;
}

.notice-text {
  color: #c00;
  font-weight: bold;
  font-size: 1rem;
  margin: 0;
}

.back-home-link {
  font-size: 0.9rem;
  color: #0077cc;
  text-decoration: none;
}

.back-home-link:hover {
  text-decoration: underline;
}
  </style>
</head>
<body class="no-fixed-footer">

  <div class="signup-container hologram-border">
    <div class="glow-ball"></div>
    <div class="logo-wrap" id="logoWrap">
      <object id="logo" type="image/svg+xml" data="/assets/images/signup.svg"></object>
    </div>

    <div class="notice-wrap">
      <h2 class="notice-text">아직 서비스 시작 전입니다</h2>
      <a href="/" class="back-home-link">홈페이지로 돌아가기</a>
    </div>

    <% if (error) { %>
      <div class="error-msg"><%= error %></div>
    <% } %>

    <form action="/signup" method="POST" onsubmit="return false;">
        <div class="input-with-button">
          <input type="text" name="username" placeholder="닉네임" required disabled />
          <button type="button" class="check-btn" disabled>중복확인</button>
        </div>
        <div id="nickname-msg" class="check-msg"></div>
      
        <div class="input-with-button">
          <input type="text" name="user_id" placeholder="아이디" required disabled />
          <button type="button" class="check-btn" disabled>중복확인</button>
        </div>
        <div id="id-msg" class="check-msg"></div>
      
        <input type="email" name="email" placeholder="이메일 (선택사항)" disabled />
        <input type="password" name="password" placeholder="비밀번호" required disabled />
        <button type="submit" class="signup-btn" disabled>가입하기</button>
    </form>

    <div class="extra">
      이미 계정이 있으신가요? <a href="/login">로그인</a>
    </div>
  </div>

  <%- include('partials/footer') %>
  <%- include('partials/scripts') %>

  <script>
    function checkId() {
      return; // 서비스 비활성화 중
    }

    function checkNickname() {
      return; // 서비스 비활성화 중
    }
  </script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const ball = document.querySelector(".glow-ball");
    const container = document.querySelector(".signup-container");
  
    if (!ball || !container) return;
  
    container.style.position = 'relative';
  
    let t = 0;
    const speed = 5; // 속도 조절
    const offsetX = -6; // x축 이동량
    const offsetY = -6; // y축 이동량

    // ✅ 궤도 위치 계산 함수
    const getPosition = (t) => {
      const w = container.clientWidth - 2.5;
      const h = container.clientHeight - 3;
      const perimeter = 2 * (w + h);
      const dist = (t * speed) % perimeter;

      let x, y;
      if (dist < w) {
        x = dist;
        y = 0;
      } else if (dist < w + h) {
        x = w;
        y = dist - w;
      } else if (dist < 2 * w + h) {
        x = w - (dist - (w + h));
        y = h;
      } else {
        x = 0;
        y = h - (dist - (2 * w + h));
      }

      return { x, y };
    };

// ✅ 처음 위치 한번 미리 지정
const { x: initX, y: initY } = getPosition(t);
ball.style.left = `${initX + offsetX}px`;
ball.style.top = `${initY + offsetY}px`;

// 💡 다음 렌더 프레임에서 opacity 주기
requestAnimationFrame(() => {
  ball.style.opacity = 1; // ✅ 초기 위치 지정 후 공 나타나게
});

    // ✅ 애니메이션 시작
    const updatePosition = () => {
      const { x, y } = getPosition(t);
      ball.style.left = `${x + offsetX}px`;
      ball.style.top = `${y + offsetY}px`;

      t += 1;
      requestAnimationFrame(updatePosition);
    };

    updatePosition();
  });
</script>

<script>
  const obj = document.getElementById('');
  obj.addEventListener('load', () => {
    const svgDoc = obj.contentDocument;

    const getAll = (prefix, count) =>
      Array.from({ length: count }, (_, i) => svgDoc.getElementById(`${prefix}${i + 1}`)).filter(Boolean);

    const fadeIn = (elements, duration = 1000, baseColor = [255, 255, 255]) => {
      elements.forEach(el => el.setAttribute('fill', `rgba(${baseColor[0]},${baseColor[1]},${baseColor[2]},0)`));
      let t = 0;
      const step = 16 / duration;
      const animate = () => {
        t += step;
        if (t > 1) t = 1;
        const [r, g, b] = baseColor;
        const color = `rgba(${r},${g},${b},${t})`;
        elements.forEach(el => el.setAttribute('fill', color));
        if (t < 1) requestAnimationFrame(animate);
      };
      animate();
    };

    // ✅ 필터 정의
    const defs = svgDoc.querySelector('defs') || svgDoc.createElementNS("http://www.w3.org/2000/svg", "defs");

    const glowBlue = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    glowBlue.setAttribute("id", "glow-blue");
    glowBlue.innerHTML = `
      <feDropShadow dx="0" dy="0" stdDeviation="11" flood-color="deepskyblue" flood-opacity="1"/>
    `;
    defs.appendChild(glowBlue);

    const glowPurple = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    glowPurple.setAttribute("id", "glow-purple");
    glowPurple.innerHTML = `
      <feDropShadow dx="0" dy="0" stdDeviation="4" flood-color="#a066ff" flood-opacity="1"/>
    `;
    defs.appendChild(glowPurple);

    svgDoc.documentElement.insertBefore(defs, svgDoc.documentElement.firstChild);

    // ✅ human 계열 페이드인
    const humans = getAll('human', 5);
    fadeIn(humans, 1000, [255, 255, 255]);

    // ✅ signup1~4 페이드인 (기존 sonic + atelier 대체)
    const signups = getAll('signup', 4);
    fadeIn(signups, 1000, [255, 255, 255]);

    // ✅ eyebrow 페이드인 + 애니메이션 루프
    const eyebrow = svgDoc.getElementById('eyebrow');
    if (eyebrow) {
      fadeIn([eyebrow], 1000, [255, 255, 255]);

      const move = svgDoc.createElementNS("http://www.w3.org/2000/svg", "animateTransform");
      move.setAttribute('attributeName', 'transform');
      move.setAttribute('type', 'translate');
      move.setAttribute('dur', '2s');
      move.setAttribute('repeatCount', 'indefinite');
      move.setAttribute('values', '0,0;0,0;0,0;0,-2;0,2;0,-2;0,0;0,0');
      move.setAttribute('keyTimes', '0;0.1;0.2;0.3;0.5;0.7;0.9;1');
      move.setAttribute('calcMode', 'spline');
      move.setAttribute('keySplines', '0 0 1 1; 0.4 0 0.6 1; 0.4 0 0.6 1; 0.4 0 0.6 1; 0.4 0 0.6 1; 0.4 0 0.6 1; 0.4 0 0.6 1');
      eyebrow.appendChild(move);
    }

    // ✅ glow: 페이드인 후 랜덤 홀로그램 or 회색 반복
    const glow = svgDoc.getElementById('glow');
    if (glow) {
      const children = glow.querySelectorAll('*');
      const darkColor = 'rgba(34,34,34,0)';
      children.forEach(el => el.setAttribute('fill', darkColor));
      glow.setAttribute('fill', darkColor);

      let t = 0;
      const duration = 1000;
      const step = 16 / duration;
      const fadeIn = () => {
        t += step;
        if (t > 1) t = 1;
        const color = `rgba(34,34,34,${t})`;
        children.forEach(el => el.setAttribute('fill', color));
        glow.setAttribute('fill', color);
        if (t < 1) {
          requestAnimationFrame(fadeIn);
        } else {
          startRandomBlink();
        }
      };
      fadeIn();

      const hologramColors = [
        '#222', '#222', '#222',
        'hsl(45, 100%, 65%)',
        'rgba(255,255,255,1)',
        'hsl(100, 100%, 85%)',
        'hsl(210, 100%, 85%)',
        'hsl(280, 100%, 85%)',
        'hsl(340, 100%, 85%)'
      ];

      const startRandomBlink = () => {
        const updateColor = () => {
          const color = hologramColors[Math.floor(Math.random() * hologramColors.length)];
          const isGlow = color !== '#222';
          if (isGlow) {
            glow.setAttribute('filter', 'url(#glow-blue)');
          } else {
            glow.removeAttribute('filter');
          }

          children.forEach(el => el.setAttribute('fill', color));
          glow.setAttribute('fill', color);

          const delay = 600 + Math.random() * 2000;
          setTimeout(updateColor, delay);
        };

        updateColor();
      };
    }
  });
</script>


</body>
</html>
