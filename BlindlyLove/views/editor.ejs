


<!DOCTYPE html>
<html lang="ko">
<head>
  <%- include('partials/head') %>
  <meta charset="UTF-8" />
  <title>BlindLove 에디터</title>

  <% if (user) { %>
    <!-- ✅ 로그인한 사용자라면 -->
    <meta name="author" content="<%= user.nickname %>">
  <% } %>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/assets/css/editor.css" />
  
  <style>

    /* 📑 목차 박스 스타일 */
.auto-toc {
  background: #f7f9fa;
  border: 1px solid #d0d7de;
  padding: 1rem;
  margin-bottom: 1.5rem;
  border-radius: 6px;
  font-size: 0.95rem;
  line-height: 1.6;
}

.auto-toc .toc-title {
  font-weight: bold;
  margin-bottom: 0.5rem;
  display: block;
}

.auto-toc .toc-list {
  list-style: none;
  padding-left: 0;
  margin: 0;
}

.auto-toc .toc-item {
  margin-bottom: 0.3rem;
}

.auto-toc .toc-h1 a {
  color: #0366d6;
  font-weight: 600;
}

.auto-toc .toc-h2 {
  margin-left: 1em;
}

.auto-toc .toc-h2 a {
  color: #0366d6;
  font-weight: 400;
  font-size: 0.94em;
}

/* 🌙 다크모드 적용 */
html.dark .auto-toc {
  background: #1f1f2b;
  border: 1px solid #444;
  color: #ddd;
}

html.dark .auto-toc a {
  color: #6fb7ff;
}


    body {
      margin: 0;
      padding: 0;
    }
  
    .header-top {
      margin-top: 0 !important;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  <% const isEdit = typeof post !== 'undefined'; %>
  <!-- ✅ 사용자 정보 표시 예시 (원하면 생략 가능) -->
  <% if (user) { %>
    <div style="text-align: center; font-weight: bold; margin-top:3rem;">
      <%= user.nickname %>님, 에디터에 오신 걸 환영합니다!
    </div>
  <% } %>

    <div class="editor-container">
        <div class="logo-wrap">
          <img src="/assets/images/logo.png" alt="BlindLove 로고" />
        </div>
    
        <div class="title-wrap">
          <input type="text" id="postTitle" placeholder="제목을 입력하세요" value="<%= post?.title || '' %>" />
        </div>
    
        <div class="toolbar">
          <div class="dropdown">
            <div class="dropdown-toggle" id="currentStyle" onclick="toggleDropdown()">본문 ▼</div>
            <div class="dropdown-menu" id="styleDropdown">
              <div class="h1" onclick="applyStyle('h1')">제목</div>
              <div class="h2" onclick="applyStyle('h2')">부제목</div>
              <div class="h3" onclick="applyStyle('h3')">머리말 1</div>
              <div class="red" onclick="applyStyle('h4')">빨간 머리말</div>
              <div class="p" onclick="applyStyle('p')">본문</div>
              <div class="desc" onclick="applyStyle('small')">설명</div>
              <div class="meta" onclick="applyStyle('footer')">머리말 및 꼬리말</div>
              <div class="label" onclick="applyStyle('span')">레이블</div>
              <div class="label label-bold" onclick="applyStyle('strong')">진한 레이블</div>
            </div>
          </div>
          <button onclick="insertTOC()" data-tooltip="목차 삽입">📑 목차</button>
          <button onclick="format('bold')" data-tooltip="굵게"><b>B</b></button>
          <button onclick="format('italic')" data-tooltip="기울이기"><i>I</i></button>
          <button onclick="format('underline')" data-tooltip="밑줄"><u>U</u></button>
          <button onclick="format('strikeThrough')" data-tooltip="취소선"><s>S</s></button>
          <button onclick="format('justifyLeft')" data-tooltip="왼쪽 정렬"><i class="fas fa-align-left"></i></button>
          <button onclick="format('justifyCenter')" data-tooltip="가운데 정렬"><i class="fas fa-align-center"></i></button>
          <button onclick="format('justifyRight')" data-tooltip="오른쪽 정렬"><i class="fas fa-align-right"></i></button>
          <button onclick="format('insertOrderedList')" data-tooltip="번호 목록"><i class="fas fa-list-ol"></i></button>
          <button onclick="format('insertUnorderedList')" data-tooltip="글머리 기호"><i class="fas fa-list-ul"></i></button>
          <button onclick="format('outdent')" data-tooltip="내어쓰기"><i class="fas fa-outdent"></i></button>
          <button onclick="format('indent')" data-tooltip="들여쓰기"><i class="fas fa-indent"></i></button>
          <button onclick="format('createLink')" data-tooltip="링크 삽입"><i class="fas fa-link"></i></button>
          <button onclick="format('unlink')" data-tooltip="링크 제거"><i class="fas fa-unlink"></i></button>
         
          <div class="color-tool" id="foreTool">
            <button id="foreColorBtn" data-tooltip="글자 색상" onmousedown="saveSelection()">
              <i class="fas fa-pencil-alt" id="foreIcon"></i>
            </button>
            <div class="color-palette" id="forePalette">
              <button style="background:black" onclick="setColor('foreColor', 'black')"></button>
              <button style="background:red" onclick="setColor('foreColor', 'red')"></button>
              <button style="background:orange" onclick="setColor('foreColor', 'orange')"></button>
              <button style="background:green" onclick="setColor('foreColor', 'green')"></button>
              <button style="background:blue" onclick="setColor('foreColor', 'blue')"></button>
              <button class="none-icon" onclick="setColor('foreColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('foreColor', this.value)" />
              </label>
            </div>
          </div>
          
          <div class="color-tool" id="bgTool">
            <button id="bgColorBtn" data-tooltip="배경 색상" onmousedown="saveSelection()">
              <i class="fas fa-fill-drip" id="bgIcon"></i>
            </button>
            <div class="color-palette" id="bgPalette">
              <button style="background:yellow" onclick="setColor('hiliteColor', 'yellow')"></button>
              <button style="background:lightblue" onclick="setColor('hiliteColor', 'lightblue')"></button>
              <button style="background:lightgreen" onclick="setColor('hiliteColor', 'lightgreen')"></button>
              <button style="background:pink" onclick="setColor('hiliteColor', 'pink')"></button>
              <button style="background:#ccc" onclick="setColor('hiliteColor', '#ccc')"></button>
              <button class="none-icon" onclick="setColor('hiliteColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('hiliteColor', this.value)" />
              </label>
            </div>
          </div>
    
          
          
    
          <button onclick="insertImage()" data-tooltip="이미지 삽입"><i class="fas fa-image"></i></button>
          <button onclick="openHtmlPopup()" data-tooltip="HTML 삽입">
            <i class="fas fa-code"></i>
          </button>
          <button onclick="format('removeFormat')" data-tooltip="형식 제거">지우기</button>
        </div>
    
        <div id="editor" contenteditable="true" class="editor" spellcheck="false">
          <%- post && post.content ? post.content : '<p><br></p>' %>
        </div>  

        <label style="display: inline-flex; align-items: center; gap: 0.5rem; margin-top: 1rem;">
          <input type="checkbox" id="isPrivateCheckbox" name="is_private" value="1" <%= post?.is_private ? 'checked' : '' %> />
          비공개 글로 설정
        </label>

        <% if (user && Number(user.is_admin) === 1) { %>
          <label style="display: inline-flex; align-items: center; gap: 0.5rem; margin-top: 1rem;">
            <input type="checkbox" id="isPinnedCheckbox" name="is_pinned" value="1" <%= post?.is_pinned ? 'checked' : '' %> />
            상단에 고정하기 📌
          </label>
        <% } %>

        <div class="category-box">
          <label>카테고리:</label>
          <div class="category-list" id="categoryList"></div>
          <button class="add-category-btn" onclick="addCategory()">➕ 카테고리 추가</button>
          <button class="post-btn" onclick="postContent()">📬 포스팅</button>
          <button class="save-btn" onclick="saveContent()">💾 저장</button>
        </div>
      </div>
   
  
    <%
  const categoryList = (post && post.categories) ? post.categories.split(',') : ['일상'];
  const postUrl = (isEdit && post) ? `/edit/${post.id}` : '/savePost';
  const redirectUrl = (isEdit && post) ? `/post/${post.id}` : '/';
%>
<script>
function openHtmlPopup() {
  showCustomInput("삽입할 HTML 코드를 입력하세요:", async (rawCode) => {
    if (!rawCode) return;

    // ✨ 1-1. iframe 내부에서 높이를 전달하는 스크립트 (HTML 문자열로)
    // 이 스크립트는 srcdoc에 포함되어 iframe 내부에서 실행됩니다.
    // ⭐⭐⭐ 여기가 수정된 부분입니다: <script> 태그와 닫는 백틱(``)을 추가했습니다.
    const heightReportingScript = `
        <script>
            // load 이벤트는 모든 콘텐츠(이미지 포함)가 로드된 후 실행되므로, 최종 높이 계산에 더 적합합니다.
            window.addEventListener('load', () => {
                // 문서의 실제 높이를 다양한 방식으로 계산하여 가장 큰 값 선택
                const contentHeight = Math.max(
                    document.body.scrollHeight, 
                    document.documentElement.scrollHeight,
                    document.body.offsetHeight, 
                    document.documentElement.offsetHeight,
                    document.body.clientHeight, 
                    document.documentElement.clientHeight
                );
                // 부모 창으로 메시지 전송
                if (window.parent && window.parent.postMessage) {
                    window.parent.postMessage({
                        type: 'setIframeHeight',
                        iframeName: window.name, // iframe의 name 속성을 통해 어떤 iframe인지 식별
                        height: contentHeight + 30 // 콘텐츠 아래 여유 공간 30px 추가 (필요시 조절)
                    }, '*'); // 보안을 강화하려면 '*' 대신 여러분의 사이트 도메인(예: 'http://localhost:3000')을 넣으세요.
                }
            });
        </script>
    `; // ⭐⭐⭐ 여기에 닫는 백틱(`)이 있습니다.

    // 1-2. 사용자가 입력한 rawCode에 높이 전달 스크립트를 삽입
    // </body> 태그를 찾아 바로 앞에 스크립트를 삽입합니다. (대소문자 구분 없이)
    const finalHtmlContent = rawCode.replace(/<\/body>/i, `${heightReportingScript}</body>`);
    
    // 1-3. Base64 인코딩 방식 (TextEncoder + FileReader 방식 유지)
    const encoder = new TextEncoder();
    const encodedUint8 = encoder.encode(finalHtmlContent);

    const base64Code = await new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
            const result = reader.result;
            if (typeof result === 'string') {
                resolve(result.split(',')[1]);
            } else {
                reject(new Error("FileReader result is not a string."));
            }
        };
        reader.onerror = (error) => reject(error);
        reader.readAsDataURL(new Blob([encodedUint8]));
    });

    const wrapper = document.createElement("div");
    wrapper.className = "custom-widget";
    wrapper.setAttribute("data-type", "html-snippet");
    wrapper.setAttribute("data-code", base64Code);

    // ✅ 삽입 미리보기 (에디터 안에는 표시되지만 저장될 땐 진짜 코드로 들어감)
    wrapper.innerHTML = `<div style="border: 1px dashed gray; padding: 0.5rem; color: #666;">[HTML 코드 삽입됨]</div>`;

    // ✅ 선택한 위치에 삽입
    const sel = window.getSelection();
    if (sel && sel.rangeCount > 0) {
      const range = sel.getRangeAt(0);
      range.deleteContents();
      range.insertNode(wrapper);
    } else {
      // 선택 영역 없을 때는 그냥 editor 맨 뒤에 넣기
      const editor = document.getElementById("editor");
      editor.appendChild(wrapper);
    }
    // ⭐ 여기서 saveSelection()을 호출합니다.
    saveSelection(); 
  });
}
      let selectedCategories = <%- JSON.stringify(categoryList) %>;
      let categories = [];
      let savedRange = null;
      
      function renderCategories() {
          const list = document.getElementById('categoryList');
          list.innerHTML = '';
          categories.forEach((cat, index) => {
            const item = document.createElement('div');
            item.className = 'category-item';
            if (selectedCategories.includes(cat)) item.classList.add('selected');
            item.innerText = cat;
      
            item.onclick = () => {
              const i = selectedCategories.indexOf(cat);
              if (i === -1) selectedCategories.push(cat);
              else selectedCategories.splice(i, 1);
              renderCategories();
            };
      
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.innerText = '×';
            removeBtn.onclick = (e) => {
              e.stopPropagation();
              // 사용자에게 확인 메시지를 표시하기 위해 사용자 정의 모달 또는 div를 사용합니다.
              // alert 대신 메시지 상자를 표시합니다.
              showCustomMessage(`'${cat}' 카테고리를 삭제하시겠습니까?`, true, () => {
                fetch(`/api/categories/${encodeURIComponent(cat)}`, {
                  method: 'DELETE'
                })
                .then(res => res.json())
                .then(data => {
                  if (data.success) {
                    categories.splice(index, 1);
                    selectedCategories = selectedCategories.filter(c => c !== cat);
                    renderCategories();
                    showCustomMessage("카테고리가 성공적으로 삭제되었습니다.");
                  } else {
                    showCustomMessage("삭제 실패: " + data.error);
                  }
                })
                .catch(err => {
                  console.error("삭제 오류:", err);
                  showCustomMessage("삭제 중 오류가 발생했습니다.");
                });
              });
            };
      
            item.appendChild(removeBtn);
            list.appendChild(item);
          });
        }
      
        function addCategory() {
          // prompt 대신 사용자 정의 입력 모달 또는 div를 사용합니다.
          showCustomInput("새 카테고리 이름을 입력하세요:", (newCat) => {
            newCat = newCat?.trim();
            if (!newCat || categories.includes(newCat)) return;
        
            fetch('/api/categories', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ name: newCat })
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                categories.push(newCat);
                renderCategories();
                showCustomMessage("카테고리가 성공적으로 추가되었습니다.");
              } else {
                showCustomMessage("추가 실패: " + data.error);
              }
            })
            .catch(err => {
              console.error("추가 오류:", err);
              showCustomMessage("추가 중 오류가 발생했습니다.");
            });
          });
        }
      
        function postContent() {
          const title = document.getElementById('postTitle').value.trim();
          const content = document.getElementById('editor').innerHTML.trim();
          const categoriesToSend = selectedCategories;
          const isPrivate = document.getElementById('isPrivateCheckbox').checked ? 1 : 0;
          const isPinned = document.getElementById('isPinnedCheckbox')?.checked ? 1 : 0;

          if (!title) return showCustomMessage("제목을 입력해주세요.");
          if (!content || content === '<div><br></div>' || content === '<p><br></p>') return showCustomMessage("내용을 입력해주세요.");
          if (!categoriesToSend || categoriesToSend.length === 0) return showCustomMessage("최소 하나의 카테고리를 선택해주세요.");
      
          fetch("<%= postUrl %>", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              title,
              content,
              categories: categoriesToSend,
              is_private: isPrivate, // 비공개 여부 추가
              is_pinned: isPinned,
              // user_id는 서버에서 세션으로 가져오는 것이 더 안전하므로 클라이언트에서 보내지 않습니다.
            })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              // 메시지를 표시하고, 사용자가 '확인'을 클릭하면 페이지를 리디렉션합니다.
              showCustomMessage("성공적으로 저장되었습니다!", false, () => {
                <% if (isEdit && post) { %>
                  window.location.href = "/post/<%= post.id %>";
                <% } else { %>
                  window.location.href = "/";
                <% } %>
              });
            } else {
              showCustomMessage("저장 실패: " + data.error);
            }
          })
          .catch(err => {
            console.error("저장 중 오류:", err);
            showCustomMessage("저장 중 오류가 발생했습니다.");
          });
        }
      
      // --- 수정된 format 함수 ---
      function format(command, value = null) {
          document.execCommand("styleWithCSS", false, false); // 항상 CSS 사용 안함
          document.execCommand(command, false, value);
          setTimeout(detectStyle, 100);
      }
      // -------------------------

      // --- 수정된 applyStyle 함수 ---
      function applyStyle(tag) {
        const blockTags = ['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'];
        const editor = document.getElementById("editor");

        restoreSelection();
        editor.focus();

        if (blockTags.includes(tag)) {
          document.execCommand("styleWithCSS", false, false);
          document.execCommand('formatBlock', false, `<${tag.toUpperCase()}>`);
          saveSelection();
        } else {
          const sel = window.getSelection();
          if (!sel.rangeCount || sel.isCollapsed) return;

          const range = sel.getRangeAt(0);
          const tempElement = document.createElement(tag);
          if (tag === 'span') tempElement.classList.add('label');
          if (tag === 'strong') tempElement.classList.add('label', 'label-bold');

          try {
            const contents = range.extractContents();
            tempElement.appendChild(contents);
            range.insertNode(tempElement);

            sel.removeAllRanges();
            const newRange = document.createRange();
            newRange.selectNode(tempElement);
            sel.addRange(newRange);

            saveSelection();
          } catch (e) {
            console.error("applyStyle(span/strong) 오류:", e);
          }
        }
        setTimeout(detectStyle, 100);
      }

      // -------------------------

      function insertImage() {
          // alert 대신 사용자 정의 메시지 박스를 사용합니다.
          showCustomInput("이미지 URL을 입력하세요:", (url) => {
            if (url) format('insertImage', url);
          });
      }

      function saveContent() {
          // 임시 저장 기능 (클라이언트 사이드에서만)
          showCustomMessage("임시 저장 완료!");
      }

      function toggleDropdown() {
          document.getElementById('styleDropdown').classList.toggle('show');
      }

      function updateCurrentStyle(tagName) {
          const labelMap = {
              h1: "제목",
              h2: "부제목",
              h3: "머리말 1",
              h4: "빨간 머리말",
              p: "본문",
              small: "설명",
              footer: "머리말 및 꼬리말",
              span: "레이블",
              strong: "진한 레이블"
          };
          const label = labelMap[tagName.toLowerCase()] || tagName;
          document.getElementById("currentStyle").innerText = `${label} ▼`;
      }

      function detectStyle() {
        const sel = window.getSelection();
        if (!sel.rangeCount) return;
        let node = sel.getRangeAt(0).startContainer;

        if (node.nodeType === 3) node = node.parentNode;

        while (node && node !== document) {
          const tag = node.tagName?.toLowerCase();
          if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
            updateCurrentStyle(tag);
            return;
          }
          node = node.parentNode;
        }
        updateCurrentStyle('p');
      }

      function saveSelection() {
          const sel = window.getSelection();
          if (sel.rangeCount > 0) {
              savedRange = sel.getRangeAt(0).cloneRange();
          }
      }

      function restoreSelection() {
          const sel = window.getSelection();
          if (savedRange) {
              sel.removeAllRanges();
              sel.addRange(savedRange);
          }
      }

      // --- 수정된 setColor 함수 ---
      function setColor(command, color) {
        restoreSelection();
        const sel = window.getSelection();
        if (!sel.rangeCount || sel.isCollapsed) return;

        const range = sel.getRangeAt(0);

        if (color === "__clear__") {
          const contents = range.cloneContents();
          const spans = contents.querySelectorAll("span");

          spans.forEach(span => {
            if (command === 'foreColor') span.style.color = '';
            else if (command === 'hiliteColor') span.style.backgroundColor = '';
          });

          range.deleteContents();
          range.insertNode(contents);
          return;
        }

        const span = document.createElement("span");
        if (command === "foreColor") span.style.color = color;
        else if (command === "hiliteColor") span.style.backgroundColor = color;

        const contents = range.extractContents();
        span.appendChild(contents);
        range.insertNode(span);

        sel.removeAllRanges();
        const newRange = document.createRange();
        newRange.selectNode(span);
        sel.addRange(newRange);

        saveSelection();
        detectStyle();
      }

      function getCurrentBlockTag() {
        const sel = window.getSelection();
        if (!sel.rangeCount) return null;

        let node = sel.getRangeAt(0).startContainer;
        while (node && node !== document) {
          if (node.nodeType === 1) {
            const tag = node.tagName.toLowerCase();
            if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
              return tag;
            }
          }
          node = node.parentNode;
        }
        return 'p';
      }

      // -------------------------
      // ✅ 커스텀 메시지 박스 및 입력 박스 구현 (alert, prompt 대체)
      function createMessageBox(message, isConfirm = false, onConfirm = null) {
          let modal = document.getElementById('customMessageModal');
          if (!modal) {
              modal = document.createElement('div');
              modal.id = 'customMessageModal';
              modal.style = `
                  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                  background: rgba(0,0,0,0.5); display: flex; justify-content: center;
                  align-items: center; z-index: 1000;
              `;
              document.body.appendChild(modal);
          }
          modal.innerHTML = `
              <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); max-width: 400px; width: 90%; text-align: center;">
                  <p style="color: black;">${message}</p> <!-- ✅ 글자색을 검은색으로 변경 -->
                  ${isConfirm ? `
                      <button id="confirmBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                      <button id="cancelBtn" style="padding: 8px 15px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">취소</button>
                  ` : `
                      <button id="okBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                  `}
              </div>
          `;
          modal.style.display = 'flex';

          if (isConfirm) {
              document.getElementById('confirmBtn').onclick = () => {
                  modal.style.display = 'none';
                  if (onConfirm) onConfirm();
              };
              document.getElementById('cancelBtn').onclick = () => {
                  modal.style.display = 'none';
              };
          } else {
              document.getElementById('okBtn').onclick = () => {
                  modal.style.display = 'none';
                  // '확인' 버튼을 클릭하면 onConfirm 콜백을 실행합니다.
                  if (onConfirm) onConfirm();
              };
          }
      }

      function showCustomMessage(message, isConfirm = false, onConfirm = null) {
          createMessageBox(message, isConfirm, onConfirm);
      }

      function showCustomInput(message, onInput) {
          let modal = document.getElementById('customInputModal');
          if (!modal) {
              modal = document.createElement('div');
              modal.id = 'customInputModal';
              modal.style = `
                  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                  background: rgba(0,0,0,0.5); display: flex; justify-content: center;
                  align-items: center; z-index: 1000;
              `;
              document.body.appendChild(modal);
          }
          modal.innerHTML = `
              <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); max-width: 400px; width: 90%; text-align: center;">
                  <p style="color: black;">${message}</p> <!-- ✅ 입력창 메시지 글자색도 검은색으로 변경 -->
                  <input type="text" id="customInput" style="width: calc(100% - 20px); padding: 8px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px;" />
                  <button id="inputOkBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                  <button id="inputCancelBtn" style="padding: 8px 15px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">취소</button>
              </div>
          `;
          modal.style.display = 'flex';

          document.getElementById('inputOkBtn').onclick = () => {
              const inputValue = document.getElementById('customInput').value;
              modal.style.display = 'none';
              if (onInput) onInput(inputValue);
          };
          document.getElementById('inputCancelBtn').onclick = () => {
              modal.style.display = 'none';
              if (onInput) onInput(null); // 취소 시 null 전달
          };
          document.getElementById('customInput').focus(); // 입력 필드에 포커스
      }
      // -------------------------

      window.onclick = function(e) {
          if (!e.target.matches('.dropdown-toggle')) {
              const dropdowns = document.getElementsByClassName('dropdown-menu');
              for (let d of dropdowns) d.classList.remove('show');
          }
      };

      // `window.onload`는 한 번만 할당되어야 합니다.
      // 모든 함수 정의를 이전에 배치하여 오류 없이 호출될 수 있도록 합니다.
      window.onload = () => {
          // 카테고리 불러오기 및 렌더링
          fetch('/api/categories')
            .then(res => res.json())
            .then(data => {
              categories = data.categories || [];
              renderCategories();
            })
            .catch(err => {
              console.error("카테고리 불러오기 오류:", err);
              categories = ['일상', '기록', '리뷰']; // 대체 카테고리
              renderCategories();
            });

          // 에디터 이벤트 리스너 추가
          const editor = document.getElementById('editor');
          editor.addEventListener('keyup', detectStyle);
          editor.addEventListener('mouseup', detectStyle);
          editor.addEventListener('mouseup', saveSelection);
          editor.addEventListener('keyup', saveSelection);

          // 툴바 버튼 이벤트 리스너 추가 (선택 영역 저장)
          const toolbarButtons = document.querySelectorAll('.toolbar button, .dropdown-toggle');
          toolbarButtons.forEach(button => {
              button.addEventListener('mousedown', saveSelection);
          });
      };

      function insertTOC() {
  const editor = document.getElementById("editor");
  const headings = editor.querySelectorAll("h1, h2");

  if (!headings.length) {
    showCustomMessage("제목 또는 부제목이 없어 목차를 만들 수 없습니다.");
    return;
  }

  // 기존 목차 제거
  const oldTOC = editor.querySelector(".auto-toc");
  if (oldTOC) oldTOC.remove();

  const tocWrapper = document.createElement("div");
  tocWrapper.className = "auto-toc";
  tocWrapper.contentEditable = "false";

  const tocTitle = `<strong class="toc-title">📑 목차</strong>`;
  const tocList = document.createElement("ul");
  tocList.className = "toc-list";
  tocList.style.margin = "0";
  tocList.style.padding = "0";

  let h1Count = 0;
  let h2Count = 0;

  headings.forEach((el) => {
    const tag = el.tagName.toLowerCase();
    let number = "";

    if (tag === "h1") {
      h1Count++;
      h2Count = 0;
      number = `${h1Count}.`;
    } else if (tag === "h2") {
      h2Count++;
      number = `${h1Count}.${h2Count}`;
    }

    const id = `toc-${number.replace(/\./g, "-")}`;
    el.id = id;

    const li = document.createElement("li");
    li.className = `toc-item toc-${tag}`;
    li.style.margin = "0.2em 0";
    li.style.lineHeight = "1.2";
    if (tag === "h2") li.style.marginLeft = "1.2rem";

    const a = document.createElement("a");
    a.href = `#${id}`;
    a.textContent = `${number} ${el.textContent.trim()}`;
    a.onclick = function (e) {
      e.preventDefault();
      document.getElementById(id)?.scrollIntoView({ behavior: "smooth" });
    };
    a.style.color = "#0366d6";
    a.style.textDecoration = "none";

    li.appendChild(a);
    tocList.appendChild(li);
  });

  tocWrapper.innerHTML = tocTitle;
  tocWrapper.appendChild(tocList);

  // h1 앞에 제대로 삽입
  const firstHeading = [...headings][0];
  editor.insertBefore(tocWrapper, firstHeading);
}

    </script>
      
      <%- include('partials/scripts') %>
    </body>
    </html>

