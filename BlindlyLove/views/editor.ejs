<!DOCTYPE html>
<html lang="ko">
<head>
  <%- include('partials/head') %>
  <meta charset="UTF-8" />
  <title>BlindLove 에디터</title>

  <% if (user) { %>
    <!-- ✅ 로그인한 사용자라면 -->
    <meta name="author" content="<%= user.nickname %>">
  <% } %>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/assets/css/editor.css" />



  
  <style>
    body {
      margin: 0;
      padding: 0;
    }
  
    .header-top {
      margin-top: 0 !important;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  <% const isEdit = typeof post !== 'undefined'; %>
  <!-- ✅ 사용자 정보 표시 예시 (원하면 생략 가능) -->
  <% if (user) { %>
    <div style="text-align: center; font-weight: bold; margin-top:3rem;">
      <%= user.nickname %>님, 에디터에 오신 걸 환영합니다!
    </div>
  <% } %>

    <div class="editor-container">
        <div class="logo-wrap">
          <img src="/assets/images/1.png" alt="BlindLove 로고" />
        </div>
    
        <div class="title-wrap">
          <input type="text" id="postTitle" placeholder="제목을 입력하세요" value="<%= post?.title || '' %>" />
        </div>
    
        <div class="toolbar">
          <div class="dropdown">
            <div class="dropdown-toggle" id="currentStyle" onclick="toggleDropdown()">본문 ▼</div>
            <div class="dropdown-menu" id="styleDropdown">
              <div class="h1" onclick="applyStyle('h1')">제목</div>
              <div class="h2" onclick="applyStyle('h2')">부제목</div>
              <div class="h3" onclick="applyStyle('h3')">머리말 1</div>
              <div class="red" onclick="applyStyle('h4')">빨간 머리말</div>
              <div class="p" onclick="applyStyle('p')">본문</div>
              <div class="desc" onclick="applyStyle('small')">설명</div>
              <div class="meta" onclick="applyStyle('footer')">머리말 및 꼬리말</div>
              <div class="label" onclick="applyStyle('span')">레이블</div>
              <div class="label label-bold" onclick="applyStyle('strong')">진한 레이블</div>
            </div>
          </div>
    
          <button onclick="format('bold')" data-tooltip="굵게"><b>B</b></button>
          <button onclick="format('italic')" data-tooltip="기울이기"><i>I</i></button>
          <button onclick="format('underline')" data-tooltip="밑줄"><u>U</u></button>
          <button onclick="format('strikeThrough')" data-tooltip="취소선"><s>S</s></button>
          <button onclick="format('justifyLeft')" data-tooltip="왼쪽 정렬"><i class="fas fa-align-left"></i></button>
          <button onclick="format('justifyCenter')" data-tooltip="가운데 정렬"><i class="fas fa-align-center"></i></button>
          <button onclick="format('justifyRight')" data-tooltip="오른쪽 정렬"><i class="fas fa-align-right"></i></button>
          <button onclick="format('insertOrderedList')" data-tooltip="번호 목록"><i class="fas fa-list-ol"></i></button>
          <button onclick="format('insertUnorderedList')" data-tooltip="글머리 기호"><i class="fas fa-list-ul"></i></button>
          <button onclick="format('outdent')" data-tooltip="내어쓰기"><i class="fas fa-outdent"></i></button>
          <button onclick="format('indent')" data-tooltip="들여쓰기"><i class="fas fa-indent"></i></button>
          <button onclick="format('createLink')" data-tooltip="링크 삽입"><i class="fas fa-link"></i></button>
          <button onclick="format('unlink')" data-tooltip="링크 제거"><i class="fas fa-unlink"></i></button>
         
          <div class="color-tool" id="foreTool">
            <button id="foreColorBtn" data-tooltip="글자 색상" onmousedown="saveSelection()">
              <i class="fas fa-pencil-alt" id="foreIcon"></i>
            </button>
            <div class="color-palette" id="forePalette">
              <button style="background:black" onclick="setColor('foreColor', 'black')"></button>
              <button style="background:red" onclick="setColor('foreColor', 'red')"></button>
              <button style="background:orange" onclick="setColor('foreColor', 'orange')"></button>
              <button style="background:green" onclick="setColor('foreColor', 'green')"></button>
              <button style="background:blue" onclick="setColor('foreColor', 'blue')"></button>
              <button class="none-icon" onclick="setColor('foreColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('foreColor', this.value)" />
              </label>
            </div>
          </div>
          
          <div class="color-tool" id="bgTool">
            <button id="bgColorBtn" data-tooltip="배경 색상" onmousedown="saveSelection()">
              <i class="fas fa-fill-drip" id="bgIcon"></i>
            </button>
            <div class="color-palette" id="bgPalette">
              <button style="background:yellow" onclick="setColor('hiliteColor', 'yellow')"></button>
              <button style="background:lightblue" onclick="setColor('hiliteColor', 'lightblue')"></button>
              <button style="background:lightgreen" onclick="setColor('hiliteColor', 'lightgreen')"></button>
              <button style="background:pink" onclick="setColor('hiliteColor', 'pink')"></button>
              <button style="background:#ccc" onclick="setColor('hiliteColor', '#ccc')"></button>
              <button class="none-icon" onclick="setColor('hiliteColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('hiliteColor', this.value)" />
              </label>
            </div>
          </div>
    
          
          
    
          <button onclick="insertImage()" data-tooltip="이미지 삽입"><i class="fas fa-image"></i></button>
          <button onclick="format('removeFormat')" data-tooltip="형식 제거">지우기</button>
        </div>
    
        <div id="editor" contenteditable="true" class="editor" spellcheck="false">
          <%- post && post.content ? post.content : '<p><br></p>' %>
        </div>  

        <label style="display: inline-flex; align-items: center; gap: 0.5rem; margin-top: 1rem;">
          <input type="checkbox" name="is_private" value="1" <%= post?.is_private ? 'checked' : '' %> />
          비공개 글로 설정
        </label>

        <div class="category-box">
          <label>카테고리:</label>
          <div class="category-list" id="categoryList"></div>
          <button class="add-category-btn" onclick="addCategory()">➕ 카테고리 추가</button>
          <button class="post-btn" onclick="postContent()">📬 포스팅</button>
          <button class="save-btn" onclick="saveContent()">💾 저장</button>
        </div>
      </div>
   
  
    <%
  const categoryList = (post && post.categories) ? post.categories.split(',') : ['일상'];
  const postUrl = (isEdit && post) ? `/edit/${post.id}` : '/savePost';
  const redirectUrl = (isEdit && post) ? `/post/${post.id}` : '/';
%>

    <script>
      let selectedCategories = <%- JSON.stringify(categoryList) %>;
      let categories = [];
      let savedRange = null;
      
        function renderCategories() {
          const list = document.getElementById('categoryList');
          list.innerHTML = '';
          categories.forEach((cat, index) => {
            const item = document.createElement('div');
            item.className = 'category-item';
            if (selectedCategories.includes(cat)) item.classList.add('selected');
            item.innerText = cat;
      
            item.onclick = () => {
              const i = selectedCategories.indexOf(cat);
              if (i === -1) selectedCategories.push(cat);
              else selectedCategories.splice(i, 1);
              renderCategories();
            };
      
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-btn';
            removeBtn.innerText = '×';
            removeBtn.onclick = (e) => {
              e.stopPropagation();
              if (confirm(`'${cat}' 카테고리를 삭제하시겠습니까?`)) {
                fetch(`/api/categories/${encodeURIComponent(cat)}`, {
                  method: 'DELETE'
                })
                .then(res => res.json())
                .then(data => {
                  if (data.success) {
                    categories.splice(index, 1);
                    selectedCategories = selectedCategories.filter(c => c !== cat);
                    renderCategories();
                  } else {
                    alert("삭제 실패: " + data.error);
                  }
                })
                .catch(err => {
                  console.error("삭제 오류:", err);
                  alert("삭제 중 오류가 발생했습니다.");
                });
              }
            };
      
            item.appendChild(removeBtn);
            list.appendChild(item);
          });
        }
      
        function addCategory() {
          const newCat = prompt("새 카테고리 이름을 입력하세요:")?.trim();
          if (!newCat || categories.includes(newCat)) return;
      
          fetch('/api/categories', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newCat })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              categories.push(newCat);
              renderCategories();
            } else {
              alert("추가 실패: " + data.error);
            }
          })
          .catch(err => {
            console.error("추가 오류:", err);
            alert("추가 중 오류가 발생했습니다.");
          });
        }
      
        function postContent() {
          const title = document.getElementById('postTitle').value.trim();
          const content = document.getElementById('editor').innerHTML.trim();
          const categoriesToSend = selectedCategories;
      
          if (!title) return alert("제목을 입력해주세요.");
          if (!content || content === '<div><br></div>' || content === '<p><br></p>') return alert("내용을 입력해주세요.");
          if (!categoriesToSend || categoriesToSend.length === 0) return alert("최소 하나의 카테고리를 선택해주세요.");
      
          fetch("<%= postUrl %>", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              title,
              content,
              categories: categoriesToSend,
              user_id: "<%= user?.id %>"
            })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
    alert("성공적으로 저장되었습니다!");
    <% if (isEdit && post) { %>
      window.location.href = "/post/<%= post.id %>";
    <% } else { %>
      window.location.href = "/";
    <% } %>
  } else {
    alert("저장 실패: " + data.error);
  }
          })
          .catch(err => {
            console.error("저장 중 오류:", err);
            alert("저장 중 오류가 발생했습니다.");
          });
        }
      
        window.onload = () => {
          fetch('/api/categories')
            .then(res => res.json())
            .then(data => {
              categories = data.categories || [];
              renderCategories();
            })
            .catch(err => {
              console.error("카테고리 불러오기 오류:", err);
              categories = ['일상', '기록', '리뷰']; // fallback
              renderCategories();
            });
        };
      </script>

<script>
  function applyStyle(tag) {
    const editor = document.getElementById('editor');
    const selection = window.getSelection();
    if (!selection.rangeCount) return;

    const range = selection.getRangeAt(0);
    const selectedText = range.extractContents();

    const el = document.createElement(tag);
    el.appendChild(selectedText);
    range.insertNode(el);

    selection.removeAllRanges();
    const newRange = document.createRange();
    newRange.selectNodeContents(el);
    selection.addRange(newRange);

    document.getElementById('currentStyle').innerText = el.tagName.toLowerCase() + ' ▼';
  }
</script>

<script>
  

if (!title) return alert("제목을 입력해주세요.");
if (selectedCategories.length === 0) return alert("최소 하나의 카테고리를 선택해주세요.");

fetch('/savePost', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    title,
    content,
    categories: selectedCategories
  })
})
.then(res => res.json())
.then(data => {
  if (data.success) {
    alert("🎉 글 작성이 완료되었습니다!");
    // window.location.href = `/post/${data.postId}`; // ← 이건 옵션
  } else {
    alert("❌ 저장 실패: " + data.error);
  }
})
.catch(err => {
  console.error("요청 실패:", err);
  alert("❌ 서버 연결 오류!");
});
}


  // --- 수정된 format 함수 ---
  // 모든 execCommand는 기본적으로 styleWithCSS=false로 작동하며,
  // 태그 기반으로 요소를 생성합니다 (<b>, <i>, <u> 등).
  function format(command, value = null) {
      document.execCommand("styleWithCSS", false, false); // 항상 CSS 사용 안함
      document.execCommand(command, false, value);
      // execCommand 후에는 detectStyle을 호출하여 현재 스타일을 업데이트합니다.
      setTimeout(detectStyle, 100);
  }
  // -------------------------

  // --- 수정된 applyStyle 함수 ---
  // 이 함수는 블록 레벨 요소 (h1, p 등) 생성에 집중합니다.
  // span/strong 같은 인라인 요소는 format 함수나 setColor 함수에서 처리되도록 합니다.
  function applyStyle(tag) {
const blockTags = ['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'];
const editor = document.getElementById("editor");

// 선택 영역 저장 후 복원
restoreSelection();
editor.focus();

if (blockTags.includes(tag)) {
  document.execCommand("styleWithCSS", false, false);
  document.execCommand('formatBlock', false, `<${tag.toUpperCase()}>`);

  // 다시 선택 영역을 저장해서 커서 이동 방지
  saveSelection();
} else {
  const sel = window.getSelection();
  if (!sel.rangeCount || sel.isCollapsed) return;

  const range = sel.getRangeAt(0);
  const tempElement = document.createElement(tag);
  if (tag === 'span') tempElement.classList.add('label');
  if (tag === 'strong') tempElement.classList.add('label', 'label-bold');

  try {
    const contents = range.extractContents();
    tempElement.appendChild(contents);
    range.insertNode(tempElement);

    // 선택 영역 다시 지정
    sel.removeAllRanges();
    const newRange = document.createRange();
    newRange.selectNode(tempElement);
    sel.addRange(newRange);

    saveSelection();
  } catch (e) {
    console.error("applyStyle(span/strong) 오류:", e);
  }
}

setTimeout(detectStyle, 100);
}

  // -------------------------

  function insertImage() {
      const url = prompt("이미지 URL을 입력하세요:");
      if (url) format('insertImage', url);
  }

  function saveContent() {
      const content = document.getElementById('editor').innerHTML;
      alert("임시 저장 완료!");
  }

  function toggleDropdown() {
      document.getElementById('styleDropdown').classList.toggle('show');
  }

  function updateCurrentStyle(tagName) {
      const labelMap = {
          h1: "제목",
          h2: "부제목",
          h3: "머리말 1",
          h4: "빨간 머리말",
          p: "본문",
          small: "설명",
          footer: "머리말 및 꼬리말",
          span: "레이블",
          strong: "진한 레이블"
      };
      const label = labelMap[tagName.toLowerCase()] || tagName;
      document.getElementById("currentStyle").innerText = `${label} ▼`;
  }

  function detectStyle() {
const sel = window.getSelection();
if (!sel.rangeCount) return;
let node = sel.getRangeAt(0).startContainer;

// 텍스트 노드면 부모로 이동
if (node.nodeType === 3) node = node.parentNode;

// 가장 가까운 블록 요소 탐색
while (node && node !== document) {
  const tag = node.tagName?.toLowerCase();
  if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
    updateCurrentStyle(tag);
    return;
  }
  node = node.parentNode;
}

// 못 찾으면 기본 본문
updateCurrentStyle('p');
}



  function saveSelection() {
      const sel = window.getSelection();
      if (sel.rangeCount > 0) {
          savedRange = sel.getRangeAt(0).cloneRange(); // Range 객체 복사본 저장
      }
  }

  function restoreSelection() {
      const sel = window.getSelection();
      if (savedRange) {
          sel.removeAllRanges();
          sel.addRange(savedRange);
      }
  }

  // --- 수정된 setColor 함수 ---
  // execCommand('foreColor')와 'hiliteColor'는 styleWithCSS를 명시적으로 true로 설정하여
  // 인라인 스타일을 적용하고, 완료 후 다시 false로 되돌립니다.
  function setColor(command, color) {
restoreSelection();
const sel = window.getSelection();
if (!sel.rangeCount || sel.isCollapsed) return;

const range = sel.getRangeAt(0);

// "색 없음" 처리
if (color === "__clear__") {
  // 선택 영역 내 span에 적용된 스타일 제거
  const contents = range.cloneContents();
  const spans = contents.querySelectorAll("span");

  spans.forEach(span => {
    if (command === 'foreColor') span.style.color = '';
    else if (command === 'hiliteColor') span.style.backgroundColor = '';
  });

  range.deleteContents();
  range.insertNode(contents);
  return;
}

// 텍스트 선택 부분을 span으로 감싸고 스타일 적용
const span = document.createElement("span");
if (command === "foreColor") span.style.color = color;
else if (command === "hiliteColor") span.style.backgroundColor = color;

const contents = range.extractContents();
span.appendChild(contents);
range.insertNode(span);

// 선택 영역 다시 설정 (커서가 밖으로 튀는 문제 방지)
sel.removeAllRanges();
const newRange = document.createRange();
newRange.selectNode(span);
sel.addRange(newRange);

saveSelection();
detectStyle();
}



function getCurrentBlockTag() {
const sel = window.getSelection();
if (!sel.rangeCount) return null;

let node = sel.getRangeAt(0).startContainer;
while (node && node !== document) {
  if (node.nodeType === 1) {
    const tag = node.tagName.toLowerCase();
    if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
      return tag;
    }
  }
  node = node.parentNode;
}

return 'p';
}



  // -------------------------

  window.onclick = function(e) {
      if (!e.target.matches('.dropdown-toggle')) {
          const dropdowns = document.getElementsByClassName('dropdown-menu');
          for (let d of dropdowns) d.classList.remove('show');
      }
  };

  window.onload = () => {
      renderCategories();
      // 에디터 이벤트 리스너
      const editor = document.getElementById('editor');
      editor.addEventListener('keyup', detectStyle);
      editor.addEventListener('mouseup', detectStyle);
      editor.addEventListener('mouseup', saveSelection);
      editor.addEventListener('keyup', saveSelection);

      // 툴바 버튼들에 mousedown 이벤트 추가 (클릭 시 선택 영역 유실 방지)
      const toolbarButtons = document.querySelectorAll('.toolbar button, .dropdown-toggle');
      toolbarButtons.forEach(button => {
          button.addEventListener('mousedown', saveSelection);
      });
  };
</script>
      
      <%- include('partials/scripts') %>
    </body>
    </html>