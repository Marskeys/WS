<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
  <meta charset="UTF-8" />
  <title>BlindLove 에디터</title>
  <%- include('partials/head') %>
  <% if (user) { %>
    <meta name="author" content="<%= user.nickname %>">
  <% } %>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/assets/css/editor.css" />
  <link rel="stylesheet" href="/assets/css/style.css" />
</head>
<body>
  <%- include('partials/header') %>
  <% const isEdit = typeof post !== 'undefined' && post !== null; %>
  <% if (user) { %>
    <div style="text-align: center; font-weight: bold; margin-top:3rem;">
      <%= user.nickname %>님, 에디터에 오신 걸 환영합니다!
    </div>
  <% } %>

  <div class="editor-container">
    <div class="logo-wrap">
      <a href="/<%= lang %>/">
        <img src="/assets/images/logo.png" alt="BlindLove 로고" />
      </a>
    </div>

    <div class="lang-selector-wrap">
      <label for="langSelector">편집 중인 언어</label>
      <select id="langSelector">
        <%
          const langLabels = {
              'ko': '한국어',
              'en': 'English',
              'fr': 'Français',
              'zh': '中文',
              'ja': '日本語'
          };
          supportedLangs.forEach(langCode => {
        %>
          <option value="<%= langCode %>" <%= lang === langCode ? 'selected' : '' %>><%= langLabels[langCode] %></option>
        <%
          });
        %>
      </select>
    </div>

    <%
      const langList = [
        { code: 'ko', label: '한국어' },
        { code: 'en', label: 'English' },
        { code: 'fr', label: 'Français' },
        { code: 'zh', label: '简体中文' },
        { code: 'ja', label: '日本語' }
      ];
    %>

    <% langList.forEach(({ code, label }) => { %>
      <div class="lang-meta-block" data-lang="<%= code %>" style="<%= code === lang ? '' : 'display:none;' %>">
        <div class="title-wrap">
          <input
            type="text"
            name="title_<%= code %>"
            placeholder="<%= label %> 제목"
            value="<%= post?.[code]?.title || '' %>"
          />
        </div>

        <div class="toolbar">
          <div class="dropdown">
            <div class="dropdown-toggle" id="currentStyle_<%= code %>" onclick="toggleDropdown(event)">본문 ▼</div>
            <div class="dropdown-menu" id="styleDropdown">
              <div class="h1" onmousedown="applyStyle(event, 'h1')">제목</div>
              <div class="h2" onmousedown="applyStyle(event, 'h2')">부제목</div>
              <div class="h3" onmousedown="applyStyle(event, 'h3')">머리말 1</div>
              <div class="red" onmousedown="applyStyle(event, 'h4')">빨간 머리말</div>
              <div class="p" onmousedown="applyStyle(event, 'p')">본문</div>
              <div class="desc" onmousedown="applyStyle(event, 'small')">설명</div>
              <div class="meta" onmousedown="applyStyle(event, 'footer')">머리말 및 꼬리말</div>
              <div class="label" onmousedown="applyStyle(event, 'span')">레이블</div>
              <div class="label label-bold" onmousedown="applyStyle(event, 'strong')">진한 레이블</div>
            </div>
          </div>
          <button onclick="insertTOC()" data-tooltip="목차 삽입">📑 목차</button>
          <button onclick="format('bold')" data-tooltip="굵게"><b>B</b></button>
          <button onclick="format('italic')" data-tooltip="기울이기"><i>I</i></button>
          <button onclick="format('underline')" data-tooltip="밑줄"><u>U</u></button>
          <button onclick="format('strikeThrough')" data-tooltip="취소선"><s>S</s></button>
          <button onclick="format('justifyLeft')" data-tooltip="왼쪽 정렬"><i class="fas fa-align-left"></i></button>
          <button onclick="format('justifyCenter')" data-tooltip="가운데 정렬"><i class="fas fa-align-center"></i></button>
          <button onclick="format('justifyRight')" data-tooltip="오른쪽 정렬"><i class="fas fa-align-right"></i></button>
          <button onclick="format('insertOrderedList')" data-tooltip="번호 목록"><i class="fas fa-list-ol"></i></button>
          <button onclick="format('insertUnorderedList')" data-tooltip="글머리 기호"><i class="fas fa-list-ul"></i></button>
          <button onclick="format('outdent')" data-tooltip="내어쓰기"><i class="fas fa-outdent"></i></button>
          <button onclick="format('indent')" data-tooltip="들여쓰기"><i class="fas fa-indent"></i></button>
          <button onclick="format('createLink')" data-tooltip="링크 삽입"><i class="fas fa-link"></i></button>
          <button onclick="format('unlink')" data-tooltip="링크 제거"><i class="fas fa-unlink"></i></button>
          
          <div class="color-tool" id="foreTool">
            <button id="foreColorBtn" data-tooltip="글자 색상" onmousedown="saveSelection()">
              <i class="fas fa-pencil-alt" id="foreIcon"></i>
            </button>
            <div class="color-palette" id="forePalette">
              <button style="background:black" onclick="setColor('foreColor', 'black')"></button>
              <button style="background:red" onclick="setColor('foreColor', 'red')"></button>
              <button style="background:orange" onclick="setColor('foreColor', 'orange')"></button>
              <button style="background:green" onclick="setColor('foreColor', 'green')"></button>
              <button style="background:blue" onclick="setColor('foreColor', 'blue')"></button>
              <button class="none-icon" onclick="setColor('foreColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('foreColor', this.value)" />
              </label>
            </div>
          </div>
          
          <div class="color-tool" id="bgTool">
            <button id="bgColorBtn" data-tooltip="배경 색상" onmousedown="saveSelection()">
              <i class="fas fa-fill-drip" id="bgIcon"></i>
            </button>
            <div class="color-palette" id="bgPalette">
              <button style="background:yellow" onclick="setColor('hiliteColor', 'yellow')"></button>
              <button style="background:lightblue" onclick="setColor('hiliteColor', 'lightblue')"></button>
              <button style="background:lightgreen" onclick="setColor('hiliteColor', 'lightgreen')"></button>
              <button style="background:pink" onclick="setColor('hiliteColor', 'pink')"></button>
              <button style="background:#ccc" onclick="setColor('hiliteColor', '#ccc')"></button>
              <button class="none-icon" onclick="setColor('hiliteColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('hiliteColor', this.value)" />
              </label>
            </div>
          </div>
          <button onclick="openHtmlPopup()" data-tooltip="HTML 삽입"><i class="fas fa-code"></i></button> 
          <button onclick="insertImage()" data-tooltip="이미지 삽입"><i class="fas fa-image"></i></button>
          <button onclick="format('removeFormat')" data-tooltip="형식 제거">지우기</button>
        </div>
    
        <% if (user && Number(user.is_admin) === 1) { %>
        <div class="mode-toggle">
          <button onclick="switchToDesignMode()">디자인 모드</button>
          <button onclick="switchToHtmlMode()">HTML 모드</button>
        </div>
        <% } %>
        
        <div class="editor-area-wrapper">
          <div id="editor_<%= code %>"
               contenteditable="true"
               class="editor language-editor"
               spellcheck="false"
               data-lang-editor="<%= code %>"
               tabindex="0" <% // tabindex 추가로 포커스 가능하게 함 %>
               style="<%= code === lang ? '' : 'display:none;' %>"
          >
            <%
              let initialContent = post?.[code]?.content || '<p><br></p>';
              const isWrapped = initialContent.startsWith('<div class="bl-content"');
              if (!isWrapped) {
                initialContent = `
                  <div class="bl-content" style="white-space:normal; line-height: 1.7;">
                    ${initialContent}
                  </div>
                `;
              }
            %>
            <%- initialContent %>
          </div>
          <textarea id="htmlEditor_<%= code %>" class="editor html-editor" style="display: none;"></textarea>
        </div>

        <div class="global-options" style="margin-top: 2rem;">
          <label style="margin-right: 2rem;">
            <input type="checkbox" id="isPrivateCheckbox" name="is_private" value="1" <%= post?.is_private ? 'checked' : '' %> />
            🔒 비공개 글로 설정
          </label>
        
          <% if (user && Number(user.is_admin) === 1) { %>
            <label>
              <input type="checkbox" id="isPinnedCheckbox" name="is_pinned" value="1" <%= post?.is_pinned ? 'checked' : '' %> />
              📌 상단에 고정하기
            </label>
          <% } %>
        </div>


      </div>
    <% }) %> 

    <div class="category-box">
      <label>카테고리 선택:</label>
      <div class="category-list" id="categoryList"></div>
      <button class="bl-button add" onclick="addCategory()">+ 추가</button>
    </div>

    <div class="save-button-wrap">
      <button type="button" class="bl-button save" onclick="postContent()">💾 저장</button>
    </div>

  </div> 
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.0/beautify-html.min.js"></script>
  <script>
    let selectedCategories = []; // 기본값으로 빈 배열 선언
    <% if (post && post.categories) { %>
      // post.categories가 있을 경우에만 JSON.stringify를 사용하여 할당
      selectedCategories = <%- JSON.stringify(post.categories.split(',')) %>;
    <% } %>

    let categories = [];
    let savedRange = null;

    let currentActiveEditor = null; // 현재 활성 디자인 모드 에디터 div 엘리먼트
    let currentActiveHtmlEditor = null; // 현재 활성 HTML 모드 에디터 textarea 엘리먼트

    const langList = [
        { code: 'ko', label: '한국어' },
        { code: 'en', label: 'English' },
        { code: 'fr', label: 'Français' },
        { code: 'zh', label: '简体中文' },
        { code: 'ja', label: '日本語' }
    ];
    
    const IS_EDIT_PAGE = <%- isEdit ? 'true' : 'false' %>; 
    const POST_ID = <%- post && post.id ? JSON.stringify(post.id) : 'null' %>;
    const CURRENT_PAGE_LANG = '<%= lang %>';

    // 메시지 박스 및 입력창 관련 함수
    function createMessageBox(message, isConfirm = false, onConfirm = null) {
        let modal = document.getElementById('customMessageModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'customMessageModal';
            modal.style = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.5); display: flex; justify-content: center;
                align-items: center; z-index: 1000;
            `;
            document.body.appendChild(modal);
        }
        modal.innerHTML = `
            <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); max-width: 400px; width: 90%; text-align: center;">
                <p style="color: black;">${message}</p>
                ${isConfirm ? `
                    <button id="confirmBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                    <button id="cancelBtn" style="padding: 8px 15px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">취소</button>
                ` : `
                    <button id="okBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                `}
            </div>
        `;
        modal.style.display = 'flex';

        if (isConfirm) {
            document.getElementById('confirmBtn').onclick = () => {
                modal.style.display = 'none';
                if (onConfirm) onConfirm();
            };
            document.getElementById('cancelBtn').onclick = () => {
                modal.style.display = 'none';
            };
        } else {
            document.getElementById('okBtn').onclick = () => {
                modal.style.display = 'none';
                if (onConfirm) onConfirm();
            };
        }
    }

    function showCustomMessage(message, isConfirm = false, onConfirm = null) {
        createMessageBox(message, isConfirm, onConfirm);
    }

    function showCustomInput(message, onInput) {
        let modal = document.getElementById('customInputModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'customInputModal';
            modal.style = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.5); display: flex; justify-content: center;
                align-items: center; z-index: 1000;
            `;
            document.body.appendChild(modal);
        }
        modal.innerHTML = `
            <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); max-width: 400px; width: 90%; text-align: center;">
                <p style="color: black;">${message}</p>
                <input type="text" id="customInput" style="width: calc(100% - 20px); padding: 8px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px;" />
                <button id="inputOkBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                <button id="inputCancelBtn" style="padding: 8px 15px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">취소</button>
            </div>
        `;
        modal.style.display = 'flex';

        document.getElementById('inputOkBtn').onclick = () => {
            const inputValue = document.getElementById('customInput').value;
            modal.style.display = 'none';
            if (onInput) onInput(inputValue);
        };
        document.getElementById('inputCancelBtn').onclick = () => {
            const inputValue = document.getElementById('customInput').value;
            modal.style.display = 'none';
            if (onInput) onInput(null);
        };
        document.getElementById('customInput').focus();
    }

    window.onclick = function(e) {
        // 드롭다운 메뉴를 제외한 다른 곳을 클릭했을 때 드롭다운 닫기
        // 드롭다운 토글 버튼도 클릭 시에는 닫히지 않도록 수정
        if (!e.target.matches('.dropdown-toggle') && !e.target.closest('.dropdown-menu')) {
            const dropdowns = document.getElementsByClassName('dropdown-menu');
            for (let d of dropdowns) {
                if (d.classList.contains('show')) {
                    d.classList.remove('show');
                }
            }
        }
    };
    // 여기까지 메시지 박스 및 입력창 관련 함수

    function renderCategories() {
        const list = document.getElementById('categoryList');
        list.innerHTML = '';
        categories.forEach((cat, index) => {
          const item = document.createElement('div');
          item.className = 'category-item';
          if (selectedCategories.includes(cat)) item.classList.add('selected');
          item.innerText = cat;
    
          item.onclick = () => {
            const i = selectedCategories.indexOf(cat);
            if (i === -1) selectedCategories.push(cat);
            else selectedCategories.splice(i, 1);
            renderCategories();
          };
    
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-btn';
          removeBtn.innerText = '×';
          removeBtn.onclick = (e) => {
            e.stopPropagation();
            showCustomMessage(`'${cat}' 카테고리를 삭제하시겠습니까?`, true, () => {
              fetch(`/api/categories/${encodeURIComponent(cat)}`, {
                method: 'DELETE'
              })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  categories.splice(index, 1);
                  selectedCategories = selectedCategories.filter(c => c !== cat);
                  renderCategories();
                  showCustomMessage("카테고리가 성공적으로 삭제되었습니다.");
                } else {
                  showCustomMessage("삭제 실패: " + data.error);
                }
              })
              .catch(err => {
                console.error("삭제 오류:", err);
                showCustomMessage("삭제 중 오류가 발생했습니다.");
              });
            });
          };
    
          item.appendChild(removeBtn);
          list.appendChild(item);
        });
      }
    
      function addCategory() {
        showCustomInput("새 카테고리 이름을 입력하세요:", (newCat) => {
          newCat = newCat?.trim();
          if (!newCat || categories.includes(newCat)) return;
      
          fetch('/api/categories', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newCat })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              categories.push(newCat);
              renderCategories();
              showCustomMessage("카테고리가 성공적으로 추가되었습니다.");
            } else {
              showCustomMessage("추가 실패: " + data.error);
            }
          })
          .catch(err => {
            console.error("추가 오류:", err);
            showCustomMessage("추가 중 오류가 발생했습니다.");
          });
        });
      }
    
      function postContent() {
          const postData = {
              categories: selectedCategories,
              is_private: document.getElementById('isPrivateCheckbox')?.checked ? 1 : 0,
              is_pinned: document.getElementById('isPinnedCheckbox')?.checked ? 1 : 0,
              lang_content: {}
          };

          let hasContentForDefaultLang = false;

          langList.forEach(({ code }) => {
              const titleInput = document.querySelector(`input[name="title_${code}"]`);
              const editorDiv = document.getElementById(`editor_${code}`);
              const htmlEditorDiv = document.getElementById(`htmlEditor_${code}`);

              if (!titleInput || !editorDiv || !htmlEditorDiv) {
                  console.warn(`언어 코드 ${code} 에 대한 입력 필드 또는 에디터 DIV를 찾을 수 없습니다.`);
                  return;
              }

              let contentToSave = '';
              // 현재 활성화된 모드에 따라 내용을 가져옵니다.
              if (htmlEditorDiv.style.display === 'block') { 
                  contentToSave = htmlEditorDiv.value.trim();
              } else {
                  const blContent = editorDiv.querySelector('.bl-content');
                  // bl-content가 없다면 전체 editorDiv.innerHTML을 사용
                  contentToSave = blContent ? blContent.innerHTML.trim() : editorDiv.innerHTML.trim();
              }

              // 내용이 비어있거나 기본 플레이스홀더 내용인 경우 '<p><br></p>'로 통일
              if (!contentToSave || contentToSave === '<div><br></div>' || contentToSave === '<p><br></p>') {
                  contentToSave = '<p><br></p>';
              }

              postData.lang_content[code] = {
                  title: titleInput.value.trim(),
                  content: contentToSave
              };

              if (code === 'ko' && (postData.lang_content[code].title || postData.lang_content[code].content !== '<p><br></p>')) {
                  hasContentForDefaultLang = true;
              }
          });

          if (!postData.categories || postData.categories.length === 0) {
              return showCustomMessage("최소 하나의 카테고리를 선택해주세요.");
          }

          if (!hasContentForDefaultLang) {
            return showCustomMessage("한국어 제목 또는 내용을 입력해주세요.");
          }
      
          const submitUrl = IS_EDIT_PAGE && POST_ID ? `/${CURRENT_PAGE_LANG}/edit/${POST_ID}` : `/${CURRENT_PAGE_LANG}/savePost`;

          fetch(submitUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(postData)
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              showCustomMessage("성공적으로 저장되었습니다!", false, () => {
                if (IS_EDIT_PAGE && POST_ID) {
                  window.location.href = `/${CURRENT_PAGE_LANG}/post/${POST_ID}`;
                } else if (data.postId) {
                  window.location.href = `/${CURRENT_PAGE_LANG}/post/${data.postId}`;
                } else {
                  window.location.href = `/${CURRENT_PAGE_LANG}/`;
                }
              });
            } else {
              showCustomMessage("저장 실패: " + data.error);
            }
          })
          .catch(err => {
            console.error("저장 중 오류:", err);
            showCustomMessage("저장 중 오류가 발생했습니다.");
          });
        }
      
    // ** format 함수 수정 (드래그 유지) **
    function format(command, value = null) {
        // 현재 포커스된 요소가 제목 입력 필드인지 확인
        const activeElement = document.activeElement;
        if (activeElement && activeElement.tagName === 'INPUT' && activeElement.type === 'text' && activeElement.name.startsWith('title_')) {
            // 제목 입력 필드에 포커스가 있다면, 에디터에 강제 포커스를 주지 않고 리턴
            return; 
        }

        if (!currentActiveEditor) return; // 활성 에디터가 없으면 리턴

        // 드래그 유지: execCommand 전에 선택 영역을 복원하고, 에디터에 포커스
        restoreSelection(); 
        currentActiveEditor.focus();
        
        document.execCommand("styleWithCSS", false, false);
        document.execCommand(command, false, value);
        setTimeout(detectStyle, 100);
        saveSelection(); // 변경 후 선택 영역 다시 저장
    }

    // ** applyStyle 함수 개선 (드래그 유지 및 스타일 적용) **
    function applyStyle(event, tag) {
        // 드롭다운 메뉴 아이템 클릭 시, 브라우저의 기본 포커스 이동 및 선택 해제 방지
        event.preventDefault(); 
        event.stopPropagation(); // 이벤트 버블링도 막아줍니다.

        if (!currentActiveEditor) {
            console.warn("현재 활성화된 에디터가 없습니다.");
            return;
        }
        
        // 드롭다운 닫기
        const styleDropdown = currentActiveEditor.closest('.lang-meta-block').querySelector('#styleDropdown');
        if (styleDropdown) {
            styleDropdown.classList.remove('show');
        }

        // 드래그 유지: 스타일 적용 전에 선택 영역 복원
        restoreSelection(); 
        currentActiveEditor.focus(); // 에디터에 포커스 (restoreSelection 후 포커스)

        const sel = window.getSelection();
        if (!sel.rangeCount || sel.isCollapsed) {
            // 선택 영역이 없거나 선택이 접혀있으면 (드래그 안함),
            // 현재 커서 위치에 스타일을 적용하거나, 경고를 표시
            // 여기서는 경고만 표시
            console.warn("선택 영역이 없어 스타일을 적용할 수 없습니다. 텍스트를 선택해주세요.");
            return;
        }

        // 에디터 외부의 선택 영역은 무시
        if (!currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) {
            console.warn("에디터 외부의 선택 영역입니다.");
            return;
        }

        const range = sel.getRangeAt(0);
        const contents = range.extractContents(); // 선택된 내용 추출

        let wrapperElement;

        // 특정 태그에 따라 래퍼 엘리먼트 생성 및 클래스 추가
        switch (tag) {
            case 'h1':
            case 'h2':
            case 'h3':
            case 'p':
            case 'small':
            case 'footer':
                wrapperElement = document.createElement(tag);
                break;
            case 'h4': // '빨간 머리말'
                wrapperElement = document.createElement('h4');
                wrapperElement.classList.add('red'); // 'red' 클래스 추가
                break;
            case 'span': // '레이블'
                wrapperElement = document.createElement('span');
                wrapperElement.classList.add('label');
                break;
            case 'strong': // '진한 레이블'
                wrapperElement = document.createElement('strong');
                wrapperElement.classList.add('label', 'label-bold');
                break;
            default:
                console.warn(`알 수 없는 스타일 태그: ${tag}`);
                return;
        }

        // 추출한 내용을 래퍼 엘리먼트에 추가
        wrapperElement.appendChild(contents);

        // 래퍼 엘리먼트를 원래 선택 영역 위치에 삽입
        range.insertNode(wrapperElement);

        // 삽입된 새 엘리먼트를 다시 선택하여 사용자에게 피드백 제공
        sel.removeAllRanges();
        const newRange = document.createRange();
        newRange.selectNode(wrapperElement);
        sel.addRange(newRange);

        saveSelection(); // 변경된 선택 영역 저장
        detectStyle(); // 현재 스타일 다시 감지
    }

      function insertImage() {
          showCustomInput("이미지 URL을 입력하세요:", (url) => {
            if (url) format('insertImage', url);
          });
      }

      function saveContent() {
          showCustomMessage("임시 저장 완료!");
      }

    // ** toggleDropdown 함수 수정 (event 인자 추가 및 preventDefault) **
      function toggleDropdown(event) {
          // 토글 버튼 클릭 시, 브라우저의 기본 포커스 이동 및 선택 해제 방지
          event.preventDefault(); 
          event.stopPropagation(); // 이벤트 버블링도 막아줍니다.

          const styleDropdown = currentActiveEditor.closest('.lang-meta-block').querySelector('#styleDropdown');
          if (styleDropdown) {
              // 드롭다운 열기 전에 현재 선택 영역 저장
              saveSelection(); 
              styleDropdown.classList.toggle('show');
          }
      }

      function updateCurrentStyle(tagName) {
          const labelMap = {
              h1: "제목",
              h2: "부제목",
              h3: "머리말 1",
              h4: "빨간 머리말",
              p: "본문",
              small: "설명",
              footer: "머리말 및 꼬리말",
              span: "레이블",
              strong: "진한 레이블"
          };
          const label = labelMap[tagName.toLowerCase()] || tagName;
          const currentStyleToggle = currentActiveEditor.closest('.lang-meta-block').querySelector('.dropdown-toggle');
          if (currentStyleToggle) {
              currentStyleToggle.innerText = `${label} ▼`;
          }
      }

      function detectStyle() {
        if (!currentActiveEditor) return;
        const sel = window.getSelection();
        // 선택 영역이 없거나, 현재 활성 에디터 내에 있지 않다면 기본 스타일 표시
        if (!sel.rangeCount || !currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) {
            updateCurrentStyle('p');
            return;
        }
        let node = sel.getRangeAt(0).startContainer;

        if (node.nodeType === 3) node = node.parentNode; // 텍스트 노드면 부모 요소로

        while (node && node !== currentActiveEditor) {
          const tag = node.tagName?.toLowerCase();
          // h4 태그이면서 'red' 클래스를 가지고 있는지 확인
          if (tag === 'h4' && node.classList.contains('red')) {
            updateCurrentStyle('h4');
            return;
          }
          // span 태그이면서 'label' 클래스를 가지고 있는지 확인
          if (tag === 'span' && node.classList.contains('label')) {
            updateCurrentStyle('span');
            return;
          }
          // strong 태그이면서 'label-bold' 클래스를 가지고 있는지 확인
          if (tag === 'strong' && node.classList.contains('label-bold')) {
            updateCurrentStyle('strong');
            return;
          }
          if (['h1', 'h2', 'h3', 'p', 'small', 'footer'].includes(tag)) {
            updateCurrentStyle(tag);
            return;
          }
          node = node.parentNode;
        }
        updateCurrentStyle('p'); // 기본값
      }

      function saveSelection() {
          const sel = window.getSelection();
          // currentActiveEditor가 존재하고, 현재 선택 영역이 그 안에 있을 때만 저장
          if (sel.rangeCount > 0 && currentActiveEditor && currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) {
              savedRange = sel.getRangeAt(0).cloneRange();
          } else {
              savedRange = null; // 유효하지 않은 경우 null로 초기화
          }
      }

      function restoreSelection() {
          const sel = window.getSelection();
          if (savedRange && currentActiveEditor) {
              // 저장된 영역이 currentActiveEditor 내부에 유효한지 다시 확인
              if (currentActiveEditor.contains(savedRange.commonAncestorContainer)) {
                  sel.removeAllRanges();
                  sel.addRange(savedRange);
              } else {
                  // 유효하지 않은 경우, 에디터에 포커스를 주고 커서를 끝으로 이동 (혹시 모를 오류 방지)
                  currentActiveEditor.focus();
                  const range = document.createRange();
                  range.selectNodeContents(currentActiveEditor);
                  range.collapse(false); // 끝으로 이동
                  sel.removeAllRanges();
                  sel.addRange(range);
                  savedRange = range; // 새로운 유효한 범위로 저장
              }
          } else if (currentActiveEditor) {
              // 저장된 범위가 없지만 에디터가 활성화된 경우, 에디터에 포커스를 주고 커서를 끝으로 이동
              currentActiveEditor.focus();
              const range = document.createRange();
              range.selectNodeContents(currentActiveEditor);
              range.collapse(false);
              sel.removeAllRanges();
              sel.addRange(range);
              savedRange = range;
          }
      }

      function setColor(command, color) {
        restoreSelection();
        const sel = window.getSelection();
        if (!sel.rangeCount || sel.isCollapsed || !currentActiveEditor || !currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) return;

        const range = sel.getRangeAt(0);

        if (color === "__clear__") {
          const contents = range.cloneContents();
          const tempDiv = document.createElement('div');
          tempDiv.appendChild(contents);

          const spans = tempDiv.querySelectorAll("span");
          spans.forEach(span => {
            if (command === 'foreColor') span.style.color = '';
            else if (command === 'hiliteColor') span.style.backgroundColor = '';
            if (!span.style.cssText) {
                while (span.firstChild) {
                    span.parentNode.insertBefore(span.firstChild, span);
                }
                span.parentNode.removeChild(span);
            }
          });
          range.deleteContents();
          while (tempDiv.firstChild) {
              range.insertNode(tempDiv.firstChild);
          }
          saveSelection();
          detectStyle();
          return;
        }

        document.execCommand(command, false, color);
        saveSelection();
        detectStyle();
      }

      function getCurrentBlockTag() {
        if (!currentActiveEditor) return 'p';
        const sel = window.getSelection();
        if (!sel.rangeCount || !currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) return 'p';

        let node = sel.getRangeAt(0).startContainer;
        while (node && node !== currentActiveEditor) {
          if (node.nodeType === 1) {
            const tag = node.tagName.toLowerCase();
            if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
              return tag;
            }
          }
          node = node.parentNode;
        }
        return 'p';
      }

      /**
       * 에디터 내에서 일반 텍스트 URL을 <a> 태그로 자동 변환합니다.
       * @param {HTMLElement} editor - contenteditable 에디터 엘리먼트.
       */
      function autoConvertUrlToLink(editor) {
          if (!editor || editor.style.display === 'none') return; 

          const blContent = editor.querySelector('.bl-content');
          if (!blContent) return;

          const selection = window.getSelection();
          let savedRange = null;
          if (selection.rangeCount > 0) {
              savedRange = selection.getRangeAt(0).cloneRange();
          }

          const urlRegex = /(?<!\S)((https?:\/\/[^\s<>"']+|www\.[^\s<>"']+\.[a-zA-Z]{2,}))(?!\S)/g;

          const processNode = (node) => {
              if (node.nodeType === Node.TEXT_NODE) {
                  const text = node.nodeValue;
                  let match;
                  let lastIndex = 0;
                  const fragment = document.createDocumentFragment();
                  let replaced = false; 

                  const currentUrlRegex = /(?<!\S)((https?:\/\/[^\s<>"']+|www\.[^\s<>"']+\.[a-zA-Z]{2,}))(?!\S)/g;

                  while ((match = currentUrlRegex.exec(text)) !== null) {
                      const fullUrl = match[0];
                      let href = fullUrl;

                      if (href.startsWith('www.') && !href.startsWith('http')) {
                          href = 'http://' + href;
                      }

                      if (match.index > lastIndex) {
                          fragment.appendChild(document.createTextNode(text.substring(lastIndex, match.index)));
                      }

                      const link = document.createElement('a');
                      link.href = href;
                      link.target = "_blank"; 
                      link.rel = "noopener noreferrer"; 
                      link.textContent = fullUrl;
                      fragment.appendChild(link);
                      replaced = true;

                      lastIndex = currentUrlRegex.lastIndex;
                  }

                  if (lastIndex < text.length) {
                      fragment.appendChild(document.createTextNode(text.substring(lastIndex)));
                  }

                  if (replaced && fragment.hasChildNodes()) {
                      node.replaceWith(fragment);
                  }
              }
              else if (node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() !== 'a' && node.tagName.toLowerCase() !== 'iframe') {
                  Array.from(node.childNodes).forEach(processNode);
              }
          };

          Array.from(blContent.childNodes).forEach(processNode);

          if (savedRange) {
              try {
                  selection.removeAllRanges();
                  selection.addRange(savedRange);
              } catch (e) {
                  const newRange = document.createRange();
                  newRange.selectNodeContents(blContent);
                  newRange.collapse(false); 
                  selection.removeAllRanges();
                  selection.addRange(newRange);
              }
          }
      }

      /**
       * 주어진 에디터 내부의 유튜브 링크 (<a> 태그 또는 일반 텍스트)를 유튜브 임베드 iframe으로 변환합니다.
       * @param {HTMLElement} editor - `contenteditable` 속성을 가진 에디터 엘리먼트 (예: `editor_ko`).
       */
      function convertYouTubeLinksToEmbeds(editor) {
        if (!editor) return;

        const blContent = editor.querySelector('.bl-content');
        if (!blContent || editor.style.display === 'none') return;

        const youtubeRegex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/)([\w-]{11})(?:\S+)?/i;
        const googleUserContentYoutubeRegex = /(?:https?:\/\/)?googleusercontent\.com\/youtube\.com\/embed\/([\w-]{11})(?:\S+)?/i;

        const selection = window.getSelection();
        let savedRange = null;
        if (selection.rangeCount > 0) {
            savedRange = selection.getRangeAt(0).cloneRange();
        }

        const nodesToProcess = [];
        const treeWalker = document.createTreeWalker(
            blContent,
            NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,
            {
                acceptNode: (node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        if (node.tagName.toLowerCase() === 'iframe' || node === editor) {
                            return NodeFilter.FILTER_SKIP;
                        }
                        if (node.tagName.toLowerCase() === 'a' && (node.href.match(youtubeRegex) || node.href.match(googleUserContentYoutubeRegex))) {
                            return NodeFilter.FILTER_ACCEPT; 
                        }
                    }
                    return NodeFilter.FILTER_ACCEPT;
                }
            },
            false
        );

        let currentNode;
        while ((currentNode = treeWalker.nextNode())) {
            nodesToProcess.push(currentNode);
        }

        nodesToProcess.forEach(node => {
            let replaced = false;

            if (node.nodeType === Node.TEXT_NODE) {
                const text = node.nodeValue;
                const fragment = document.createDocumentFragment();
                let currentText = text;

                const tempYoutubeRegex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/)([\w-]{11})(?:\S+)?/i;
                let match;

                while ((match = tempYoutubeRegex.exec(currentText)) !== null) {
                    const videoId = match[1];

                    if (match.index > 0) {
                        fragment.appendChild(document.createTextNode(currentText.substring(0, match.index)));
                    }

                    const iframe = document.createElement('iframe');
                    iframe.setAttribute('src', `https://www.youtube.com/embed/${videoId}`); 
                    iframe.setAttribute('width', '560'); 
                    iframe.setAttribute('height', '315'); 
                    iframe.setAttribute('frameborder', '0');
                    iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
                    iframe.setAttribute('allowfullscreen', '');
                    iframe.setAttribute('loading', 'lazy'); 
                    iframe.classList.add('youtube-embed'); 

                    fragment.appendChild(iframe);
                    replaced = true;
                    currentText = currentText.substring(tempYoutubeRegex.lastIndex);
                    tempYoutubeRegex.lastIndex = 0; 
                }

                if (currentText.length > 0) {
                    fragment.appendChild(document.createTextNode(currentText));
                }

                if (replaced && fragment.hasChildNodes()) {
                    node.replaceWith(fragment);
                }
            } else if (node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() === 'a') {
                const href = node.getAttribute('href');
                if (href) {
                    let match = href.match(youtubeRegex);
                    if (!match) { 
                        match = href.match(googleUserContentYoutubeRegex);
                    }

                    if (match) {
                        const videoId = match[1];

                        const iframe = document.createElement('iframe');
                        iframe.setAttribute('src', `https://www.youtube.com/embed/${videoId}`); 
                        iframe.setAttribute('width', '560');
                        iframe.setAttribute('height', '315');
                        iframe.setAttribute('frameborder', '0');
                        iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
                        iframe.setAttribute('allowfullscreen', '');
                        iframe.setAttribute('loading', 'lazy');
                        iframe.classList.add('youtube-embed');

                        node.replaceWith(iframe); 
                    }
                }
            }
        });

        if (savedRange) {
            try {
                selection.removeAllRanges();
                selection.addRange(savedRange);
            } catch (e) {
                const newRange = document.createRange();
                newRange.selectNodeContents(blContent);
                newRange.collapse(false);
                selection.removeAllRanges();
                selection.addRange(newRange);
            }
        }
      }

      // ** 목차 삽입 기능 (insertTOC) - 원래 코드 복구 **
      function insertTOC() {
        // 여기에 원래 목차 삽입 기능 코드를 다시 넣어주세요.
        // 예시: 
        // const headings = currentActiveEditor.querySelectorAll('h1, h2, h3, h4');
        // let tocHtml = '<ul style="list-style: none; padding: 0;">';
        // headings.forEach((heading, index) => {
        //     const id = `toc-${index}`;
        //     heading.id = id; // 제목에 ID 부여
        //     tocHtml += `<li style="margin-left: ${parseInt(heading.tagName[1]) * 15}px;"><a href="#${id}">${heading.textContent}</a></li>`;
        // });
        // tocHtml += '</ul>';
        // document.execCommand('insertHTML', false, tocHtml);
        showCustomMessage("목차 삽입 기능을 구현할 코드를 이 함수 안에 넣어주세요. (현재는 빈 기능입니다.)"); 
      }

      // ** HTML 삽입 팝업 (openHtmlPopup) - 원래 코드 복구 **
      function openHtmlPopup() {
        showCustomInput("삽입할 HTML 코드를 입력하세요:", (htmlCode) => {
          if (htmlCode) {
            document.execCommand('insertHTML', false, htmlCode);
          }
        });
      }


    // ** DOMContentLoaded 이벤트 리스너: 에디터 초기화 및 이벤트 바인딩 **
    document.addEventListener('DOMContentLoaded', () => {
        const langSelector = document.getElementById('langSelector');
        if (langSelector) {
            langSelector.addEventListener('change', (event) => {
                const selectedLang = event.target.value;
                initializeEditorForLang(selectedLang);
            });
        }

        // 초기 페이지 로드 시 현재 언어에 맞는 에디터 활성화
        initializeEditorForLang(CURRENT_PAGE_LANG);

        // 각 디자인 모드 에디터에 이벤트 리스너 바인딩
        document.querySelectorAll('.language-editor').forEach(editor => {
            editor.addEventListener('focus', () => {
                currentActiveEditor = editor;
                detectStyle();
            });
            editor.addEventListener('mouseup', saveSelection); // 마우스 드래그 끝날 때 선택 영역 저장
            editor.addEventListener('keyup', (e) => { // 키 입력 시
                detectStyle(); // 스타일 감지
                // 스페이스바, 엔터, 마침표, 슬래시 등 입력 시 URL/YouTube 링크 자동 변환 시도
                if (e.key === ' ' || e.key === 'Enter' || e.key === '.' || e.key === '/') {
                    autoConvertUrlToLink(currentActiveEditor);
                    convertYouTubeLinksToEmbeds(currentActiveEditor);
                }
                saveSelection(); // 키 입력 후 선택 영역 저장
            });
            editor.addEventListener('paste', (e) => {
                // 붙여넣기 완료 후 URL/YouTube 링크 자동 변환
                setTimeout(() => {
                    autoConvertUrlToLink(currentActiveEditor);
                    convertYouTubeLinksToEmbeds(currentActiveEditor);
                }, 0);
            });
            // 선택 영역이 변경될 때마다 savedRange 업데이트
            editor.addEventListener('selectionchange', () => {
                saveSelection();
            });
        });

        // 제목 입력 필드에 포커스 이벤트 리스너
        document.querySelectorAll('.title-wrap input').forEach(titleInput => {
            titleInput.addEventListener('focus', () => {
                // 제목 입력 필드에 포커스가 왔을 때, 현재 디자인 에디터가 활성화되어 있었다면 포커스를 해제
                if (currentActiveEditor && document.activeElement !== currentActiveEditor) {
                    currentActiveEditor.blur(); 
                    // currentActiveEditor를 null로 만들지는 않고, 단순히 포커스만 해제합니다.
                    // 이렇게 해야 사용자가 에디터를 다시 클릭했을 때 바로 포커스를 받을 수 있습니다.
                }
            });
        });
    });

    // ** 에디터 초기화 및 언어 전환을 위한 함수 **
    function initializeEditorForLang(langCode) {
        // 모든 언어 블록 숨기기
        document.querySelectorAll('.lang-meta-block').forEach(block => {
            block.style.display = 'none';
        });

        // 선택된 언어 블록 표시
        const currentLangBlock = document.querySelector(`.lang-meta-block[data-lang="${langCode}"]`);
        if (currentLangBlock) {
            currentLangBlock.style.display = '';
        }

        const editorDiv = document.getElementById(`editor_${langCode}`);
        const htmlEditorDiv = document.getElementById(`htmlEditor_${langCode}`);

        // 현재 활성 에디터 및 HTML 에디터 업데이트
        currentActiveEditor = editorDiv;
        currentActiveHtmlEditor = htmlEditorDiv;

        // 디자인 모드 에디터가 표시되어 있다면 포커스 (초기 로드 시 바로 에디터에 포커스)
        if (editorDiv && editorDiv.style.display !== 'none') {
            editorDiv.focus();
            detectStyle(); // 현재 스타일 감지
        }
        // HTML 모드 에디터가 표시되어 있다면 포커스
        else if (htmlEditorDiv && htmlEditorDiv.style.display !== 'none') {
            htmlEditorDiv.focus();
        }
    }

    // ** 모드 전환 함수 **
    function switchToDesignMode() {
        const currentLang = document.getElementById('langSelector').value;
        const editorDiv = document.getElementById(`editor_${currentLang}`);
        const htmlEditorDiv = document.getElementById(`htmlEditor_${currentLang}`);

        if (editorDiv && htmlEditorDiv) {
            htmlEditorDiv.style.display = 'none';
            
            // HTML 내용을 가져와서 디자인 모드 에디터에 설정
            let content = htmlEditorDiv.value;
            try {
                // HTML을 보기 좋게 정리
                content = html_beautify(content, { indent_size: 2, wrap_line_length: 80 });
            } catch (e) {
                console.error("HTML beautify error:", e);
            }
            editorDiv.innerHTML = content; // 디자인 모드에 내용 삽입
            editorDiv.style.display = 'block';
            editorDiv.focus(); // 디자인 모드로 전환 시 포커스
            currentActiveEditor = editorDiv;
            currentActiveHtmlEditor = null; // HTML 에디터는 비활성화
            detectStyle(); // 스타일 감지
            showCustomMessage("디자인 모드로 전환되었습니다.");
        }
    }

    function switchToHtmlMode() {
        const currentLang = document.getElementById('langSelector').value;
        const editorDiv = document.getElementById(`editor_${currentLang}`);
        const htmlEditorDiv = document.getElementById(`htmlEditor_${currentLang}`);

        if (editorDiv && htmlEditorDiv) {
            // 디자인 모드 내용을 가져와서 HTML 에디터에 설정
            let content = editorDiv.innerHTML;
            try {
                // HTML을 보기 좋게 정리
                content = html_beautify(content, { indent_size: 2, wrap_line_length: 80 });
            } catch (e) {
                console.error("HTML beautify error:", e);
            }
            htmlEditorDiv.value = content; // HTML 에디터에 내용 삽입
            editorDiv.style.display = 'none';
            htmlEditorDiv.style.display = 'block';
            htmlEditorDiv.focus(); // HTML 모드로 전환 시 포커스
            currentActiveHtmlEditor = htmlEditorDiv;
            currentActiveEditor = null; // 디자인 에디터는 비활성화
            showCustomMessage("HTML 모드로 전환되었습니다.");
        }
    }

  </script>
</body>
</html>