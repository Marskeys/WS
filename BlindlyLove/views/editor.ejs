<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
  <meta charset="UTF-8" />
  <title>BlindLove 에디터</title>
  <%- include('partials/head') %>
  <% if (user) { %>
    <meta name="author" content="<%= user.nickname %>">
  <% } %>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/assets/css/editor.css" />
</head>
<body>
  <%- include('partials/header') %>
  <% const isEdit = typeof post !== 'undefined' && post !== null; %>
  <% if (user) { %>
    <div style="text-align: center; font-weight: bold; margin-top:3rem;">
      <%= user.nickname %>님, 에디터에 오신 걸 환영합니다!
    </div>
  <% } %>

  <div class="editor-container">
    <div class="logo-wrap">
      <a href="/<%= lang %>/">
        <img src="/assets/images/logo.png" alt="BlindLove 로고" />
      </a>
    </div>

    <div class="lang-selector-wrap">
      <label for="langSelector">편집 중인 언어</label>
      <select id="langSelector">
        <%
          const supportedLangs = ['ko', 'en', 'fr', 'zh', 'ja'];
          const langLabels = {
              'ko': '한국어',
              'en': 'English',
              'fr': 'Français',
              'zh': '中文',
              'ja': '日本語'
          };
          supportedLangs.forEach(langCode => {
        %>
          <option value="<%= langCode %>" <%= lang === langCode ? 'selected' : '' %>><%= langLabels[langCode] %></option>
        <%
          });
        %>
      </select>
    </div>

    <%
      const langList = [
        { code: 'ko', label: '한국어' },
        { code: 'en', label: 'English' },
        { code: 'fr', label: 'Français' },
        { code: 'zh', label: '简体中文' },
        { code: 'ja', label: '日本語' }
      ];
    %>

    <% langList.forEach(({ code, label }) => { %>
      <div class="lang-meta-block" data-lang="<%= code %>" style="<%= code === lang ? '' : 'display:none;' %>">
        <div class="title-wrap">
          <input
            type="text"
            name="title_<%= code %>"
            placeholder="<%= label %> 제목"
            value="<%= post?.[code]?.title || '' %>"
          />
        </div>

        <div class="toolbar">
          <div class="dropdown">
            <div class="dropdown-toggle" id="currentStyle_<%= code %>" onclick="toggleDropdown()">본문 ▼</div>
            <div class="dropdown-menu" id="styleDropdown">
              <div class="h1" onclick="applyStyle('h1')">제목</div>
              <div class="h2" onclick="applyStyle('h2')">부제목</div>
              <div class="h3" onclick="applyStyle('h3')">머리말 1</div>
              <div class="red" onclick="applyStyle('h4')">빨간 머리말</div>
              <div class="p" onclick="applyStyle('p')">본문</div>
              <div class="desc" onclick="applyStyle('small')">설명</div>
              <div class="meta" onclick="applyStyle('footer')">머리말 및 꼬리말</div>
              <div class="label" onclick="applyStyle('span')">레이블</div>
              <div class="label label-bold" onclick="applyStyle('strong')">진한 레이블</div>
            </div>
          </div>
          <button onclick="insertTOC()" data-tooltip="목차 삽입">📑 목차</button>
          <button onclick="format('bold')" data-tooltip="굵게"><b>B</b></button>
          <button onclick="format('italic')" data-tooltip="기울이기"><i>I</i></button>
          <button onclick="format('underline')" data-tooltip="밑줄"><u>U</u></button>
          <button onclick="format('strikeThrough')" data-tooltip="취소선"><s>S</s></button>
          <button onclick="format('justifyLeft')" data-tooltip="왼쪽 정렬"><i class="fas fa-align-left"></i></button>
          <button onclick="format('justifyCenter')" data-tooltip="가운데 정렬"><i class="fas fa-align-center"></i></button>
          <button onclick="format('justifyRight')" data-tooltip="오른쪽 정렬"><i class="fas fa-align-right"></i></button>
          <button onclick="format('insertOrderedList')" data-tooltip="번호 목록"><i class="fas fa-list-ol"></i></button>
          <button onclick="format('insertUnorderedList')" data-tooltip="글머리 기호"><i class="fas fa-list-ul"></i></button>
          <button onclick="format('outdent')" data-tooltip="내어쓰기"><i class="fas fa-outdent"></i></button>
          <button onclick="format('indent')" data-tooltip="들여쓰기"><i class="fas fa-indent"></i></button>
          <button onclick="format('createLink')" data-tooltip="링크 삽입"><i class="fas fa-link"></i></button>
          <button onclick="format('unlink')" data-tooltip="링크 제거"><i class="fas fa-unlink"></i></button>
          
          <div class="color-tool" id="foreTool">
            <button id="foreColorBtn" data-tooltip="글자 색상" onmousedown="saveSelection()">
              <i class="fas fa-pencil-alt" id="foreIcon"></i>
            </button>
            <div class="color-palette" id="forePalette">
              <button style="background:black" onclick="setColor('foreColor', 'black')"></button>
              <button style="background:red" onclick="setColor('foreColor', 'red')"></button>
              <button style="background:orange" onclick="setColor('foreColor', 'orange')"></button>
              <button style="background:green" onclick="setColor('foreColor', 'green')"></button>
              <button style="background:blue" onclick="setColor('foreColor', 'blue')"></button>
              <button class="none-icon" onclick="setColor('foreColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('foreColor', this.value)" />
              </label>
            </div>
          </div>
          
          <div class="color-tool" id="bgTool">
            <button id="bgColorBtn" data-tooltip="배경 색상" onmousedown="saveSelection()">
              <i class="fas fa-fill-drip" id="bgIcon"></i>
            </button>
            <div class="color-palette" id="bgPalette">
              <button style="background:yellow" onclick="setColor('hiliteColor', 'yellow')"></button>
              <button style="background:lightblue" onclick="setColor('hiliteColor', 'lightblue')"></button>
              <button style="background:lightgreen" onclick="setColor('hiliteColor', 'lightgreen')"></button>
              <button style="background:pink" onclick="setColor('hiliteColor', 'pink')"></button>
              <button style="background:#ccc" onclick="setColor('hiliteColor', '#ccc')"></button>
              <button class="none-icon" onclick="setColor('hiliteColor', '__clear__')" title="색 없음"></button>
              <label class="custom-color">
                🎨<input type="color" onchange="setColor('hiliteColor', this.value)" />
              </label>
            </div>
          </div>
          <button onclick="openHtmlPopup()" data-tooltip="HTML 삽입"><i class="fas fa-code"></i></button> 
          <button onclick="insertImage()" data-tooltip="이미지 삽입"><i class="fas fa-image"></i></button>
          <button onclick="format('removeFormat')" data-tooltip="형식 제거">지우기</button>
        </div>
    
        <% if (user && Number(user.is_admin) === 1) { %>
        <div class="mode-toggle">
          <button onclick="switchToDesignMode()">디자인 모드</button>
          <button onclick="switchToHtmlMode()">HTML 모드</button>
        </div>
        <% } %>
        
        <div class="editor-area-wrapper">
          <div id="editor_<%= code %>"
               contenteditable="true"
               class="editor language-editor"
               spellcheck="false"
               data-lang-editor="<%= code %>"
               style="<%= code === lang ? '' : 'display:none;' %>"
          >
            <%
              let initialContent = post?.[code]?.content || '<p><br></p>';
              const isWrapped = initialContent.startsWith('<div class="bl-content"');
              if (!isWrapped) {
                initialContent = `
                  <div class="bl-content" style="white-space:normal; line-height: 1.7;">
                    ${initialContent}
                  </div>
                `;
              }
            %>
            <%- initialContent %>
          </div>
          <textarea id="htmlEditor_<%= code %>" class="editor html-editor" style="display: none;"></textarea>
        </div>

        <label style="display: inline-flex; align-items: center; gap: 0.5rem; margin-top: 1rem;">
          <input type="checkbox" id="isPrivateCheckbox_<%= code %>" name="is_private_<%= code %>" value="1" <%= post?.[code]?.is_private ? 'checked' : '' %> />
          비공개 글로 설정
        </label>

        <% if (user && Number(user.is_admin) === 1) { %>
          <label style="display: inline-flex; align-items: center; gap: 0.5rem; margin-top: 1rem;">
            <input type="checkbox" id="isPinnedCheckbox_<%= code %>" name="is_pinned_<%= code %>" value="1" <%= post?.[code]?.is_pinned ? 'checked' : '' %> />
            상단에 고정하기 📌
          </label>
        <% } %>

      </div>
    <% }) %> 

    <div class="category-box">
      <label>카테고리 선택:</label>
      <div class="category-list" id="categoryList"></div>
      <button class="bl-button add" onclick="addCategory()">➕ 추가</button>
    </div>

    <div class="save-button-wrap">
      <button type="button" class="bl-button save" onclick="postContent()">💾 저장</button>
    </div>

  </div> 
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.0/beautify-html.min.js"></script>
  <script>
    let selectedCategories = []; // 기본값으로 빈 배열 선언
    <% if (post && post.categories) { %>
      // post.categories가 있을 경우에만 JSON.stringify를 사용하여 할당
      selectedCategories = <%- JSON.stringify(post.categories.split(',')) %>;
    <% } %>

    let categories = [];
    let savedRange = null;

    let currentActiveEditor = null; // 현재 활성 디자인 모드 에디터 div 엘리먼트
    let currentActiveHtmlEditor = null; // 현재 활성 HTML 모드 에디터 textarea 엘리먼트

    const langList = [
        { code: 'ko', label: '한국어' },
        { code: 'en', label: 'English' },
        { code: 'fr', label: 'Français' },
        { code: 'zh', label: '简体中文' },
        { code: 'ja', label: '日本語' }
    ];
    
    const IS_EDIT_PAGE = <%- isEdit ? 'true' : 'false' %>; 
    const POST_ID = <%- post && post.id ? JSON.stringify(post.id) : 'null' %>;
    const CURRENT_PAGE_LANG = '<%= lang %>';

    function renderCategories() {
        const list = document.getElementById('categoryList');
        list.innerHTML = '';
        categories.forEach((cat, index) => {
          const item = document.createElement('div');
          item.className = 'category-item';
          if (selectedCategories.includes(cat)) item.classList.add('selected');
          item.innerText = cat;
    
          item.onclick = () => {
            const i = selectedCategories.indexOf(cat);
            if (i === -1) selectedCategories.push(cat);
            else selectedCategories.splice(i, 1);
            renderCategories();
          };
    
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-btn';
          removeBtn.innerText = '×';
          removeBtn.onclick = (e) => {
            e.stopPropagation();
            showCustomMessage(`'${cat}' 카테고리를 삭제하시겠습니까?`, true, () => {
              fetch(`/api/categories/${encodeURIComponent(cat)}`, {
                method: 'DELETE'
              })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  categories.splice(index, 1);
                  selectedCategories = selectedCategories.filter(c => c !== cat);
                  renderCategories();
                  showCustomMessage("카테고리가 성공적으로 삭제되었습니다.");
                } else {
                  showCustomMessage("삭제 실패: " + data.error);
                }
              })
              .catch(err => {
                console.error("삭제 오류:", err);
                showCustomMessage("삭제 중 오류가 발생했습니다.");
              });
            });
          };
    
          item.appendChild(removeBtn);
          list.appendChild(item);
        });
      }
    
      function addCategory() {
        showCustomInput("새 카테고리 이름을 입력하세요:", (newCat) => {
          newCat = newCat?.trim();
          if (!newCat || categories.includes(newCat)) return;
      
          fetch('/api/categories', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newCat })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              categories.push(newCat);
              renderCategories();
              showCustomMessage("카테고리가 성공적으로 추가되었습니다.");
            } else {
              showCustomMessage("추가 실패: " + data.error);
            }
          })
          .catch(err => {
            console.error("추가 오류:", err);
            showCustomMessage("추가 중 오류가 발생했습니다.");
          });
        });
      }
    
      function postContent() {
          const postData = {
              categories: selectedCategories,
              is_private: document.getElementById('isPrivateCheckbox_ko')?.checked ? 1 : 0, 
              is_pinned: document.getElementById('isPinnedCheckbox_ko')?.checked ? 1 : 0, 
              lang_content: {}
          };

          let hasContentForDefaultLang = false;

          langList.forEach(({ code }) => {
              const titleInput = document.querySelector(`input[name="title_${code}"]`);
              const editorDiv = document.getElementById(`editor_${code}`);
              const htmlEditorDiv = document.getElementById(`htmlEditor_${code}`);

              if (!titleInput || !editorDiv || !htmlEditorDiv) {
                  console.warn(`언어 코드 ${code} 에 대한 입력 필드 또는 에디터 DIV를 찾을 수 없습니다.`);
                  return;
              }

              let contentToSave = '';
              if (htmlEditorDiv.style.display === 'block') { // HTML 모드인 경우
                  contentToSave = htmlEditorDiv.value.trim();
              } else { // 디자인 모드인 경우
                  // 디자인 모드에서 내용을 가져올 때, bl-content 내부의 내용만 가져오도록 합니다.
                  const blContent = editorDiv.querySelector('.bl-content');
                  contentToSave = blContent ? blContent.innerHTML.trim() : editorDiv.innerHTML.trim();
              }

              // 내용이 비어있거나 기본 플레이스홀더 내용인 경우 '<p><br></p>'로 통일
              if (!contentToSave || contentToSave === '<div><br></div>' || contentToSave === '<p><br></p>') {
                  contentToSave = '<p><br></p>';
              }

              postData.lang_content[code] = {
                  title: titleInput.value.trim(),
                  content: contentToSave
              };

              if (code === 'ko' && (postData.lang_content[code].title || postData.lang_content[code].content !== '<p><br></p>')) {
                  hasContentForDefaultLang = true;
              }
          });

          if (!postData.categories || postData.categories.length === 0) {
              return showCustomMessage("최소 하나의 카테고리를 선택해주세요.");
          }

          if (!hasContentForDefaultLang) {
            return showCustomMessage("한국어 제목 또는 내용을 입력해주세요.");
          }
      
          // 폼 제출 URL을 현재 언어 경로를 포함하도록 수정
          const submitUrl = IS_EDIT_PAGE && POST_ID ? `/${CURRENT_PAGE_LANG}/edit/${POST_ID}` : `/${CURRENT_PAGE_LANG}/savePost`;

          fetch(submitUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(postData)
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              showCustomMessage("성공적으로 저장되었습니다!", false, () => {
                // 저장 후 리디렉션 URL에도 현재 언어 경로를 포함
                if (IS_EDIT_PAGE && POST_ID) {
                  window.location.href = `/${CURRENT_PAGE_LANG}/post/${POST_ID}`;
                } else if (data.postId) { // 새로 생성된 글의 경우 ID가 있을 수 있음
                  window.location.href = `/${CURRENT_PAGE_LANG}/post/${data.postId}`;
                } else {
                  window.location.href = `/${CURRENT_PAGE_LANG}/`; // 글 ID가 없는 경우 메인 페이지로
                }
              });
            } else {
              showCustomMessage("저장 실패: " + data.error);
            }
          })
          .catch(err => {
            console.error("저장 중 오류:", err);
            showCustomMessage("저장 중 오류가 발생했습니다.");
          });
        }
      
      function format(command, value = null) {
          if (!currentActiveEditor) return;
          currentActiveEditor.focus();
          document.execCommand("styleWithCSS", false, false);
          document.execCommand(command, false, value);
          setTimeout(detectStyle, 100);
      }

      function applyStyle(tag) {
        if (!currentActiveEditor) return;
        const blockTags = ['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'];

        restoreSelection();
        currentActiveEditor.focus();

        if (blockTags.includes(tag)) {
          document.execCommand("styleWithCSS", false, false);
          document.execCommand('formatBlock', false, `<${tag.toUpperCase()}>`);
          saveSelection();
        } else {
          const sel = window.getSelection();
          if (!sel.rangeCount || sel.isCollapsed) return;
          if (!currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) return;

          const range = sel.getRangeAt(0);
          const tempElement = document.createElement(tag);
          if (tag === 'span') tempElement.classList.add('label');
          if (tag === 'strong') tempElement.classList.add('label', 'label-bold');

          try {
            const contents = range.extractContents();
            tempElement.appendChild(contents);
            range.insertNode(tempElement);

            sel.removeAllRanges();
            const newRange = document.createRange();
            newRange.selectNode(tempElement);
            sel.addRange(newRange);

            saveSelection();
          } catch (e) {
            console.error("applyStyle(span/strong) 오류:", e);
          }
        }
        setTimeout(detectStyle, 100);
      }

      function insertImage() {
          showCustomInput("이미지 URL을 입력하세요:", (url) => {
            if (url) format('insertImage', url);
          });
      }

      function saveContent() {
          showCustomMessage("임시 저장 완료!");
      }

      function toggleDropdown() {
          const styleDropdown = currentActiveEditor.closest('.lang-meta-block').querySelector('#styleDropdown');
          if (styleDropdown) {
              styleDropdown.classList.toggle('show');
          }
      }

      function updateCurrentStyle(tagName) {
          const labelMap = {
              h1: "제목",
              h2: "부제목",
              h3: "머리말 1",
              h4: "빨간 머리말",
              p: "본문",
              small: "설명",
              footer: "머리말 및 꼬리말",
              span: "레이블",
              strong: "진한 레이블"
          };
          const label = labelMap[tagName.toLowerCase()] || tagName;
          const currentStyleToggle = currentActiveEditor.closest('.lang-meta-block').querySelector('.dropdown-toggle');
          if (currentStyleToggle) {
              currentStyleToggle.innerText = `${label} ▼`;
          }
      }

      function detectStyle() {
        if (!currentActiveEditor) return;
        const sel = window.getSelection();
        if (!sel.rangeCount || !currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) {
            updateCurrentStyle('p');
            return;
        }
        let node = sel.getRangeAt(0).startContainer;

        if (node.nodeType === 3) node = node.parentNode;

        while (node && node !== currentActiveEditor) {
          const tag = node.tagName?.toLowerCase();
          if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
            updateCurrentStyle(tag);
            return;
          }
          node = node.parentNode;
        }
        updateCurrentStyle('p');
      }

      function saveSelection() {
          const sel = window.getSelection();
          if (sel.rangeCount > 0 && currentActiveEditor && currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) {
              savedRange = sel.getRangeAt(0).cloneRange();
          } else {
              savedRange = null;
          }
      }

      function restoreSelection() {
          const sel = window.getSelection();
          if (savedRange && currentActiveEditor) {
              sel.removeAllRanges();
              sel.addRange(savedRange);
          }
      }

      function setColor(command, color) {
        restoreSelection();
        const sel = window.getSelection();
        if (!sel.rangeCount || sel.isCollapsed || !currentActiveEditor || !currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) return;

        const range = sel.getRangeAt(0);

        if (color === "__clear__") {
          const contents = range.cloneContents();
          const spans = contents.querySelectorAll("span");

          spans.forEach(span => {
            if (command === 'foreColor') span.style.color = '';
            else if (command === 'hiliteColor') span.style.backgroundColor = '';
          });

          range.deleteContents();
          range.insertNode(contents);
          return;
        }

        const span = document.createElement("span");
        if (command === "foreColor") span.style.color = color;
        else if (command === "hiliteColor") span.style.backgroundColor = color;

        const contents = range.extractContents();
        span.appendChild(contents);
        range.insertNode(span);

        sel.removeAllRanges();
        const newRange = document.createRange();
        newRange.selectNode(span);
        sel.addRange(newRange);

        saveSelection();
        detectStyle();
      }

      function getCurrentBlockTag() {
        if (!currentActiveEditor) return 'p';
        const sel = window.getSelection();
        if (!sel.rangeCount || !currentActiveEditor.contains(sel.getRangeAt(0).commonAncestorContainer)) return 'p';

        let node = sel.getRangeAt(0).startContainer;
        while (node && node !== currentActiveEditor) {
          if (node.nodeType === 1) {
            const tag = node.tagName.toLowerCase();
            if (['h1', 'h2', 'h3', 'h4', 'p', 'small', 'footer'].includes(tag)) {
              return tag;
            }
          }
          node = node.parentNode;
        }
        return 'p';
      }

      function createMessageBox(message, isConfirm = false, onConfirm = null) {
          let modal = document.getElementById('customMessageModal');
          if (!modal) {
              modal = document.createElement('div');
              modal.id = 'customMessageModal';
              modal.style = `
                  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                  background: rgba(0,0,0,0.5); display: flex; justify-content: center;
                  align-items: center; z-index: 1000;
              `;
              document.body.appendChild(modal);
          }
          modal.innerHTML = `
              <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); max-width: 400px; width: 90%; text-align: center;">
                  <p style="color: black;">${message}</p>
                  ${isConfirm ? `
                      <button id="confirmBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                      <button id="cancelBtn" style="padding: 8px 15px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">취소</button>
                  ` : `
                      <button id="okBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                  `}
              </div>
          `;
          modal.style.display = 'flex';

          if (isConfirm) {
              document.getElementById('confirmBtn').onclick = () => {
                  modal.style.display = 'none';
                  if (onConfirm) onConfirm();
              };
              document.getElementById('cancelBtn').onclick = () => {
                  modal.style.display = 'none';
              };
          } else {
              document.getElementById('okBtn').onclick = () => {
                  modal.style.display = 'none';
                  if (onConfirm) onConfirm();
              };
          }
      }

      function showCustomMessage(message, isConfirm = false, onConfirm = null) {
          createMessageBox(message, isConfirm, onConfirm);
      }

      function showCustomInput(message, onInput) {
          let modal = document.getElementById('customInputModal');
          if (!modal) {
              modal = document.createElement('div');
              modal.id = 'customInputModal';
              modal.style = `
                  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                  background: rgba(0,0,0,0.5); display: flex; justify-content: center;
                  align-items: center; z-index: 1000;
              `;
              document.body.appendChild(modal);
          }
          modal.innerHTML = `
              <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); max-width: 400px; width: 90%; text-align: center;">
                  <p style="color: black;">${message}</p>
                  <input type="text" id="customInput" style="width: calc(100% - 20px); padding: 8px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px;" />
                  <button id="inputOkBtn" style="padding: 8px 15px; margin: 5px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">확인</button>
                  <button id="inputCancelBtn" style="padding: 8px 15px; margin: 5px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">취소</button>
              </div>
          `;
          modal.style.display = 'flex';

          document.getElementById('inputOkBtn').onclick = () => {
              const inputValue = document.getElementById('customInput').value;
              modal.style.display = 'none';
              if (onInput) onInput(inputValue);
          };
          document.getElementById('inputCancelBtn').onclick = () => {
              const inputValue = document.getElementById('customInput').value;
              modal.style.display = 'none';
              if (onInput) onInput(null);
          };
          document.getElementById('customInput').focus();
      }

      window.onclick = function(e) {
          if (!e.target.matches('.dropdown-toggle')) {
              const dropdowns = document.getElementsByClassName('dropdown-menu');
              for (let d of dropdowns) {
                  if (d.classList.contains('show')) {
                      d.classList.remove('show');
                  }
              }
          }
      };

      window.onload = () => {
          // 카테고리 불러오기 및 렌더링
          fetch(`/api/categories?lang=${CURRENT_PAGE_LANG}`)
            .then(res => res.json())
            .then(data => {
              categories = data.categories || [];
              renderCategories();
            })
            .catch(err => {
              console.error("카테고리 불러오기 오류:", err);
              categories = ['일상', '기록', '리뷰']; // 대체 카테고리
              renderCategories();
            });

          // 언어 선택 드롭다운 초기값 설정 (currentLang에 따라)
          document.getElementById('langSelector').value = CURRENT_PAGE_LANG;

          // 페이지 로드 시 현재 언어 (lang) 에디터를 활성화
          const initialEditor = document.getElementById(`editor_${CURRENT_PAGE_LANG}`);
          const initialHtmlEditor = document.getElementById(`htmlEditor_${CURRENT_PAGE_LANG}`);
          
          if (initialEditor) {
              initialEditor.style.display = 'block'; 
              currentActiveEditor = initialEditor; 
              currentActiveHtmlEditor = initialHtmlEditor;
              initialEditor.focus();
              detectStyle(); 
          } else { 
              currentActiveEditor = document.querySelector('.language-editor');
              if (currentActiveEditor) {
                currentActiveHtmlEditor = document.getElementById(`htmlEditor_${currentActiveEditor.dataset.langEditor}`);
                currentActiveEditor.style.display = 'block';
                currentActiveEditor.focus();
                detectStyle();
              }
          }

          // 모든 언어 에디터에 이벤트 리스너 추가
          const languageEditors = document.querySelectorAll('.language-editor');
          languageEditors.forEach(editor => {
              editor.addEventListener('keyup', detectStyle);
              editor.addEventListener('mouseup', detectStyle);
              editor.addEventListener('mouseup', saveSelection);
              editor.addEventListener('keyup', saveSelection);
              editor.addEventListener('focus', () => {
                  const langCode = editor.dataset.langEditor;
                  document.getElementById('langSelector').value = langCode;

                  document.querySelectorAll('.lang-meta-block').forEach(block => {
                      if (block.dataset.lang === langCode) {
                          block.style.display = '';
                      } else {
                          block.style.display = 'none';
                          const otherEditorDiv = document.getElementById(`editor_${block.dataset.lang}`);
                          const otherHtmlEditorDiv = document.getElementById(`htmlEditor_${block.dataset.lang}`);
                          if (otherEditorDiv) otherEditorDiv.style.display = 'none';
                          if (otherHtmlEditorDiv) otherHtmlEditorDiv.style.display = 'none';
                      }
                  });

                  currentActiveEditor = editor;
                  currentActiveHtmlEditor = document.getElementById(`htmlEditor_${langCode}`);
                  
                  // 포커스 시 HTML 모드였다면 디자인 모드로 자동 전환
                  if (currentActiveHtmlEditor && currentActiveHtmlEditor.style.display !== 'none') {
                      switchToDesignMode(); // code 파라미터 없이 호출
                  }
                  detectStyle();
              });
          });

          // 툴바 버튼 이벤트 리스너 추가 (선택 영역 저장)
          const toolbarButtons = document.querySelectorAll('.toolbar button, .dropdown-toggle');
          toolbarButtons.forEach(button => {
              button.addEventListener('mousedown', saveSelection);
          });
      };

      function insertTOC() {
  if (!currentActiveEditor) {
    showCustomMessage("에디터가 활성화되지 않았습니다.");
    return;
  }

  const blContentDiv = currentActiveEditor.querySelector('.bl-content');

  if (!blContentDiv) {
    showCustomMessage("에디터 내용이 올바른 형식이 아닙니다. 다시 시도해주세요.");
    return;
  }

  const headings = blContentDiv.querySelectorAll("h1, h2");
  if (!headings.length) {
    showCustomMessage("제목(h1)이나 부제목(h2)이 없어 목차를 만들 수 없습니다.");
    return;
  }

  // 기존 목차 제거
  const oldTOC = blContentDiv.querySelector(".auto-toc");
  if (oldTOC) oldTOC.remove();

  const tocWrapper = document.createElement("div");
  tocWrapper.className = "auto-toc";
  tocWrapper.contentEditable = "false";

  const tocTitle = document.createElement("strong");
  tocTitle.className = "toc-title";
  tocTitle.textContent = "📑 목차";

  const tocList = document.createElement("ul");
  tocList.className = "toc-list";
  tocList.style.margin = "0";
  tocList.style.padding = "0";

  let h1Count = 0;
  let h2Count = 0;

  headings.forEach(el => {
    const tag = el.tagName.toLowerCase();
    let number = "";

    if (tag === "h1") {
      h1Count++;
      h2Count = 0;
      number = `${h1Count}.`;
    } else if (tag === "h2") {
      h2Count++;
      number = `${h1Count}.${h2Count}`;
    }

    // ID 부여 (기존 ID 무시하고 항상 재생성)
    const id = `toc-${number.replace(/\./g, "-")}`;
    el.id = id;

    const li = document.createElement("li");
    li.className = `toc-item toc-${tag}`;

    const a = document.createElement("a");
    a.href = `#${id}`;
    a.textContent = `${number} ${el.textContent.trim()}`;
    a.onclick = function(e) {
      e.preventDefault();
      document.getElementById(id)?.scrollIntoView({ behavior: "smooth" });
    };

    li.appendChild(a);
    tocList.appendChild(li);
  });

  tocWrapper.appendChild(tocTitle);
  tocWrapper.appendChild(tocList);

  // ✅ 목차를 bl-content 가장 위에 삽입 (prepend 방식)
  blContentDiv.prepend(tocWrapper);
}
      // 수정된 switchToHtmlMode 함수: 현재 활성 에디터를 사용하도록 변경
      function switchToHtmlMode() {
  const editorDiv = currentActiveEditor;
  const htmlEditor = currentActiveHtmlEditor;

  if (!editorDiv || !htmlEditor) {
    console.error("HTML 모드 전환 실패: 활성 에디터 없음");
    return;
  }

  let currentContent = editorDiv.innerHTML.trim();

  // ✅ bl-content로 감싸져 있는지 확인
  const isWrapped = currentContent.startsWith('<div class="bl-content"');

  if (!isWrapped) {
    // 빈 상태도 감싸기
    if (!currentContent || currentContent === '<p><br></p>' || currentContent === '<div><br></div>') {
      currentContent = '<p><br></p>';
    }

    currentContent = `
<div class="bl-content" style="white-space:normal; line-height: 1.7;">
  ${currentContent}
</div>`.trim();
  }

  htmlEditor.value = html_beautify(currentContent, {
    indent_size: 2,
    wrap_attributes: 'auto',
    indent_with_tabs: false
  });

  editorDiv.style.display = 'none';
  htmlEditor.style.display = 'block';
}

      // 수정된 switchToDesignMode 함수: 현재 활성 에디터를 사용하도록 변경
      function switchToDesignMode() {
  const editorDiv = currentActiveEditor;
  const htmlEditor = currentActiveHtmlEditor;

  if (!editorDiv || !htmlEditor) {
    console.error("디자인 모드 전환 실패: 활성 에디터 없음");
    return;
  }

  let rawHtml = htmlEditor.value.trim();

  // ✅ bl-content 감싸기 누락 시 자동 추가
  if (!rawHtml.startsWith('<div class="bl-content"')) {
    rawHtml = `<div class="bl-content" style="white-space:normal; line-height: 1.7;">${rawHtml}</div>`;
  }

  editorDiv.innerHTML = rawHtml;
  htmlEditor.style.display = 'none';
  editorDiv.style.display = 'block';
  editorDiv.focus();
  detectStyle();
}

      // 언어 선택 드롭다운 변경 이벤트
      document.getElementById('langSelector').addEventListener('change', function() {
          const selectedLang = this.value;
          document.querySelectorAll('.lang-meta-block').forEach(block => {
              if (block.dataset.lang === selectedLang) {
                  block.style.display = ''; 
                  const editorDiv = document.getElementById(`editor_${selectedLang}`);
                  const htmlEditorDiv = document.getElementById(`htmlEditor_${selectedLang}`);
                  if (editorDiv) {
                      editorDiv.style.display = 'block';
                      currentActiveEditor = editorDiv;
                      currentActiveHtmlEditor = htmlEditorDiv;
                      editorDiv.focus();
                      detectStyle();
                  }
              } else {
                  block.style.display = 'none';
                  const editorDiv = document.getElementById(`editor_${block.dataset.lang}`);
                  const htmlEditorDiv = document.getElementById(`htmlEditor_${block.dataset.lang}`);
                  // 다른 언어 블록의 에디터와 HTML 에디터를 숨김
                  if (editorDiv) editorDiv.style.display = 'none';
                  if (htmlEditorDiv) htmlEditorDiv.style.display = 'none';
              }
          });
      });
  </script>

<%- include('partials/footer') %>
<%- include('partials/scripts') %>

</body>
</html>